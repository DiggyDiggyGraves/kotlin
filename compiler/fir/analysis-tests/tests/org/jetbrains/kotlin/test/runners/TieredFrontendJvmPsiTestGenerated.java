/*
 * Copyright 2010-2025 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.utils.TransformersFunctions;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
public class TieredFrontendJvmPsiTestGenerated extends AbstractTieredFrontendJvmPsiTest {
  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests")
  @TestDataPath("$PROJECT_ROOT")
  public class Tests {
    @Test
    @TestMetadata("Abstract.kt")
    public void testAbstract() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Abstract.kt");
    }

    @Test
    @TestMetadata("AbstractAccessor.kt")
    public void testAbstractAccessor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AbstractAccessor.kt");
    }

    @Test
    @TestMetadata("abstractClassReference.kt")
    public void testAbstractClassReference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/abstractClassReference.kt");
    }

    @Test
    @TestMetadata("AbstractInAbstractClass.kt")
    public void testAbstractInAbstractClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AbstractInAbstractClass.kt");
    }

    @Test
    @TestMetadata("AbstractInClass.kt")
    public void testAbstractInClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AbstractInClass.kt");
    }

    @Test
    @TestMetadata("AbstractInTrait.kt")
    public void testAbstractInTrait() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AbstractInTrait.kt");
    }

    @Test
    @TestMetadata("ambiguityNamedVararg.kt")
    public void testAmbiguityNamedVararg() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ambiguityNamedVararg.kt");
    }

    @Test
    @TestMetadata("ambiguityWithVarargManyExamples.kt")
    public void testAmbiguityWithVarargManyExamples() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ambiguityWithVarargManyExamples.kt");
    }

    @Test
    @TestMetadata("ambiguousLabelInExtensionFunctionWithOuterClass.kt")
    public void testAmbiguousLabelInExtensionFunctionWithOuterClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ambiguousLabelInExtensionFunctionWithOuterClass.kt");
    }

    @Test
    @TestMetadata("ambiguousLabelInSuper.kt")
    public void testAmbiguousLabelInSuper() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ambiguousLabelInSuper.kt");
    }

    @Test
    @TestMetadata("AnonymousInitializers.kt")
    public void testAnonymousInitializers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AnonymousInitializers.kt");
    }

    @Test
    @TestMetadata("argumentTypeMismatchVsTooManyArgs.kt")
    public void testArgumentTypeMismatchVsTooManyArgs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/argumentTypeMismatchVsTooManyArgs.kt");
    }

    @Test
    @TestMetadata("assigningAssignments.kt")
    public void testAssigningAssignments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/assigningAssignments.kt");
    }

    @Test
    @TestMetadata("AutoCreatedIt.kt")
    public void testAutoCreatedIt() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/AutoCreatedIt.kt");
    }

    @Test
    @TestMetadata("BacktickNames.kt")
    public void testBacktickNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/BacktickNames.kt");
    }

    @Test
    @TestMetadata("Basic.kt")
    public void testBasic() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Basic.kt");
    }

    @Test
    @TestMetadata("BinaryCallsOnNullableValues.kt")
    public void testBinaryCallsOnNullableValues() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/BinaryCallsOnNullableValues.kt");
    }

    @Test
    @TestMetadata("Bounds.kt")
    public void testBounds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Bounds.kt");
    }

    @Test
    @TestMetadata("BreakContinue.kt")
    public void testBreakContinue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/BreakContinue.kt");
    }

    @Test
    @TestMetadata("BreakContinueInWhen_after.kt")
    public void testBreakContinueInWhen_after() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/BreakContinueInWhen_after.kt");
    }

    @Test
    @TestMetadata("breakLoopsBug3.kt")
    public void testBreakLoopsBug3() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/breakLoopsBug3.kt");
    }

    @Test
    @TestMetadata("breakLoopsBug4.kt")
    public void testBreakLoopsBug4() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/breakLoopsBug4.kt");
    }

    @Test
    @TestMetadata("callingProtectedFromInline.kt")
    public void testCallingProtectedFromInline() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callingProtectedFromInline.kt");
    }

    @Test
    @TestMetadata("Casts.kt")
    public void testCasts() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Casts.kt");
    }

    @Test
    @TestMetadata("CharacterLiterals.kt")
    public void testCharacterLiterals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/CharacterLiterals.kt");
    }

    @Test
    @TestMetadata("checkTypeTest.kt")
    public void testCheckTypeTest() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkTypeTest.kt");
    }

    @Test
    @TestMetadata("checkTypeWithExactTest.kt")
    public void testCheckTypeWithExactTest() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkTypeWithExactTest.kt");
    }

    @Test
    @TestMetadata("companionObjectInEnumAccess.kt")
    public void testCompanionObjectInEnumAccess() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/companionObjectInEnumAccess.kt");
    }

    @Test
    @TestMetadata("CompareToWithErrorType.kt")
    public void testCompareToWithErrorType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/CompareToWithErrorType.kt");
    }

    @Test
    @TestMetadata("compareWithReified.kt")
    public void testCompareWithReified() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/compareWithReified.kt");
    }

    @Test
    @TestMetadata("comparingArbitraryClasses.kt")
    public void testComparingArbitraryClasses() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/comparingArbitraryClasses.kt");
    }

    @Test
    @TestMetadata("compilerCrashInRedCode.kt")
    public void testCompilerCrashInRedCode() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/compilerCrashInRedCode.kt");
    }

    @Test
    @TestMetadata("compilerCrashParameterType.kt")
    public void testCompilerCrashParameterType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/compilerCrashParameterType.kt");
    }

    @Test
    @TestMetadata("conflictingOverloadsPrivateFunctions.kt")
    public void testConflictingOverloadsPrivateFunctions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/conflictingOverloadsPrivateFunctions.kt");
    }

    @Test
    @TestMetadata("Constants.kt")
    public void testConstants() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Constants.kt");
    }

    @Test
    @TestMetadata("Constructors.kt")
    public void testConstructors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Constructors.kt");
    }

    @Test
    @TestMetadata("ConstructorsOfPrimitives.kt")
    public void testConstructorsOfPrimitives() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ConstructorsOfPrimitives.kt");
    }

    @Test
    @TestMetadata("CovariantOverrideType.kt")
    public void testCovariantOverrideType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/CovariantOverrideType.kt");
    }

    @Test
    @TestMetadata("DefaultValueForParameterInFunctionType.kt")
    public void testDefaultValueForParameterInFunctionType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DefaultValueForParameterInFunctionType.kt");
    }

    @Test
    @TestMetadata("DefaultValuesCheckWithoutBody.kt")
    public void testDefaultValuesCheckWithoutBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DefaultValuesCheckWithoutBody.kt");
    }

    @Test
    @TestMetadata("DefaultValuesTypechecking.kt")
    public void testDefaultValuesTypechecking() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DefaultValuesTypechecking.kt");
    }

    @Test
    @TestMetadata("DeferredTypes.kt")
    public void testDeferredTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DeferredTypes.kt");
    }

    @Test
    @TestMetadata("delegationTypeMismatch.kt")
    public void testDelegationTypeMismatch() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegationTypeMismatch.kt");
    }

    @Test
    @TestMetadata("DeprecatedGetSetPropertyDelegateConvention.kt")
    public void testDeprecatedGetSetPropertyDelegateConvention() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DeprecatedGetSetPropertyDelegateConvention.kt");
    }

    @Test
    @TestMetadata("DeprecatedUnaryOperatorConventions.kt")
    public void testDeprecatedUnaryOperatorConventions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DeprecatedUnaryOperatorConventions.kt");
    }

    @Test
    @TestMetadata("differentNumericTypesFromSmartCast.kt")
    public void testDifferentNumericTypesFromSmartCast() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/differentNumericTypesFromSmartCast.kt");
    }

    @Test
    @TestMetadata("DisabledMultiDollarInterpolation.kt")
    public void testDisabledMultiDollarInterpolation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/DisabledMultiDollarInterpolation.kt");
    }

    @Test
    @TestMetadata("emptyLhsClassLiterals.kt")
    public void testEmptyLhsClassLiterals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/emptyLhsClassLiterals.kt");
    }

    @Test
    @TestMetadata("EmptyThrow.kt")
    public void testEmptyThrow() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/EmptyThrow.kt");
    }

    @Test
    @TestMetadata("EnumEntryAsType.kt")
    public void testEnumEntryAsType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/EnumEntryAsType.kt");
    }

    @Test
    @TestMetadata("equalityWithSmartCastInIfBlock.kt")
    public void testEqualityWithSmartCastInIfBlock() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/equalityWithSmartCastInIfBlock.kt");
    }

    @Test
    @TestMetadata("errorSuppressionsWithoutWarning.kt")
    public void testErrorSuppressionsWithoutWarning() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/errorSuppressionsWithoutWarning.kt");
    }

    @Test
    @TestMetadata("expressionsInQaSelectorsCornerCases.kt")
    public void testExpressionsInQaSelectorsCornerCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/expressionsInQaSelectorsCornerCases.kt");
    }

    @Test
    @TestMetadata("expressionsInQaSelectorsReceiverConversion.kt")
    public void testExpressionsInQaSelectorsReceiverConversion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/expressionsInQaSelectorsReceiverConversion.kt");
    }

    @Test
    @TestMetadata("ExtensionCallInvoke.kt")
    public void testExtensionCallInvoke() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ExtensionCallInvoke.kt");
    }

    @Test
    @TestMetadata("ExternalAccessors.kt")
    public void testExternalAccessors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ExternalAccessors.kt");
    }

    @Test
    @TestMetadata("ExternalAndAbstract.kt")
    public void testExternalAndAbstract() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ExternalAndAbstract.kt");
    }

    @Test
    @TestMetadata("falseNegativeDuplicateDefaultValues1_error.kt")
    public void testFalseNegativeDuplicateDefaultValues1_error() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/falseNegativeDuplicateDefaultValues1_error.kt");
    }

    @Test
    @TestMetadata("falseNegativeSuperCallWithDefaults.kt")
    public void testFalseNegativeSuperCallWithDefaults() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/falseNegativeSuperCallWithDefaults.kt");
    }

    @Test
    @TestMetadata("falsePropertyAmongEnums.kt")
    public void testFalsePropertyAmongEnums() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/falsePropertyAmongEnums.kt");
    }

    @Test
    @TestMetadata("falsePropertyAmongEnumsWithProperAnalysis.kt")
    public void testFalsePropertyAmongEnumsWithProperAnalysis() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/falsePropertyAmongEnumsWithProperAnalysis.kt");
    }

    @Test
    @TestMetadata("finalSupertype.kt")
    public void testFinalSupertype() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/finalSupertype.kt");
    }

    @Test
    @TestMetadata("ForRangeConventions.kt")
    public void testForRangeConventions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ForRangeConventions.kt");
    }

    @Test
    @TestMetadata("FreeFunctionCalledAsExtension.kt")
    public void testFreeFunctionCalledAsExtension() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/FreeFunctionCalledAsExtension.kt");
    }

    @Test
    @TestMetadata("funReturnsAny.kt")
    public void testFunReturnsAny() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funReturnsAny.kt");
    }

    @Test
    @TestMetadata("FunctionCalleeExpressions.kt")
    public void testFunctionCalleeExpressions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/FunctionCalleeExpressions.kt");
    }

    @Test
    @TestMetadata("FunctionParameterWithoutType.kt")
    public void testFunctionParameterWithoutType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/FunctionParameterWithoutType.kt");
    }

    @Test
    @TestMetadata("FunctionReturnTypes.kt")
    public void testFunctionReturnTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/FunctionReturnTypes.kt");
    }

    @Test
    @TestMetadata("functionTypeInitializerTypeMismatch.kt")
    public void testFunctionTypeInitializerTypeMismatch() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionTypeInitializerTypeMismatch.kt");
    }

    @Test
    @TestMetadata("GenericArgumentConsistency.kt")
    public void testGenericArgumentConsistency() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/GenericArgumentConsistency.kt");
    }

    @Test
    @TestMetadata("GenericFunctionIsLessSpecific.kt")
    public void testGenericFunctionIsLessSpecific() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/GenericFunctionIsLessSpecific.kt");
    }

    @Test
    @TestMetadata("IdentityComparisonWithPrimitives.kt")
    public void testIdentityComparisonWithPrimitives() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IdentityComparisonWithPrimitives.kt");
    }

    @Test
    @TestMetadata("illegalCharsInPackageWithDots.kt")
    public void testIllegalCharsInPackageWithDots() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/illegalCharsInPackageWithDots.kt");
    }

    @Test
    @TestMetadata("implicitNothing.kt")
    public void testImplicitNothing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/implicitNothing.kt");
    }

    @Test
    @TestMetadata("inapplicableTargetPropertyImmutableInPrimaryConstructor.kt")
    public void testInapplicableTargetPropertyImmutableInPrimaryConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inapplicableTargetPropertyImmutableInPrimaryConstructor.kt");
    }

    @Test
    @TestMetadata("IncDec.kt")
    public void testIncDec() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncDec.kt");
    }

    @Test
    @TestMetadata("IncorrectCharacterLiterals.kt")
    public void testIncorrectCharacterLiterals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncorrectCharacterLiterals.kt");
    }

    @Test
    @TestMetadata("IncorrectMultiDollarInterpolationCodeA.kt")
    public void testIncorrectMultiDollarInterpolationCodeA() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncorrectMultiDollarInterpolationCodeA.kt");
    }

    @Test
    @TestMetadata("IncorrectMultiDollarInterpolationCodeB.kt")
    public void testIncorrectMultiDollarInterpolationCodeB() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncorrectMultiDollarInterpolationCodeB.kt");
    }

    @Test
    @TestMetadata("IncorrectPaddedMultiDollarInterpolationCodeA.kt")
    public void testIncorrectPaddedMultiDollarInterpolationCodeA() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncorrectPaddedMultiDollarInterpolationCodeA.kt");
    }

    @Test
    @TestMetadata("IncorrectPaddedMultiDollarInterpolationCodeB.kt")
    public void testIncorrectPaddedMultiDollarInterpolationCodeB() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IncorrectPaddedMultiDollarInterpolationCodeB.kt");
    }

    @Test
    @TestMetadata("incrementDecrementOnObject.kt")
    public void testIncrementDecrementOnObject() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incrementDecrementOnObject.kt");
    }

    @Test
    @TestMetadata("incrementOnErrorCallable.kt")
    public void testIncrementOnErrorCallable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incrementOnErrorCallable.kt");
    }

    @Test
    @TestMetadata("Infix.kt")
    public void testInfix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Infix.kt");
    }

    @Test
    @TestMetadata("InfixModifierApplicability.kt")
    public void testInfixModifierApplicability() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/InfixModifierApplicability.kt");
    }

    @Test
    @TestMetadata("initializedAfterRethrow.kt")
    public void testInitializedAfterRethrow() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/initializedAfterRethrow.kt");
    }

    @Test
    @TestMetadata("inlineConstructorParameter.kt")
    public void testInlineConstructorParameter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineConstructorParameter.kt");
    }

    @Test
    @TestMetadata("inlineConstructorParameter_on.kt")
    public void testInlineConstructorParameter_on() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineConstructorParameter_on.kt");
    }

    @Test
    @TestMetadata("inlineDeprecationsOnImplicitCalls.kt")
    public void testInlineDeprecationsOnImplicitCalls() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineDeprecationsOnImplicitCalls.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesAccessorDifferences_Huge.kt")
    public void testIntersectedVisibilitiesAccessorDifferences_Huge() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesAccessorDifferences_Huge.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesAccessorDifferences_Small.kt")
    public void testIntersectedVisibilitiesAccessorDifferences_Small() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesAccessorDifferences_Small.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesAccessorDifferences_Useful1.kt")
    public void testIntersectedVisibilitiesAccessorDifferences_Useful1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesAccessorDifferences_Useful1.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesAccessorDifferences_Useful2.kt")
    public void testIntersectedVisibilitiesAccessorDifferences_Useful2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesAccessorDifferences_Useful2.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesForNonAbstractPropertyAccessors.kt")
    public void testIntersectedVisibilitiesForNonAbstractPropertyAccessors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesForNonAbstractPropertyAccessors.kt");
    }

    @Test
    @TestMetadata("intersectedVisibilitiesPropertyAccessorsAdditionalWarnigns.kt")
    public void testIntersectedVisibilitiesPropertyAccessorsAdditionalWarnigns() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectedVisibilitiesPropertyAccessorsAdditionalWarnigns.kt");
    }

    @Test
    @TestMetadata("intersectionTypeRendering.kt")
    public void testIntersectionTypeRendering() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/intersectionTypeRendering.kt");
    }

    @Test
    @TestMetadata("invalidAnnotation.kt")
    public void testInvalidAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/invalidAnnotation.kt");
    }

    @Test
    @TestMetadata("invalidTargetCrashesCompiler.kt")
    public void testInvalidTargetCrashesCompiler() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/invalidTargetCrashesCompiler.kt");
    }

    @Test
    @TestMetadata("invisibleClassInsteadOfFun.kt")
    public void testInvisibleClassInsteadOfFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/invisibleClassInsteadOfFun.kt");
    }

    @Test
    @TestMetadata("invisibleMemberDestructuring.kt")
    public void testInvisibleMemberDestructuring() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/invisibleMemberDestructuring.kt");
    }

    @Test
    @TestMetadata("InvokeAndRecursiveResolve.kt")
    public void testInvokeAndRecursiveResolve() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/InvokeAndRecursiveResolve.kt");
    }

    @Test
    @TestMetadata("IsExpressions.kt")
    public void testIsExpressions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/IsExpressions.kt");
    }

    @Test
    @TestMetadata("KotlinActualAnnotationHasNoEffectInKotlin.kt")
    public void testKotlinActualAnnotationHasNoEffectInKotlin() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/KotlinActualAnnotationHasNoEffectInKotlin.kt");
    }

    @Test
    @TestMetadata("kt13401.kt")
    public void testKt13401() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt13401.kt");
    }

    @Test
    @TestMetadata("kt310.kt")
    public void testKt310() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt310.kt");
    }

    @Test
    @TestMetadata("kt34440.kt")
    public void testKt34440() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt34440.kt");
    }

    @Test
    @TestMetadata("kt34857.kt")
    public void testKt34857() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt34857.kt");
    }

    @Test
    @TestMetadata("kt435.kt")
    public void testKt435() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt435.kt");
    }

    @Test
    @TestMetadata("kt46483.kt")
    public void testKt46483() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt46483.kt");
    }

    @Test
    @TestMetadata("kt49438.kt")
    public void testKt49438() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt49438.kt");
    }

    @Test
    @TestMetadata("kt53988.kt")
    public void testKt53988() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt53988.kt");
    }

    @Test
    @TestMetadata("kt54587_1.kt")
    public void testKt54587_1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt54587_1.kt");
    }

    @Test
    @TestMetadata("kt54587_2.kt")
    public void testKt54587_2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt54587_2.kt");
    }

    @Test
    @TestMetadata("kt55181.kt")
    public void testKt55181() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt55181.kt");
    }

    @Test
    @TestMetadata("kt55733.kt")
    public void testKt55733() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt55733.kt");
    }

    @Test
    @TestMetadata("kt56723.kt")
    public void testKt56723() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt56723.kt");
    }

    @Test
    @TestMetadata("kt56769.kt")
    public void testKt56769() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt56769.kt");
    }

    @Test
    @TestMetadata("kt56876.kt")
    public void testKt56876() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt56876.kt");
    }

    @Test
    @TestMetadata("kt56877.kt")
    public void testKt56877() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt56877.kt");
    }

    @Test
    @TestMetadata("Kt60343.kt")
    public void testKt60343() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Kt60343.kt");
    }

    @Test
    @TestMetadata("kt60638.kt")
    public void testKt60638() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/kt60638.kt");
    }

    @Test
    @TestMetadata("LValueAssignment.kt")
    public void testLValueAssignment() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/LValueAssignment.kt");
    }

    @Test
    @TestMetadata("labeledLambda.kt")
    public void testLabeledLambda() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/labeledLambda.kt");
    }

    @Test
    @TestMetadata("LocalClassAndShortSubpackageNames.kt")
    public void testLocalClassAndShortSubpackageNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/LocalClassAndShortSubpackageNames.kt");
    }

    @Test
    @TestMetadata("localInterfaces.kt")
    public void testLocalInterfaces() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/localInterfaces.kt");
    }

    @Test
    @TestMetadata("missedTypeArgumentsInAnnotationCall.kt")
    public void testMissedTypeArgumentsInAnnotationCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missedTypeArgumentsInAnnotationCall.kt");
    }

    @Test
    @TestMetadata("missingConflictingOverloads.kt")
    public void testMissingConflictingOverloads() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missingConflictingOverloads.kt");
    }

    @Test
    @TestMetadata("missingIteratorMissing.kt")
    public void testMissingIteratorMissing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missingIteratorMissing.kt");
    }

    @Test
    @TestMetadata("missingMultipleDefaultsOnTransitiveInheritance2.kt")
    public void testMissingMultipleDefaultsOnTransitiveInheritance2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missingMultipleDefaultsOnTransitiveInheritance2.kt");
    }

    @Test
    @TestMetadata("missingVisibilityErrorAccessThroughTypealias.kt")
    public void testMissingVisibilityErrorAccessThroughTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missingVisibilityErrorAccessThroughTypealias.kt");
    }

    @Test
    @TestMetadata("missingWrongAnnotationTarget.kt")
    public void testMissingWrongAnnotationTarget() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/missingWrongAnnotationTarget.kt");
    }

    @Test
    @TestMetadata("moreThanOneOverriddenMissingK2.kt")
    public void testMoreThanOneOverriddenMissingK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/moreThanOneOverriddenMissingK2.kt");
    }

    @Test
    @TestMetadata("MultilineStringTemplates.kt")
    public void testMultilineStringTemplates() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/MultilineStringTemplates.kt");
    }

    @Test
    @TestMetadata("MultipleBounds.kt")
    public void testMultipleBounds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/MultipleBounds.kt");
    }

    @Test
    @TestMetadata("multipleDefaultsIncorrectlyAllowed1.kt")
    public void testMultipleDefaultsIncorrectlyAllowed1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multipleDefaultsIncorrectlyAllowed1.kt");
    }

    @Test
    @TestMetadata("multipleDefaultsNoSource.kt")
    public void testMultipleDefaultsNoSource() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multipleDefaultsNoSource.kt");
    }

    @Test
    @TestMetadata("NamedFunctionTypeParameterInSupertype.kt")
    public void testNamedFunctionTypeParameterInSupertype() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/NamedFunctionTypeParameterInSupertype.kt");
    }

    @Test
    @TestMetadata("nestedClassConstructorVsMemberFunctionConflict.kt")
    public void testNestedClassConstructorVsMemberFunctionConflict() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nestedClassConstructorVsMemberFunctionConflict.kt");
    }

    @Test
    @TestMetadata("noValueForParameterOfLambda.kt")
    public void testNoValueForParameterOfLambda() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/noValueForParameterOfLambda.kt");
    }

    @Test
    @TestMetadata("nothingBound.kt")
    public void testNothingBound() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nothingBound.kt");
    }

    @Test
    @TestMetadata("Nullability.kt")
    public void testNullability() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Nullability.kt");
    }

    @Test
    @TestMetadata("NumberPrefixAndSuffix.kt")
    public void testNumberPrefixAndSuffix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/NumberPrefixAndSuffix.kt");
    }

    @Test
    @TestMetadata("ObjectWithConstructor.kt")
    public void testObjectWithConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ObjectWithConstructor.kt");
    }

    @Test
    @TestMetadata("OperatorChecks.kt")
    public void testOperatorChecks() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/OperatorChecks.kt");
    }

    @Test
    @TestMetadata("OperatorConventions.kt")
    public void testOperatorConventions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/OperatorConventions.kt");
    }

    @Test
    @TestMetadata("Operators.kt")
    public void testOperators() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Operators.kt");
    }

    @Test
    @TestMetadata("OperatorsWithWrongNames.kt")
    public void testOperatorsWithWrongNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/OperatorsWithWrongNames.kt");
    }

    @Test
    @TestMetadata("OverridenSetterVisibility.kt")
    public void testOverridenSetterVisibility() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/OverridenSetterVisibility.kt");
    }

    @Test
    @TestMetadata("OverridingVarByVal.kt")
    public void testOverridingVarByVal() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/OverridingVarByVal.kt");
    }

    @Test
    @TestMetadata("PackageInExpressionPosition.kt")
    public void testPackageInExpressionPosition() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PackageInExpressionPosition.kt");
    }

    @Test
    @TestMetadata("PackageInTypePosition.kt")
    public void testPackageInTypePosition() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PackageInTypePosition.kt");
    }

    @Test
    @TestMetadata("PackageQualified.kt")
    public void testPackageQualified() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PackageQualified.kt");
    }

    @Test
    @TestMetadata("packageWithModifiers.kt")
    public void testPackageWithModifiers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/packageWithModifiers.kt");
    }

    @Test
    @TestMetadata("parenthesesWithAssignmentOrSetValCornerCases.kt")
    public void testParenthesesWithAssignmentOrSetValCornerCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/parenthesesWithAssignmentOrSetValCornerCases.kt");
    }

    @Test
    @TestMetadata("parenthesesWithAssignmentOrSetVarCornerCases.kt")
    public void testParenthesesWithAssignmentOrSetVarCornerCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/parenthesesWithAssignmentOrSetVarCornerCases.kt");
    }

    @Test
    @TestMetadata("parenthesesWithIndexedAssignmentOrSetValCornerCases.kt")
    public void testParenthesesWithIndexedAssignmentOrSetValCornerCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/parenthesesWithIndexedAssignmentOrSetValCornerCases.kt");
    }

    @Test
    @TestMetadata("parenthesesWithIndexedAssignmentOrSetVarCornerCases.kt")
    public void testParenthesesWithIndexedAssignmentOrSetVarCornerCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/parenthesesWithIndexedAssignmentOrSetVarCornerCases.kt");
    }

    @Test
    @TestMetadata("postfixIncSmartCast.kt")
    public void testPostfixIncSmartCast() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/postfixIncSmartCast.kt");
    }

    @Test
    @TestMetadata("prefixIncReturnType.kt")
    public void testPrefixIncReturnType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/prefixIncReturnType.kt");
    }

    @Test
    @TestMetadata("PrimaryConstructors.kt")
    public void testPrimaryConstructors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PrimaryConstructors.kt");
    }

    @Test
    @TestMetadata("PrivateFromOuterPackage.kt")
    public void testPrivateFromOuterPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PrivateFromOuterPackage.kt");
    }

    @Test
    @TestMetadata("PrivateSetterForOverridden.kt")
    public void testPrivateSetterForOverridden() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PrivateSetterForOverridden.kt");
    }

    @Test
    @TestMetadata("privateSetterSmartcastsToPublicSetter.kt")
    public void testPrivateSetterSmartcastsToPublicSetter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/privateSetterSmartcastsToPublicSetter.kt");
    }

    @Test
    @TestMetadata("ProcessingEmptyImport.kt")
    public void testProcessingEmptyImport() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ProcessingEmptyImport.kt");
    }

    @Test
    @TestMetadata("ProjectionOnFunctionArgumentErrror.kt")
    public void testProjectionOnFunctionArgumentErrror() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ProjectionOnFunctionArgumentErrror.kt");
    }

    @Test
    @TestMetadata("projectionProblemInIsExpression.kt")
    public void testProjectionProblemInIsExpression() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/projectionProblemInIsExpression.kt");
    }

    @Test
    @TestMetadata("projectionProblemInIsMultiTypealiasArgument.kt")
    public void testProjectionProblemInIsMultiTypealiasArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/projectionProblemInIsMultiTypealiasArgument.kt");
    }

    @Test
    @TestMetadata("projectionProblemInIsTypealiasArgument.kt")
    public void testProjectionProblemInIsTypealiasArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/projectionProblemInIsTypealiasArgument.kt");
    }

    @Test
    @TestMetadata("projectionProblemWithTypealiasArgument.kt")
    public void testProjectionProblemWithTypealiasArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/projectionProblemWithTypealiasArgument.kt");
    }

    @Test
    @TestMetadata("ProjectionsInSupertypes.kt")
    public void testProjectionsInSupertypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ProjectionsInSupertypes.kt");
    }

    @Test
    @TestMetadata("Properties.kt")
    public void testProperties() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Properties.kt");
    }

    @Test
    @TestMetadata("PropertyInitializers.kt")
    public void testPropertyInitializers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/PropertyInitializers.kt");
    }

    @Test
    @TestMetadata("propertyPrivateSetttersPlusAssign.kt")
    public void testPropertyPrivateSetttersPlusAssign() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/propertyPrivateSetttersPlusAssign.kt");
    }

    @Test
    @TestMetadata("protectedWithGenericsInDifferentPackage.kt")
    public void testProtectedWithGenericsInDifferentPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/protectedWithGenericsInDifferentPackage.kt");
    }

    @Test
    @TestMetadata("publishedApi.kt")
    public void testPublishedApi() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/publishedApi.kt");
    }

    @Test
    @TestMetadata("publishedApiOverride.kt")
    public void testPublishedApiOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/publishedApiOverride.kt");
    }

    @Test
    @TestMetadata("QualifiedExpressions.kt")
    public void testQualifiedExpressions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/QualifiedExpressions.kt");
    }

    @Test
    @TestMetadata("receiverResolutionInDelegatedConstructor.kt")
    public void testReceiverResolutionInDelegatedConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/receiverResolutionInDelegatedConstructor.kt");
    }

    @Test
    @TestMetadata("RecursiveTypeInference.kt")
    public void testRecursiveTypeInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/RecursiveTypeInference.kt");
    }

    @Test
    @TestMetadata("recursiveTypealiasWithProjection.kt")
    public void testRecursiveTypealiasWithProjection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recursiveTypealiasWithProjection.kt");
    }

    @Test
    @TestMetadata("referenceToParameterizedFun.kt")
    public void testReferenceToParameterizedFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/referenceToParameterizedFun.kt");
    }

    @Test
    @TestMetadata("renderConstructorWithIntersection.kt")
    public void testRenderConstructorWithIntersection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/renderConstructorWithIntersection.kt");
    }

    @Test
    @TestMetadata("renderingOfTypesWithSameName.kt")
    public void testRenderingOfTypesWithSameName() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/renderingOfTypesWithSameName.kt");
    }

    @Test
    @TestMetadata("ReserveYield2.kt")
    public void testReserveYield2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ReserveYield2.kt");
    }

    @Test
    @TestMetadata("ReserveYieldNoMore2.kt")
    public void testReserveYieldNoMore2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ReserveYieldNoMore2.kt");
    }

    @Test
    @TestMetadata("ResolveOfJavaGenerics.kt")
    public void testResolveOfJavaGenerics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ResolveOfJavaGenerics.kt");
    }

    @Test
    @TestMetadata("ResolveToJava.kt")
    public void testResolveToJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ResolveToJava.kt");
    }

    @Test
    @TestMetadata("restrictsSuspensionDifference.kt")
    public void testRestrictsSuspensionDifference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/restrictsSuspensionDifference.kt");
    }

    @Test
    @TestMetadata("Return.kt")
    public void testReturn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Return.kt");
    }

    @Test
    @TestMetadata("ReturnInFunctionWithoutBody.kt")
    public void testReturnInFunctionWithoutBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/ReturnInFunctionWithoutBody.kt");
    }

    @Test
    @TestMetadata("safeCall.kt")
    public void testSafeCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/safeCall.kt");
    }

    @Test
    @TestMetadata("SafeCallNonNullReceiver.kt")
    public void testSafeCallNonNullReceiver() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SafeCallNonNullReceiver.kt");
    }

    @Test
    @TestMetadata("SafeCallNonNullReceiverReturnNull.kt")
    public void testSafeCallNonNullReceiverReturnNull() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SafeCallNonNullReceiverReturnNull.kt");
    }

    @Test
    @TestMetadata("SafeCallOnFakePackage.kt")
    public void testSafeCallOnFakePackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SafeCallOnFakePackage.kt");
    }

    @Test
    @TestMetadata("SafeCallOnSuperReceiver.kt")
    public void testSafeCallOnSuperReceiver() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SafeCallOnSuperReceiver.kt");
    }

    @Test
    @TestMetadata("SafeCallUnknownType.kt")
    public void testSafeCallUnknownType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SafeCallUnknownType.kt");
    }

    @Test
    @TestMetadata("Serializable.kt")
    public void testSerializable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Serializable.kt");
    }

    @Test
    @TestMetadata("SetterVisibility.kt")
    public void testSetterVisibility() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SetterVisibility.kt");
    }

    @Test
    @TestMetadata("StarsInFunctionCalls.kt")
    public void testStarsInFunctionCalls() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/StarsInFunctionCalls.kt");
    }

    @Test
    @TestMetadata("StringPrefixAndSuffix.kt")
    public void testStringPrefixAndSuffix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/StringPrefixAndSuffix.kt");
    }

    @Test
    @TestMetadata("StringTemplates.kt")
    public void testStringTemplates() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/StringTemplates.kt");
    }

    @Test
    @TestMetadata("SupertypeListChecks.kt")
    public void testSupertypeListChecks() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SupertypeListChecks.kt");
    }

    @Test
    @TestMetadata("suppressExposedPropertyTypeInConstructor.kt")
    public void testSuppressExposedPropertyTypeInConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suppressExposedPropertyTypeInConstructor.kt");
    }

    @Test
    @TestMetadata("suppressExposedPropertyTypeInPrivateConstructor.kt")
    public void testSuppressExposedPropertyTypeInPrivateConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suppressExposedPropertyTypeInPrivateConstructor.kt");
    }

    @Test
    @TestMetadata("suspendConflictingOverloads.kt")
    public void testSuspendConflictingOverloads() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConflictingOverloads.kt");
    }

    @Test
    @TestMetadata("SyntaxErrorInTestHighlighting.kt")
    public void testSyntaxErrorInTestHighlighting() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlighting.kt");
    }

    @Test
    @TestMetadata("SyntaxErrorInTestHighlightingEof.kt")
    public void testSyntaxErrorInTestHighlightingEof() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/SyntaxErrorInTestHighlightingEof.kt");
    }

    @Test
    @TestMetadata("syntheticSet.kt")
    public void testSyntheticSet() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticSet.kt");
    }

    @Test
    @TestMetadata("tailRecOnVirtualMemberError.kt")
    public void testTailRecOnVirtualMemberError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/tailRecOnVirtualMemberError.kt");
    }

    @Test
    @TestMetadata("TraitOverrideObjectMethods.kt")
    public void testTraitOverrideObjectMethods() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/TraitOverrideObjectMethods.kt");
    }

    @Test
    @TestMetadata("TraitWithConstructor.kt")
    public void testTraitWithConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/TraitWithConstructor.kt");
    }

    @Test
    @TestMetadata("typeExposureAsABound.kt")
    public void testTypeExposureAsABound() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeExposureAsABound.kt");
    }

    @Test
    @TestMetadata("TypeInference.kt")
    public void testTypeInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/TypeInference.kt");
    }

    @Test
    @TestMetadata("TypeMismatchOnOverrideWithSyntaxErrors.kt")
    public void testTypeMismatchOnOverrideWithSyntaxErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/TypeMismatchOnOverrideWithSyntaxErrors.kt");
    }

    @Test
    @TestMetadata("Underscore.kt")
    public void testUnderscore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Underscore.kt");
    }

    @Test
    @TestMetadata("UnderscoreUsageInAnnotation.kt")
    public void testUnderscoreUsageInAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnderscoreUsageInAnnotation.kt");
    }

    @Test
    @TestMetadata("UnderscoreUsageInCall.kt")
    public void testUnderscoreUsageInCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnderscoreUsageInCall.kt");
    }

    @Test
    @TestMetadata("UnderscoreUsageInCallableRefTypeLHS.kt")
    public void testUnderscoreUsageInCallableRefTypeLHS() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnderscoreUsageInCallableRefTypeLHS.kt");
    }

    @Test
    @TestMetadata("UnderscoreUsageInType.kt")
    public void testUnderscoreUsageInType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnderscoreUsageInType.kt");
    }

    @Test
    @TestMetadata("UnderscoreUsageInVariableAsFunctionCall.kt")
    public void testUnderscoreUsageInVariableAsFunctionCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnderscoreUsageInVariableAsFunctionCall.kt");
    }

    @Test
    @TestMetadata("UnitValue.kt")
    public void testUnitValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnitValue.kt");
    }

    @Test
    @TestMetadata("Unresolved.kt")
    public void testUnresolved() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Unresolved.kt");
    }

    @Test
    @TestMetadata("unresolvedNameInBackticksInReceiver.kt")
    public void testUnresolvedNameInBackticksInReceiver() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unresolvedNameInBackticksInReceiver.kt");
    }

    @Test
    @TestMetadata("UnusedParameters.kt")
    public void testUnusedParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/UnusedParameters.kt");
    }

    @Test
    @TestMetadata("valueParameterWithoutExplicitType.kt")
    public void testValueParameterWithoutExplicitType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueParameterWithoutExplicitType.kt");
    }

    @Test
    @TestMetadata("varOverriddenByValThroughIntersection.kt")
    public void testVarOverriddenByValThroughIntersection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varOverriddenByValThroughIntersection.kt");
    }

    @Test
    @TestMetadata("Varargs.kt")
    public void testVarargs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Varargs.kt");
    }

    @Test
    @TestMetadata("Variance.kt")
    public void testVariance() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/Variance.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("AmbigiousAnnotationConstructor.kt")
      public void testAmbigiousAnnotationConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AmbigiousAnnotationConstructor.kt");
      }

      @Test
      @TestMetadata("AnnotatedBlock.kt")
      public void testAnnotatedBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedBlock.kt");
      }

      @Test
      @TestMetadata("AnnotatedCatchValueParameter.kt")
      public void testAnnotatedCatchValueParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedCatchValueParameter.kt");
      }

      @Test
      @TestMetadata("AnnotatedErrorTypeRef.kt")
      public void testAnnotatedErrorTypeRef() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedErrorTypeRef.kt");
      }

      @Test
      @TestMetadata("annotatedExpressionInsideAnnotation.kt")
      public void testAnnotatedExpressionInsideAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotatedExpressionInsideAnnotation.kt");
      }

      @Test
      @TestMetadata("AnnotatedNullableTypes.kt")
      public void testAnnotatedNullableTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedNullableTypes.kt");
      }

      @Test
      @TestMetadata("AnnotatedStatement.kt")
      public void testAnnotatedStatement() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedStatement.kt");
      }

      @Test
      @TestMetadata("AnnotatedTryCatch.kt")
      public void testAnnotatedTryCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotatedTryCatch.kt");
      }

      @Test
      @TestMetadata("AnnotationForClassTypeParameter_15.kt")
      public void testAnnotationForClassTypeParameter_15() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_15.kt");
      }

      @Test
      @TestMetadata("AnnotationForClassTypeParameter_16.kt")
      public void testAnnotationForClassTypeParameter_16() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_16.kt");
      }

      @Test
      @TestMetadata("AnnotationForClassTypeParameter_typeUseFlag.kt")
      public void testAnnotationForClassTypeParameter_typeUseFlag() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationForClassTypeParameter_typeUseFlag.kt");
      }

      @Test
      @TestMetadata("AnnotationForFunctionTypeParameter.kt")
      public void testAnnotationForFunctionTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationForFunctionTypeParameter.kt");
      }

      @Test
      @TestMetadata("AnnotationForObject.kt")
      public void testAnnotationForObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationForObject.kt");
      }

      @Test
      @TestMetadata("AnnotationIdentifier.kt")
      public void testAnnotationIdentifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationIdentifier.kt");
      }

      @Test
      @TestMetadata("AnnotationInContract.kt")
      public void testAnnotationInContract() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationInContract.kt");
      }

      @Test
      @TestMetadata("annotationInheritance.kt")
      public void testAnnotationInheritance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationInheritance.kt");
      }

      @Test
      @TestMetadata("annotationModifier.kt")
      public void testAnnotationModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationModifier.kt");
      }

      @Test
      @TestMetadata("annotationOnParameterInFunctionType.kt")
      public void testAnnotationOnParameterInFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationOnParameterInFunctionType.kt");
      }

      @Test
      @TestMetadata("annotationRenderingInTypes.kt")
      public void testAnnotationRenderingInTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationRenderingInTypes.kt");
      }

      @Test
      @TestMetadata("AnnotationsForPropertyTypeParameter.kt")
      public void testAnnotationsForPropertyTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/AnnotationsForPropertyTypeParameter.kt");
      }

      @Test
      @TestMetadata("annotationsOnLambdaAsCallArgument.kt")
      public void testAnnotationsOnLambdaAsCallArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationsOnLambdaAsCallArgument.kt");
      }

      @Test
      @TestMetadata("annotationsOnNullableTypes.kt")
      public void testAnnotationsOnNullableTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationsOnNullableTypes.kt");
      }

      @Test
      @TestMetadata("arrayLiteralFalseNegativeInsideLambda.kt")
      public void testArrayLiteralFalseNegativeInsideLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/arrayLiteralFalseNegativeInsideLambda.kt");
      }

      @Test
      @TestMetadata("arrayLiteralInAnnotationCompanion_after.kt")
      public void testArrayLiteralInAnnotationCompanion_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/arrayLiteralInAnnotationCompanion_after.kt");
      }

      @Test
      @TestMetadata("arrayLiteralInAnnotationCompanion_before.kt")
      public void testArrayLiteralInAnnotationCompanion_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/arrayLiteralInAnnotationCompanion_before.kt");
      }

      @Test
      @TestMetadata("atAnnotationResolve.kt")
      public void testAtAnnotationResolve() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/atAnnotationResolve.kt");
      }

      @Test
      @TestMetadata("BasicAnnotations.kt")
      public void testBasicAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/BasicAnnotations.kt");
      }

      @Test
      @TestMetadata("classAnnotationsInLocalClass.kt")
      public void testClassAnnotationsInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/classAnnotationsInLocalClass.kt");
      }

      @Test
      @TestMetadata("companionAnnotations.kt")
      public void testCompanionAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/companionAnnotations.kt");
      }

      @Test
      @TestMetadata("ConstructorCall.kt")
      public void testConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/ConstructorCall.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunction.kt")
      public void testCycleAnnotationOnFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunction.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnFunctionInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunctionParameterType.kt")
      public void testCycleAnnotationOnFunctionParameterType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionParameterType.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunctionParameterTypeInsideLocalClass.kt")
      public void testCycleAnnotationOnFunctionParameterTypeInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionParameterTypeInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunctionReceiverType.kt")
      public void testCycleAnnotationOnFunctionReceiverType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionReceiverType.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnFunctionReceiverTypeInsideLocalClass.kt")
      public void testCycleAnnotationOnFunctionReceiverTypeInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnFunctionReceiverTypeInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnProperty.kt")
      public void testCycleAnnotationOnProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnProperty.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnPropertyField.kt")
      public void testCycleAnnotationOnPropertyField() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyField.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnPropertyFieldInsideLocalClass.kt")
      public void testCycleAnnotationOnPropertyFieldInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyFieldInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnPropertyInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnPropertyReceiverType.kt")
      public void testCycleAnnotationOnPropertyReceiverType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyReceiverType.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnPropertyReceiverTypeInsideLocalClass.kt")
      public void testCycleAnnotationOnPropertyReceiverTypeInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnPropertyReceiverTypeInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnReceiverParameterFunction.kt")
      public void testCycleAnnotationOnReceiverParameterFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterFunction.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnReceiverParameterFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnReceiverParameterFunctionInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterFunctionInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnReceiverParameterProperty.kt")
      public void testCycleAnnotationOnReceiverParameterProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterProperty.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnReceiverParameterPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnReceiverParameterPropertyInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnReceiverParameterPropertyInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnTypeParameterFunction.kt")
      public void testCycleAnnotationOnTypeParameterFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterFunction.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnTypeParameterFunctionInsideLocalClass.kt")
      public void testCycleAnnotationOnTypeParameterFunctionInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterFunctionInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnTypeParameterProperty.kt")
      public void testCycleAnnotationOnTypeParameterProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterProperty.kt");
      }

      @Test
      @TestMetadata("cycleAnnotationOnTypeParameterPropertyInsideLocalClass.kt")
      public void testCycleAnnotationOnTypeParameterPropertyInsideLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleAnnotationOnTypeParameterPropertyInsideLocalClass.kt");
      }

      @Test
      @TestMetadata("cycleInParameters_after.kt")
      public void testCycleInParameters_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/cycleInParameters_after.kt");
      }

      @Test
      @TestMetadata("danglingAnnotation.kt")
      public void testDanglingAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/danglingAnnotation.kt");
      }

      @Test
      @TestMetadata("danglingAnnotationInLocalClass.kt")
      public void testDanglingAnnotationInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/danglingAnnotationInLocalClass.kt");
      }

      @Test
      @TestMetadata("danglingFileModifierWithNestedDeclarations.kt")
      public void testDanglingFileModifierWithNestedDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/danglingFileModifierWithNestedDeclarations.kt");
      }

      @Test
      @TestMetadata("DanglingInScript.kts")
      public void testDanglingInScript() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/DanglingInScript.kts");
      }

      @Test
      @TestMetadata("DanglingMixed.kt")
      public void testDanglingMixed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/DanglingMixed.kt");
      }

      @Test
      @TestMetadata("DanglingNoBrackets.kt")
      public void testDanglingNoBrackets() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/DanglingNoBrackets.kt");
      }

      @Test
      @TestMetadata("DanglingWithBrackets.kt")
      public void testDanglingWithBrackets() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/DanglingWithBrackets.kt");
      }

      @Test
      @TestMetadata("deprecatedDanglingFileModifierWithNestedDeclarations.kt")
      public void testDeprecatedDanglingFileModifierWithNestedDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/deprecatedDanglingFileModifierWithNestedDeclarations.kt");
      }

      @Test
      @TestMetadata("dontReportWarningAboutChangingExecutionOrderForVararg.kt")
      public void testDontReportWarningAboutChangingExecutionOrderForVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/dontReportWarningAboutChangingExecutionOrderForVararg.kt");
      }

      @Test
      @TestMetadata("extensionFunctionType.kt")
      public void testExtensionFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/extensionFunctionType.kt");
      }

      @Test
      @TestMetadata("forParameterAnnotationResolve.kt")
      public void testForParameterAnnotationResolve() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/forParameterAnnotationResolve.kt");
      }

      @Test
      @TestMetadata("illegalRequireKotlinValue.kt")
      public void testIllegalRequireKotlinValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/illegalRequireKotlinValue.kt");
      }

      @Test
      @TestMetadata("illegalSinceKotlinValue.kt")
      public void testIllegalSinceKotlinValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/illegalSinceKotlinValue.kt");
      }

      @Test
      @TestMetadata("inheritFromAnnotationClass.kt")
      public void testInheritFromAnnotationClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass.kt");
      }

      @Test
      @TestMetadata("inheritFromAnnotationClass2.kt")
      public void testInheritFromAnnotationClass2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/inheritFromAnnotationClass2.kt");
      }

      @Test
      @TestMetadata("InheritingAnnotationClass.kt")
      public void testInheritingAnnotationClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/InheritingAnnotationClass.kt");
      }

      @Test
      @TestMetadata("initializerWithNestedAnnotation.kt")
      public void testInitializerWithNestedAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/initializerWithNestedAnnotation.kt");
      }

      @Test
      @TestMetadata("initializerWithNestedAnnotationInLocalClass.kt")
      public void testInitializerWithNestedAnnotationInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/initializerWithNestedAnnotationInLocalClass.kt");
      }

      @Test
      @TestMetadata("invalidTypesInAnnotationConstructor.kt")
      public void testInvalidTypesInAnnotationConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/invalidTypesInAnnotationConstructor.kt");
      }

      @Test
      @TestMetadata("JvmSerializableLambdaAnnotation.kt")
      public void testJvmSerializableLambdaAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/JvmSerializableLambdaAnnotation.kt");
      }

      @Test
      @TestMetadata("kt1860-negative.kt")
      public void testKt1860_negative() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/kt1860-negative.kt");
      }

      @Test
      @TestMetadata("kt1860-positive.kt")
      public void testKt1860_positive() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/kt1860-positive.kt");
      }

      @Test
      @TestMetadata("kt1886annotationBody_after.kt")
      public void testKt1886annotationBody_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/kt1886annotationBody_after.kt");
      }

      @Test
      @TestMetadata("kt1886annotationBody_before.kt")
      public void testKt1886annotationBody_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/kt1886annotationBody_before.kt");
      }

      @Test
      @TestMetadata("missingValOnParameter.kt")
      public void testMissingValOnParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/missingValOnParameter.kt");
      }

      @Test
      @TestMetadata("MultiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/MultiDeclaration.kt");
      }

      @Test
      @TestMetadata("MutuallyRecursivelyAnnotatedGlobalFunction.kt")
      public void testMutuallyRecursivelyAnnotatedGlobalFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/MutuallyRecursivelyAnnotatedGlobalFunction.kt");
      }

      @Test
      @TestMetadata("nestedAliasWithNestedAnnotation.kt")
      public void testNestedAliasWithNestedAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/nestedAliasWithNestedAnnotation.kt");
      }

      @Test
      @TestMetadata("nestedAliasWithNestedAnnotationInLocalClass.kt")
      public void testNestedAliasWithNestedAnnotationInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/nestedAliasWithNestedAnnotationInLocalClass.kt");
      }

      @Test
      @TestMetadata("nestedClassAsIsAsAnnotationParameter.kt")
      public void testNestedClassAsIsAsAnnotationParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/nestedClassAsIsAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("nestedClassesInAnnotations.kt")
      public void testNestedClassesInAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/nestedClassesInAnnotations.kt");
      }

      @Test
      @TestMetadata("noNameProperty.kt")
      public void testNoNameProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/noNameProperty.kt");
      }

      @Test
      @TestMetadata("NonAnnotationClass.kt")
      public void testNonAnnotationClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/NonAnnotationClass.kt");
      }

      @Test
      @TestMetadata("onInitializer.kt")
      public void testOnInitializer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/onInitializer.kt");
      }

      @Test
      @TestMetadata("onLoops.kt")
      public void testOnLoops() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/onLoops.kt");
      }

      @Test
      @TestMetadata("onLoopsUnreachable.kt")
      public void testOnLoopsUnreachable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/onLoopsUnreachable.kt");
      }

      @Test
      @TestMetadata("onMultiDeclaration.kt")
      public void testOnMultiDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/onMultiDeclaration.kt");
      }

      @Test
      @TestMetadata("qualifiedNestedClassAsIsAsAnnotationParameter.kt")
      public void testQualifiedNestedClassAsIsAsAnnotationParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/qualifiedNestedClassAsIsAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedFunctionParameter.kt")
      public void testRecursivelyAnnotatedFunctionParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedFunctionParameter.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedGlobalFunction.kt")
      public void testRecursivelyAnnotatedGlobalFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedGlobalFunction.kt");
      }

      @Test
      @TestMetadata("RecursivelyAnnotatedProperty.kt")
      public void testRecursivelyAnnotatedProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/RecursivelyAnnotatedProperty.kt");
      }

      @Test
      @TestMetadata("RecursivelyIncorrectlyAnnotatedParameter.kt")
      public void testRecursivelyIncorrectlyAnnotatedParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/RecursivelyIncorrectlyAnnotatedParameter.kt");
      }

      @Test
      @TestMetadata("referenceOfAnnotatedFunctionInAnnotation.kt")
      public void testReferenceOfAnnotatedFunctionInAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/referenceOfAnnotatedFunctionInAnnotation.kt");
      }

      @Test
      @TestMetadata("requireKotlin.kt")
      public void testRequireKotlin() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/requireKotlin.kt");
      }

      @Test
      @TestMetadata("RetentionsOfAnnotationWithExpressionTarget_after.kt")
      public void testRetentionsOfAnnotationWithExpressionTarget_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/RetentionsOfAnnotationWithExpressionTarget_after.kt");
      }

      @Test
      @TestMetadata("typeAnnotations.kt")
      public void testTypeAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeAnnotations.kt");
      }

      @Test
      @TestMetadata("typeParameterAnnotationsInLocalClass.kt")
      public void testTypeParameterAnnotationsInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeParameterAnnotationsInLocalClass.kt");
      }

      @Test
      @TestMetadata("typeParameterAsAnnotation.kt")
      public void testTypeParameterAsAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeParameterAsAnnotation.kt");
      }

      @Test
      @TestMetadata("unreachableNestedClassAsAnnotationParameter.kt")
      public void testUnreachableNestedClassAsAnnotationParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/unreachableNestedClassAsAnnotationParameter.kt");
      }

      @Test
      @TestMetadata("UnresolvedAnnotationOnObject.kt")
      public void testUnresolvedAnnotationOnObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/UnresolvedAnnotationOnObject.kt");
      }

      @Test
      @TestMetadata("unresolvedReferenceRange.kt")
      public void testUnresolvedReferenceRange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/unresolvedReferenceRange.kt");
      }

      @Test
      @TestMetadata("WrongAnnotationArgsOnObject.kt")
      public void testWrongAnnotationArgsOnObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/WrongAnnotationArgsOnObject.kt");
      }

      @Test
      @TestMetadata("wrongAnnotationTarget.kt")
      public void testWrongAnnotationTarget() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/wrongAnnotationTarget.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameterMustBeConstant {
        @Test
        @TestMetadata("annotationConstructorDefaultParameter.kt")
        public void testAnnotationConstructorDefaultParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/annotationConstructorDefaultParameter.kt");
        }

        @Test
        @TestMetadata("booleanLocalVal.kt")
        public void testBooleanLocalVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/booleanLocalVal.kt");
        }

        @Test
        @TestMetadata("compareAndEquals.kt")
        public void testCompareAndEquals() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/compareAndEquals.kt");
        }

        @Test
        @TestMetadata("enumConst_after.kt")
        public void testEnumConst_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst_after.kt");
        }

        @Test
        @TestMetadata("enumConst_before.kt")
        public void testEnumConst_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/enumConst_before.kt");
        }

        @Test
        @TestMetadata("javaProperties.kt")
        public void testJavaProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/javaProperties.kt");
        }

        @Test
        @TestMetadata("kotlinProperties.kt")
        public void testKotlinProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/kotlinProperties.kt");
        }

        @Test
        @TestMetadata("lambdaParameter.kt")
        public void testLambdaParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/lambdaParameter.kt");
        }

        @Test
        @TestMetadata("standaloneInExpression.kt")
        public void testStandaloneInExpression() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/standaloneInExpression.kt");
        }

        @Test
        @TestMetadata("strings.kt")
        public void testStrings() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/annotationParameterMustBeConstant/strings.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/functionalTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionalTypes {
        @Test
        @TestMetadata("nonParenthesizedAnnotationsWithoutError.kt")
        public void testNonParenthesizedAnnotationsWithoutError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/functionalTypes/nonParenthesizedAnnotationsWithoutError.kt");
        }

        @Test
        @TestMetadata("parenthesizedAnnotations.kt")
        public void testParenthesizedAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/functionalTypes/parenthesizedAnnotations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/options")
      @TestDataPath("$PROJECT_ROOT")
      public class Options {
        @Test
        @TestMetadata("forParam.kt")
        public void testForParam() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/forParam.kt");
        }

        @Test
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/functions.kt");
        }

        @Test
        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/multiDeclaration.kt");
        }

        @Test
        @TestMetadata("prefix.kt")
        public void testPrefix() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/prefix.kt");
        }

        @Test
        @TestMetadata("setterParam.kt")
        public void testSetterParam() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/setterParam.kt");
        }

        @Test
        @TestMetadata("unrepeatable.kt")
        public void testUnrepeatable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/unrepeatable.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/options/targets")
        @TestDataPath("$PROJECT_ROOT")
        public class Targets {
          @Test
          @TestMetadata("accessors.kt")
          public void testAccessors() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/accessors.kt");
          }

          @Test
          @TestMetadata("annotation.kt")
          public void testAnnotation() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/annotation.kt");
          }

          @Test
          @TestMetadata("classifier.kt")
          public void testClassifier() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/classifier.kt");
          }

          @Test
          @TestMetadata("constructor.kt")
          public void testConstructor() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/constructor.kt");
          }

          @Test
          @TestMetadata("empty.kt")
          public void testEmpty() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/empty.kt");
          }

          @Test
          @TestMetadata("expr.kt")
          public void testExpr() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/expr.kt");
          }

          @Test
          @TestMetadata("field.kt")
          public void testField() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/field.kt");
          }

          @Test
          @TestMetadata("file.kt")
          public void testFile() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/file.kt");
          }

          @Test
          @TestMetadata("function.kt")
          public void testFunction() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/function.kt");
          }

          @Test
          @TestMetadata("funtypeargs.kt")
          public void testFuntypeargs() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/funtypeargs.kt");
          }

          @Test
          @TestMetadata("incorrect.kt")
          public void testIncorrect() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/incorrect.kt");
          }

          @Test
          @TestMetadata("init.kt")
          public void testInit() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/init.kt");
          }

          @Test
          @TestMetadata("java.kt")
          public void testJava() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/java.kt");
          }

          @Test
          @TestMetadata("local.kt")
          public void testLocal() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/local.kt");
          }

          @Test
          @TestMetadata("mixedTargeting.kt")
          public void testMixedTargeting() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/mixedTargeting.kt");
          }

          @Test
          @TestMetadata("nested.kt")
          public void testNested() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/nested.kt");
          }

          @Test
          @TestMetadata("property.kt")
          public void testProperty() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/property.kt");
          }

          @Test
          @TestMetadata("returntype.kt")
          public void testReturntype() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/returntype.kt");
          }

          @Test
          @TestMetadata("type.kt")
          public void testType() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/type.kt");
          }

          @Test
          @TestMetadata("typeParams.kt")
          public void testTypeParams() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/typeParams.kt");
          }

          @Test
          @TestMetadata("typeargs.kt")
          public void testTypeargs() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/typeargs.kt");
          }

          @Test
          @TestMetadata("valueparam.kt")
          public void testValueparam() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/options/targets/valueparam.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters")
      @TestDataPath("$PROJECT_ROOT")
      public class Parameters {
        @Test
        @TestMetadata("byte.kt")
        public void testByte() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/byte.kt");
        }

        @Test
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/int.kt");
        }

        @Test
        @TestMetadata("short.kt")
        public void testShort() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/short.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/annotations/parameters/expressions")
        @TestDataPath("$PROJECT_ROOT")
        public class Expressions {
          @Test
          @TestMetadata("char.kt")
          public void testChar() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/char.kt");
          }

          @Test
          @TestMetadata("divide.kt")
          public void testDivide() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/divide.kt");
          }

          @Test
          @TestMetadata("gt.kt")
          public void testGt() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/gt.kt");
          }

          @Test
          @TestMetadata("intrincics.kt")
          public void testIntrincics() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/intrincics.kt");
          }

          @Test
          @TestMetadata("labeled.kt")
          public void testLabeled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/labeled.kt");
          }

          @Test
          @TestMetadata("lt.kt")
          public void testLt() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/lt.kt");
          }

          @Test
          @TestMetadata("maxValue.kt")
          public void testMaxValue() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValue.kt");
          }

          @Test
          @TestMetadata("maxValueByte.kt")
          public void testMaxValueByte() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValueByte.kt");
          }

          @Test
          @TestMetadata("maxValueInt.kt")
          public void testMaxValueInt() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/maxValueInt.kt");
          }

          @Test
          @TestMetadata("miltiply.kt")
          public void testMiltiply() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/miltiply.kt");
          }

          @Test
          @TestMetadata("minus.kt")
          public void testMinus() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/minus.kt");
          }

          @Test
          @TestMetadata("mod.kt")
          public void testMod() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/mod.kt");
          }

          @Test
          @TestMetadata("not.kt")
          public void testNot() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/not.kt");
          }

          @Test
          @TestMetadata("paranthesized.kt")
          public void testParanthesized() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/paranthesized.kt");
          }

          @Test
          @TestMetadata("plus.kt")
          public void testPlus() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/plus.kt");
          }

          @Test
          @TestMetadata("stringTemplate.kt")
          public void testStringTemplate() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/stringTemplate.kt");
          }

          @Test
          @TestMetadata("strings.kt")
          public void testStrings() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/parameters/expressions/strings.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/rendering")
      @TestDataPath("$PROJECT_ROOT")
      public class Rendering {
        @Test
        @TestMetadata("cannotOverrideInvisibleMember.kt")
        public void testCannotOverrideInvisibleMember() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/cannotOverrideInvisibleMember.kt");
        }

        @Test
        @TestMetadata("conflictingOverloads.kt")
        public void testConflictingOverloads() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/conflictingOverloads.kt");
        }

        @Test
        @TestMetadata("memberProjectedOut.kt")
        public void testMemberProjectedOut() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/memberProjectedOut.kt");
        }

        @Test
        @TestMetadata("multipleInheritedDefaults.kt")
        public void testMultipleInheritedDefaults() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/multipleInheritedDefaults.kt");
        }

        @Test
        @TestMetadata("notImplementedMembers.kt")
        public void testNotImplementedMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/notImplementedMembers.kt");
        }

        @Test
        @TestMetadata("notImplementedMembersAroundJava.kt")
        public void testNotImplementedMembersAroundJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/notImplementedMembersAroundJava.kt");
        }

        @Test
        @TestMetadata("tooManyArguments.kt")
        public void testTooManyArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/tooManyArguments.kt");
        }

        @Test
        @TestMetadata("typeMismatchDueToTypeProjections.kt")
        public void testTypeMismatchDueToTypeProjections() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchDueToTypeProjections.kt");
        }

        @Test
        @TestMetadata("typeMismatchOnOverride.kt")
        public void testTypeMismatchOnOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchOnOverride.kt");
        }

        @Test
        @TestMetadata("typeMismatchOnOverrideJavaNullable.kt")
        public void testTypeMismatchOnOverrideJavaNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/rendering/typeMismatchOnOverrideJavaNullable.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/repeatable")
      @TestDataPath("$PROJECT_ROOT")
      public class Repeatable {
        @Test
        @TestMetadata("containerAndAnnotationAreBothApplied_1_5.kt")
        public void testContainerAndAnnotationAreBothApplied_1_5() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/containerAndAnnotationAreBothApplied_1_5.kt");
        }

        @Test
        @TestMetadata("containerAndAnnotationAreBothApplied_1_6.kt")
        public void testContainerAndAnnotationAreBothApplied_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/containerAndAnnotationAreBothApplied_1_6.kt");
        }

        @Test
        @TestMetadata("containerArguments_1_6.kt")
        public void testContainerArguments_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/containerArguments_1_6.kt");
        }

        @Test
        @TestMetadata("containerRetention_1_6.kt")
        public void testContainerRetention_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/containerRetention_1_6.kt");
        }

        @Test
        @TestMetadata("containerTarget_1_6.kt")
        public void testContainerTarget_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/containerTarget_1_6.kt");
        }

        @Test
        @TestMetadata("javaRepeatableInKotlin.kt")
        public void testJavaRepeatableInKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatableInKotlin.kt");
        }

        @Test
        @TestMetadata("javaRepeatable_1_5.kt")
        public void testJavaRepeatable_1_5() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/javaRepeatable_1_5.kt");
        }

        @Test
        @TestMetadata("javaUnrepeatable_1_5.kt")
        public void testJavaUnrepeatable_1_5() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/javaUnrepeatable_1_5.kt");
        }

        @Test
        @TestMetadata("javaUnrepeatable_1_6.kt")
        public void testJavaUnrepeatable_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/javaUnrepeatable_1_6.kt");
        }

        @Test
        @TestMetadata("kotlinRepeatable_1_5.kt")
        public void testKotlinRepeatable_1_5() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/kotlinRepeatable_1_5.kt");
        }

        @Test
        @TestMetadata("nestedClassContainer_1_6.kt")
        public void testNestedClassContainer_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/repeatable/nestedClassContainer_1_6.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/typeUse")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeUse {
        @Test
        @TestMetadata("kt25876.kt")
        public void testKt25876() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/kt25876.kt");
        }

        @Test
        @TestMetadata("kt45905.kt")
        public void testKt45905() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/kt45905.kt");
        }

        @Test
        @TestMetadata("kt46173.kt")
        public void testKt46173() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/kt46173.kt");
        }

        @Test
        @TestMetadata("kt47772.kt")
        public void testKt47772() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/kt47772.kt");
        }

        @Test
        @TestMetadata("kt8325.kt")
        public void testKt8325() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/kt8325.kt");
        }

        @Test
        @TestMetadata("nonTypeUseAnnotationOnType.kt")
        public void testNonTypeUseAnnotationOnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/typeUse/nonTypeUseAnnotationOnType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/annotations/withUseSiteTarget")
      @TestDataPath("$PROJECT_ROOT")
      public class WithUseSiteTarget {
        @Test
        @TestMetadata("DelegateAnnotations.kt")
        public void testDelegateAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/DelegateAnnotations.kt");
        }

        @Test
        @TestMetadata("diagnosticFileAnnotationInWrongPlace.kt")
        public void testDiagnosticFileAnnotationInWrongPlace() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticFileAnnotationInWrongPlace.kt");
        }

        @Test
        @TestMetadata("diagnosticWithoutPackage.kt")
        public void testDiagnosticWithoutPackage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackage.kt");
        }

        @Test
        @TestMetadata("diagnosticWithoutPackageWithSimpleAnnotation.kt")
        public void testDiagnosticWithoutPackageWithSimpleAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/diagnosticWithoutPackageWithSimpleAnnotation.kt");
        }

        @Test
        @TestMetadata("FieldAnnotations.kt")
        public void testFieldAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FieldAnnotations.kt");
        }

        @Test
        @TestMetadata("fileAnnotationWithoutColon_after.kt")
        public void testFileAnnotationWithoutColon_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/fileAnnotationWithoutColon_after.kt");
        }

        @Test
        @TestMetadata("fileAnnotationWithoutColon_before.kt")
        public void testFileAnnotationWithoutColon_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/fileAnnotationWithoutColon_before.kt");
        }

        @Test
        @TestMetadata("FileAnnotations.kt")
        public void testFileAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/FileAnnotations.kt");
        }

        @Test
        @TestMetadata("GetterAnnotations.kt")
        public void testGetterAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/GetterAnnotations.kt");
        }

        @Test
        @TestMetadata("kt23992_after.kt")
        public void testKt23992_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt23992_after.kt");
        }

        @Test
        @TestMetadata("kt26638_after.kt")
        public void testKt26638_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/kt26638_after.kt");
        }

        @Test
        @TestMetadata("ParamAnnotations.kt")
        public void testParamAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ParamAnnotations.kt");
        }

        @Test
        @TestMetadata("prohibitUseSiteGetTargetAnnotationsOff.kt")
        public void testProhibitUseSiteGetTargetAnnotationsOff() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/prohibitUseSiteGetTargetAnnotationsOff.kt");
        }

        @Test
        @TestMetadata("prohibitUseSiteGetTargetAnnotationsOn.kt")
        public void testProhibitUseSiteGetTargetAnnotationsOn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/prohibitUseSiteGetTargetAnnotationsOn.kt");
        }

        @Test
        @TestMetadata("PropertyAnnotations.kt")
        public void testPropertyAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/PropertyAnnotations.kt");
        }

        @Test
        @TestMetadata("propertyTargetOnEnumEntry_error.kt")
        public void testPropertyTargetOnEnumEntry_error() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/propertyTargetOnEnumEntry_error.kt");
        }

        @Test
        @TestMetadata("ReceiverAnnotations.kt")
        public void testReceiverAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/ReceiverAnnotations.kt");
        }

        @Test
        @TestMetadata("receiverUseSiteTargetOnExtensionFunction_after.kt")
        public void testReceiverUseSiteTargetOnExtensionFunction_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/receiverUseSiteTargetOnExtensionFunction_after.kt");
        }

        @Test
        @TestMetadata("receiverUseSiteTargetOnExtensionFunction_before.kt")
        public void testReceiverUseSiteTargetOnExtensionFunction_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/receiverUseSiteTargetOnExtensionFunction_before.kt");
        }

        @Test
        @TestMetadata("repeatable.kt")
        public void testRepeatable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/repeatable.kt");
        }

        @Test
        @TestMetadata("SetterAnnotations.kt")
        public void testSetterAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SetterAnnotations.kt");
        }

        @Test
        @TestMetadata("SparamAnnotations.kt")
        public void testSparamAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/SparamAnnotations.kt");
        }

        @Test
        @TestMetadata("wrongParamAnnotationsOnTypesError.kt")
        public void testWrongParamAnnotationsOnTypesError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypesError.kt");
        }

        @Test
        @TestMetadata("wrongParamAnnotationsOnTypes_after.kt")
        public void testWrongParamAnnotationsOnTypes_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypes_after.kt");
        }

        @Test
        @TestMetadata("wrongParamAnnotationsOnTypes_before.kt")
        public void testWrongParamAnnotationsOnTypes_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/annotations/withUseSiteTarget/wrongParamAnnotationsOnTypes_before.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/backingField")
    @TestDataPath("$PROJECT_ROOT")
    public class BackingField {
      @Test
      @TestMetadata("ExtensionProperty.kt")
      public void testExtensionProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/ExtensionProperty.kt");
      }

      @Test
      @TestMetadata("FieldInInterface.kt")
      public void testFieldInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/FieldInInterface.kt");
      }

      @Test
      @TestMetadata("FieldReassignment_after.kt")
      public void testFieldReassignment_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/FieldReassignment_after.kt");
      }

      @Test
      @TestMetadata("InitCustomSetter.kt")
      public void testInitCustomSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/InitCustomSetter.kt");
      }

      @Test
      @TestMetadata("InitOpenSetter.kt")
      public void testInitOpenSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/InitOpenSetter.kt");
      }

      @Test
      @TestMetadata("LocalDeclarations.kt")
      public void testLocalDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/LocalDeclarations.kt");
      }

      @Test
      @TestMetadata("MustBeInitializedEffectivelyFinalOff.kt")
      public void testMustBeInitializedEffectivelyFinalOff() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/MustBeInitializedEffectivelyFinalOff.kt");
      }

      @Test
      @TestMetadata("OpenPrivateValDeferredInit.kt")
      public void testOpenPrivateValDeferredInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/OpenPrivateValDeferredInit.kt");
      }

      @Test
      @TestMetadata("OpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal.kt")
      public void testOpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/OpenValDeferredInitError_InFinalClass_DisableEffectivelyFinal.kt");
      }

      @Test
      @TestMetadata("OpenValPartialDeferredInitErrorAnyway.kt")
      public void testOpenValPartialDeferredInitErrorAnyway() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitErrorAnyway.kt");
      }

      @Test
      @TestMetadata("OpenValPartialDeferredInitSecondaryConstructorErrorAnyway.kt")
      public void testOpenValPartialDeferredInitSecondaryConstructorErrorAnyway() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitSecondaryConstructorErrorAnyway.kt");
      }

      @Test
      @TestMetadata("OpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway.kt")
      public void testOpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/OpenValPartialDeferredInitTwoSecondaryConstructorsErrorAnyway.kt");
      }

      @Test
      @TestMetadata("SetterWithExplicitType.kt")
      public void testSetterWithExplicitType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/SetterWithExplicitType.kt");
      }

      @Test
      @TestMetadata("TopLevelPropertyInitialization.kt")
      public void testTopLevelPropertyInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/TopLevelPropertyInitialization.kt");
      }

      @Test
      @TestMetadata("ValDeferredInitInFinalClass.kt")
      public void testValDeferredInitInFinalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/ValDeferredInitInFinalClass.kt");
      }

      @Test
      @TestMetadata("ValDeferredInitInOpenClassOpenValError.kt")
      public void testValDeferredInitInOpenClassOpenValError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/ValDeferredInitInOpenClassOpenValError.kt");
      }

      @Test
      @TestMetadata("ValDeferredInitInOpenClassOpenValWarning.kt")
      public void testValDeferredInitInOpenClassOpenValWarning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/ValDeferredInitInOpenClassOpenValWarning.kt");
      }

      @Test
      @TestMetadata("ValWithSetterDeferredInit.kt")
      public void testValWithSetterDeferredInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/ValWithSetterDeferredInit.kt");
      }

      @Test
      @TestMetadata("VarDeferredInitInFinalClass.kt")
      public void testVarDeferredInitInFinalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/VarDeferredInitInFinalClass.kt");
      }

      @Test
      @TestMetadata("VarDeferredInitInOpenClass.kt")
      public void testVarDeferredInitInOpenClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/VarDeferredInitInOpenClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor {
        @Test
        @TestMetadata("implicitPrimaryConstructor_errorAnyway.kt")
        public void testImplicitPrimaryConstructor_errorAnyway() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/implicitPrimaryConstructor_errorAnyway.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneInheritedSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneInheritedSecondary_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneInheritedSecondary_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_deferredInitInSecondary_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openValError_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openValError_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openValError_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_oneSecondary_openVar_mustBeInitializedError.kt")
        public void testNoPrimary_oneSecondary_openVar_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_oneSecondary_openVar_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("noPrimary_partialDeferredInitInSecondary_errorAnyway.kt")
        public void testNoPrimary_partialDeferredInitInSecondary_errorAnyway() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_partialDeferredInitInSecondary_errorAnyway.kt");
        }

        @Test
        @TestMetadata("noPrimary_partialDeferredInitInTwoSecondaries_errorAnyway.kt")
        public void testNoPrimary_partialDeferredInitInTwoSecondaries_errorAnyway() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_partialDeferredInitInTwoSecondaries_errorAnyway.kt");
        }

        @Test
        @TestMetadata("noPrimary_twoSecondary_mustBeInitializedError.kt")
        public void testNoPrimary_twoSecondary_mustBeInitializedError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/noPrimary_twoSecondary_mustBeInitializedError.kt");
        }

        @Test
        @TestMetadata("onePrimary_oneSecondary_errorAnyway.kt")
        public void testOnePrimary_oneSecondary_errorAnyway() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/backingField/prohibitMissedMustBeInitializedWhenThereIsNoPrimaryConstructor/onePrimary_oneSecondary_errorAnyway.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/callableReference")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReference {
      @Test
      @TestMetadata("bareType.kt")
      public void testBareType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bareType.kt");
      }

      @Test
      @TestMetadata("callableReferenceAsLastExpressionInBlock.kt")
      public void testCallableReferenceAsLastExpressionInBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/callableReferenceAsLastExpressionInBlock.kt");
      }

      @Test
      @TestMetadata("constraintFromLHSWithCorrectDirection.kt")
      public void testConstraintFromLHSWithCorrectDirection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/constraintFromLHSWithCorrectDirection.kt");
      }

      @Test
      @TestMetadata("constraintFromLHSWithCorrectDirectionError.kt")
      public void testConstraintFromLHSWithCorrectDirectionError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/constraintFromLHSWithCorrectDirectionError.kt");
      }

      @Test
      @TestMetadata("deprecateTopLevelReferenceWithCompanionLHS.kt")
      public void testDeprecateTopLevelReferenceWithCompanionLHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/deprecateTopLevelReferenceWithCompanionLHS.kt");
      }

      @Test
      @TestMetadata("deprecatedCompanionReceiverInParentheses.kt")
      public void testDeprecatedCompanionReceiverInParentheses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/deprecatedCompanionReceiverInParentheses.kt");
      }

      @Test
      @TestMetadata("ea81649_errorPropertyLHS.kt")
      public void testEa81649_errorPropertyLHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/ea81649_errorPropertyLHS.kt");
      }

      @Test
      @TestMetadata("expectedTypeAsSubtypeOfFunctionType.kt")
      public void testExpectedTypeAsSubtypeOfFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/expectedTypeAsSubtypeOfFunctionType.kt");
      }

      @Test
      @TestMetadata("genericCallWithReferenceAgainstVararg.kt")
      public void testGenericCallWithReferenceAgainstVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/genericCallWithReferenceAgainstVararg.kt");
      }

      @Test
      @TestMetadata("genericTypealiasInLhs.kt")
      public void testGenericTypealiasInLhs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/genericTypealiasInLhs.kt");
      }

      @Test
      @TestMetadata("kt34314.kt")
      public void testKt34314() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt34314.kt");
      }

      @Test
      @TestMetadata("kt34314_lambda.kt")
      public void testKt34314_lambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt34314_lambda.kt");
      }

      @Test
      @TestMetadata("kt37530.kt")
      public void testKt37530() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt37530.kt");
      }

      @Test
      @TestMetadata("kt46437.kt")
      public void testKt46437() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt46437.kt");
      }

      @Test
      @TestMetadata("kt49038.kt")
      public void testKt49038() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt49038.kt");
      }

      @Test
      @TestMetadata("kt52503.kt")
      public void testKt52503() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt52503.kt");
      }

      @Test
      @TestMetadata("kt55373.kt")
      public void testKt55373() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt55373.kt");
      }

      @Test
      @TestMetadata("kt7430_wrongClassOnLHS.kt")
      public void testKt7430_wrongClassOnLHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/kt7430_wrongClassOnLHS.kt");
      }

      @Test
      @TestMetadata("memberExtensionsImportedFromObjectsUnsupported.kt")
      public void testMemberExtensionsImportedFromObjectsUnsupported() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/memberExtensionsImportedFromObjectsUnsupported.kt");
      }

      @Test
      @TestMetadata("noExceptionOnRedCodeWithArrayLikeCall.kt")
      public void testNoExceptionOnRedCodeWithArrayLikeCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/noExceptionOnRedCodeWithArrayLikeCall.kt");
      }

      @Test
      @TestMetadata("packageInLhs.kt")
      public void testPackageInLhs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/packageInLhs.kt");
      }

      @Test
      @TestMetadata("parsingPriorityOfGenericArgumentsVsLess.kt")
      public void testParsingPriorityOfGenericArgumentsVsLess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/parsingPriorityOfGenericArgumentsVsLess.kt");
      }

      @Test
      @TestMetadata("unitAdaptationForReferenceCompatibility.kt")
      public void testUnitAdaptationForReferenceCompatibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unitAdaptationForReferenceCompatibility.kt");
      }

      @Test
      @TestMetadata("whitespacesInExpression.kt")
      public void testWhitespacesInExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/whitespacesInExpression.kt");
      }

      @Test
      @TestMetadata("withQuestionMarks.kt")
      public void testWithQuestionMarks() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/withQuestionMarks.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/adapted")
      @TestDataPath("$PROJECT_ROOT")
      public class Adapted {
        @Test
        @TestMetadata("adaptationByExpectTypeOutsideCall.kt")
        public void testAdaptationByExpectTypeOutsideCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/adapted/adaptationByExpectTypeOutsideCall.kt");
        }

        @Test
        @TestMetadata("noKFunctionForAdaptation.kt")
        public void testNoKFunctionForAdaptation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/adapted/noKFunctionForAdaptation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/bound")
      @TestDataPath("$PROJECT_ROOT")
      public class Bound {
        @Test
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/companionObject.kt");
        }

        @Test
        @TestMetadata("expressionWithNullableType.kt")
        public void testExpressionWithNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/expressionWithNullableType.kt");
        }

        @Test
        @TestMetadata("functionCallWithoutArguments.kt")
        public void testFunctionCallWithoutArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/functionCallWithoutArguments.kt");
        }

        @Test
        @TestMetadata("innerNested.kt")
        public void testInnerNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/innerNested.kt");
        }

        @Test
        @TestMetadata("kt12843.kt")
        public void testKt12843() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/kt12843.kt");
        }

        @Test
        @TestMetadata("noThisInSuperCall.kt")
        public void testNoThisInSuperCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/noThisInSuperCall.kt");
        }

        @Test
        @TestMetadata("object.kt")
        public void testObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/object.kt");
        }

        @Test
        @TestMetadata("privateToThis.kt")
        public void testPrivateToThis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/privateToThis.kt");
        }

        @Test
        @TestMetadata("referenceToStaticMethodOnInstance.kt")
        public void testReferenceToStaticMethodOnInstance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/referenceToStaticMethodOnInstance.kt");
        }

        @Test
        @TestMetadata("reservedExpressionSyntax.kt")
        public void testReservedExpressionSyntax() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax.kt");
        }

        @Test
        @TestMetadata("reservedExpressionSyntax2.kt")
        public void testReservedExpressionSyntax2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax2.kt");
        }

        @Test
        @TestMetadata("reservedExpressionSyntax3.kt")
        public void testReservedExpressionSyntax3() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax3.kt");
        }

        @Test
        @TestMetadata("reservedExpressionSyntax4.kt")
        public void testReservedExpressionSyntax4() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/bound/reservedExpressionSyntax4.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/function")
      @TestDataPath("$PROJECT_ROOT")
      public class Function {
        @Test
        @TestMetadata("abstractClassConstructors.kt")
        public void testAbstractClassConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/abstractClassConstructors.kt");
        }

        @Test
        @TestMetadata("ambiguityTopLevelVsTopLevel.kt")
        public void testAmbiguityTopLevelVsTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevel.kt");
        }

        @Test
        @TestMetadata("ambiguityTopLevelVsTopLevelGeneric.kt")
        public void testAmbiguityTopLevelVsTopLevelGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/ambiguityTopLevelVsTopLevelGeneric.kt");
        }

        @Test
        @TestMetadata("annotationClassConstructor.kt")
        public void testAnnotationClassConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/annotationClassConstructor.kt");
        }

        @Test
        @TestMetadata("classMemberVsConstructorLikeFunction.kt")
        public void testClassMemberVsConstructorLikeFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/classMemberVsConstructorLikeFunction.kt");
        }

        @Test
        @TestMetadata("constructorFromClass.kt")
        public void testConstructorFromClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/constructorFromClass.kt");
        }

        @Test
        @TestMetadata("constructorFromExtension.kt")
        public void testConstructorFromExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtension.kt");
        }

        @Test
        @TestMetadata("constructorFromExtensionInClass.kt")
        public void testConstructorFromExtensionInClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/constructorFromExtensionInClass.kt");
        }

        @Test
        @TestMetadata("constructorFromTopLevel.kt")
        public void testConstructorFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/constructorFromTopLevel.kt");
        }

        @Test
        @TestMetadata("constructorOfNestedClassInObject.kt")
        public void testConstructorOfNestedClassInObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/constructorOfNestedClassInObject.kt");
        }

        @Test
        @TestMetadata("differentPackageClass.kt")
        public void testDifferentPackageClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/differentPackageClass.kt");
        }

        @Test
        @TestMetadata("differentPackageExtension.kt")
        public void testDifferentPackageExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/differentPackageExtension.kt");
        }

        @Test
        @TestMetadata("differentPackageTopLevel.kt")
        public void testDifferentPackageTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/differentPackageTopLevel.kt");
        }

        @Test
        @TestMetadata("empty.kt")
        public void testEmpty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/empty.kt");
        }

        @Test
        @TestMetadata("extensionFromTopLevel.kt")
        public void testExtensionFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/extensionFromTopLevel.kt");
        }

        @Test
        @TestMetadata("extensionInClassDisallowed.kt")
        public void testExtensionInClassDisallowed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/extensionInClassDisallowed.kt");
        }

        @Test
        @TestMetadata("extensionToSupertype.kt")
        public void testExtensionToSupertype() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/extensionToSupertype.kt");
        }

        @Test
        @TestMetadata("fakeOverrideType.kt")
        public void testFakeOverrideType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/fakeOverrideType.kt");
        }

        @Test
        @TestMetadata("genericClassFromTopLevel.kt")
        public void testGenericClassFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/genericClassFromTopLevel.kt");
        }

        @Test
        @TestMetadata("importedInnerConstructor.kt")
        public void testImportedInnerConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/importedInnerConstructor.kt");
        }

        @Test
        @TestMetadata("innerConstructorFromClass.kt")
        public void testInnerConstructorFromClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromClass.kt");
        }

        @Test
        @TestMetadata("innerConstructorFromExtension.kt")
        public void testInnerConstructorFromExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromExtension.kt");
        }

        @Test
        @TestMetadata("innerConstructorFromTopLevel.kt")
        public void testInnerConstructorFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/innerConstructorFromTopLevel.kt");
        }

        @Test
        @TestMetadata("javaStaticMethod.kt")
        public void testJavaStaticMethod() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/javaStaticMethod.kt");
        }

        @Test
        @TestMetadata("lhsNotAClass.kt")
        public void testLhsNotAClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/lhsNotAClass.kt");
        }

        @Test
        @TestMetadata("localConstructor.kt")
        public void testLocalConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localConstructor.kt");
        }

        @Test
        @TestMetadata("localConstructorFromExtensionInLocalClass.kt")
        public void testLocalConstructorFromExtensionInLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromExtensionInLocalClass.kt");
        }

        @Test
        @TestMetadata("localConstructorFromLocalExtension.kt")
        public void testLocalConstructorFromLocalExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localConstructorFromLocalExtension.kt");
        }

        @Test
        @TestMetadata("localNamedFun.kt")
        public void testLocalNamedFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localNamedFun.kt");
        }

        @Test
        @TestMetadata("localNamedFunFromExtensionInLocalClass.kt")
        public void testLocalNamedFunFromExtensionInLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromExtensionInLocalClass.kt");
        }

        @Test
        @TestMetadata("localNamedFunFromLocalClass.kt")
        public void testLocalNamedFunFromLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalClass.kt");
        }

        @Test
        @TestMetadata("localNamedFunFromLocalExtension.kt")
        public void testLocalNamedFunFromLocalExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/localNamedFunFromLocalExtension.kt");
        }

        @Test
        @TestMetadata("longQualifiedName.kt")
        public void testLongQualifiedName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/longQualifiedName.kt");
        }

        @Test
        @TestMetadata("longQualifiedNameGeneric.kt")
        public void testLongQualifiedNameGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/longQualifiedNameGeneric.kt");
        }

        @Test
        @TestMetadata("memberFromTopLevel.kt")
        public void testMemberFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/memberFromTopLevel.kt");
        }

        @Test
        @TestMetadata("nestedConstructorFromClass.kt")
        public void testNestedConstructorFromClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromClass.kt");
        }

        @Test
        @TestMetadata("nestedConstructorFromExtension.kt")
        public void testNestedConstructorFromExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromExtension.kt");
        }

        @Test
        @TestMetadata("nestedConstructorFromTopLevel.kt")
        public void testNestedConstructorFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/nestedConstructorFromTopLevel.kt");
        }

        @Test
        @TestMetadata("noAmbiguityMemberVsExtension.kt")
        public void testNoAmbiguityMemberVsExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsExtension.kt");
        }

        @Test
        @TestMetadata("noAmbiguityMemberVsTopLevel.kt")
        public void testNoAmbiguityMemberVsTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/noAmbiguityMemberVsTopLevel.kt");
        }

        @Test
        @TestMetadata("renameOnImport.kt")
        public void testRenameOnImport() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/renameOnImport.kt");
        }

        @Test
        @TestMetadata("topLevelFromClass.kt")
        public void testTopLevelFromClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/topLevelFromClass.kt");
        }

        @Test
        @TestMetadata("topLevelFromExtension.kt")
        public void testTopLevelFromExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtension.kt");
        }

        @Test
        @TestMetadata("topLevelFromExtensionInClass.kt")
        public void testTopLevelFromExtensionInClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/topLevelFromExtensionInClass.kt");
        }

        @Test
        @TestMetadata("topLevelFromTopLevel.kt")
        public void testTopLevelFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/topLevelFromTopLevel.kt");
        }

        @Test
        @TestMetadata("unresolved.kt")
        public void testUnresolved() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/function/unresolved.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/generic")
      @TestDataPath("$PROJECT_ROOT")
      public class Generic {
        @Test
        @TestMetadata("argumentAndReturnExpectedType.kt")
        public void testArgumentAndReturnExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/argumentAndReturnExpectedType.kt");
        }

        @Test
        @TestMetadata("boundViolated.kt")
        public void testBoundViolated() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/boundViolated.kt");
        }

        @Test
        @TestMetadata("dependOnArgumentType.kt")
        public void testDependOnArgumentType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/dependOnArgumentType.kt");
        }

        @Test
        @TestMetadata("expectedFunctionType.kt")
        public void testExpectedFunctionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/expectedFunctionType.kt");
        }

        @Test
        @TestMetadata("explicitTypeArguments.kt")
        public void testExplicitTypeArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/explicitTypeArguments.kt");
        }

        @Test
        @TestMetadata("genericExtensionFunction.kt")
        public void testGenericExtensionFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/genericExtensionFunction.kt");
        }

        @Test
        @TestMetadata("genericFunctionsWithNullableTypes.kt")
        public void testGenericFunctionsWithNullableTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/genericFunctionsWithNullableTypes.kt");
        }

        @Test
        @TestMetadata("incorrectNumberOfTypeArguments.kt")
        public void testIncorrectNumberOfTypeArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/incorrectNumberOfTypeArguments.kt");
        }

        @Test
        @TestMetadata("nestedCallWithOverload.kt")
        public void testNestedCallWithOverload() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/nestedCallWithOverload.kt");
        }

        @Test
        @TestMetadata("resolutionGenericCallableWithNullableTypes.kt")
        public void testResolutionGenericCallableWithNullableTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/resolutionGenericCallableWithNullableTypes.kt");
        }

        @Test
        @TestMetadata("resolutionWithGenericCallable.kt")
        public void testResolutionWithGenericCallable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/generic/resolutionWithGenericCallable.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/property")
      @TestDataPath("$PROJECT_ROOT")
      public class Property {
        @Test
        @TestMetadata("abstractPropertyViaSubclasses.kt")
        public void testAbstractPropertyViaSubclasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/abstractPropertyViaSubclasses.kt");
        }

        @Test
        @TestMetadata("accessViaSubclass.kt")
        public void testAccessViaSubclass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/accessViaSubclass.kt");
        }

        @Test
        @TestMetadata("backingField.kt")
        public void testBackingField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/backingField.kt");
        }

        @Test
        @TestMetadata("extensionFromTopLevel.kt")
        public void testExtensionFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/extensionFromTopLevel.kt");
        }

        @Test
        @TestMetadata("extensionPropertyOnNullable.kt")
        public void testExtensionPropertyOnNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/extensionPropertyOnNullable.kt");
        }

        @Test
        @TestMetadata("genericClass.kt")
        public void testGenericClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/genericClass.kt");
        }

        @Test
        @TestMetadata("javaInstanceField.kt")
        public void testJavaInstanceField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/javaInstanceField.kt");
        }

        @Test
        @TestMetadata("javaStaticFieldViaImport.kt")
        public void testJavaStaticFieldViaImport() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/javaStaticFieldViaImport.kt");
        }

        @Test
        @TestMetadata("kt7945_unrelatedClass.kt")
        public void testKt7945_unrelatedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/kt7945_unrelatedClass.kt");
        }

        @Test
        @TestMetadata("memberFromTopLevel.kt")
        public void testMemberFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/memberFromTopLevel.kt");
        }

        @Test
        @TestMetadata("samePriorityForFunctionsAndProperties.kt")
        public void testSamePriorityForFunctionsAndProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/samePriorityForFunctionsAndProperties.kt");
        }

        @Test
        @TestMetadata("topLevelFromTopLevel.kt")
        public void testTopLevelFromTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/property/topLevelFromTopLevel.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/resolve")
      @TestDataPath("$PROJECT_ROOT")
      public class Resolve {
        @Test
        @TestMetadata("adaptedReferenceAgainstReflectionType.kt")
        public void testAdaptedReferenceAgainstReflectionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/adaptedReferenceAgainstReflectionType.kt");
        }

        @Test
        @TestMetadata("ambiguityWhenNoApplicableCallableReferenceCandidate.kt")
        public void testAmbiguityWhenNoApplicableCallableReferenceCandidate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/ambiguityWhenNoApplicableCallableReferenceCandidate.kt");
        }

        @Test
        @TestMetadata("ambiguityWithBoundExtensionReceiver.kt")
        public void testAmbiguityWithBoundExtensionReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/ambiguityWithBoundExtensionReceiver.kt");
        }

        @Test
        @TestMetadata("ambiguousWithVararg.kt")
        public void testAmbiguousWithVararg() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/ambiguousWithVararg.kt");
        }

        @Test
        @TestMetadata("byGenericArgType.kt")
        public void testByGenericArgType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/byGenericArgType.kt");
        }

        @Test
        @TestMetadata("byValType.kt")
        public void testByValType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/byValType.kt");
        }

        @Test
        @TestMetadata("chooseCallableReferenceDependingOnInferredReceiver.kt")
        public void testChooseCallableReferenceDependingOnInferredReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/chooseCallableReferenceDependingOnInferredReceiver.kt");
        }

        @Test
        @TestMetadata("compatibilityWarningOnReferenceAgainstReflectiveType.kt")
        public void testCompatibilityWarningOnReferenceAgainstReflectiveType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/compatibilityWarningOnReferenceAgainstReflectiveType.kt");
        }

        @Test
        @TestMetadata("eagerAndPostponedCallableReferences.kt")
        public void testEagerAndPostponedCallableReferences() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/eagerAndPostponedCallableReferences.kt");
        }

        @Test
        @TestMetadata("intersectionTypeOverloadWithWrongParameter.kt")
        public void testIntersectionTypeOverloadWithWrongParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/intersectionTypeOverloadWithWrongParameter.kt");
        }

        @Test
        @TestMetadata("kt35887_simple.kt")
        public void testKt35887_simple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/kt35887_simple.kt");
        }

        @Test
        @TestMetadata("moreSpecificAmbiguousExtensions.kt")
        public void testMoreSpecificAmbiguousExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificAmbiguousExtensions.kt");
        }

        @Test
        @TestMetadata("moreSpecificSimple.kt")
        public void testMoreSpecificSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/moreSpecificSimple.kt");
        }

        @Test
        @TestMetadata("noFakeDescriptorForObject.kt")
        public void testNoFakeDescriptorForObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/noFakeDescriptorForObject.kt");
        }

        @Test
        @TestMetadata("overloadAmbiguityForSimpleLastExpressionOfBlock.kt")
        public void testOverloadAmbiguityForSimpleLastExpressionOfBlock() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/overloadAmbiguityForSimpleLastExpressionOfBlock.kt");
        }

        @Test
        @TestMetadata("overloads.kt")
        public void testOverloads() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/overloads.kt");
        }

        @Test
        @TestMetadata("resolveCallableReferencesAfterAllSimpleArguments.kt")
        public void testResolveCallableReferencesAfterAllSimpleArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/resolveCallableReferencesAfterAllSimpleArguments.kt");
        }

        @Test
        @TestMetadata("withAs.kt")
        public void testWithAs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/withAs.kt");
        }

        @Test
        @TestMetadata("withExtFun.kt")
        public void testWithExtFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/withExtFun.kt");
        }

        @Test
        @TestMetadata("withGenericFun.kt")
        public void testWithGenericFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/withGenericFun.kt");
        }

        @Test
        @TestMetadata("withPlaceholderTypes.kt")
        public void testWithPlaceholderTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/resolve/withPlaceholderTypes.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/callableReference/unsupported")
      @TestDataPath("$PROJECT_ROOT")
      public class Unsupported {
        @Test
        @TestMetadata("callableReferenceToLocalVariable.kt")
        public void testCallableReferenceToLocalVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/callableReferenceToLocalVariable.kt");
        }

        @Test
        @TestMetadata("classLiteralsWithEmptyLHS.kt")
        public void testClassLiteralsWithEmptyLHS() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/classLiteralsWithEmptyLHS.kt");
        }

        @Test
        @TestMetadata("localVariable.kt")
        public void testLocalVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/localVariable.kt");
        }

        @Test
        @TestMetadata("localVariableWithSubstitution.kt")
        public void testLocalVariableWithSubstitution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/localVariableWithSubstitution.kt");
        }

        @Test
        @TestMetadata("parameterWithSubstitution.kt")
        public void testParameterWithSubstitution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/parameterWithSubstitution.kt");
        }

        @Test
        @TestMetadata("syntheticProperties.kt")
        public void testSyntheticProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/callableReference/unsupported/syntheticProperties.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @Test
      @TestMetadata("AsInBinaryUnary.kt")
      public void testAsInBinaryUnary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/AsInBinaryUnary.kt");
      }

      @Test
      @TestMetadata("IsErasedAllowForTypeWithIrrelevantMixin.kt")
      public void testIsErasedAllowForTypeWithIrrelevantMixin() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedAllowForTypeWithIrrelevantMixin.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowDifferentArgInvariantPosition.kt")
      public void testIsErasedDisallowDifferentArgInvariantPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowDifferentArgInvariantPosition.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowForOverridenVariance.kt")
      public void testIsErasedDisallowForOverridenVariance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowForOverridenVariance.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowForTypeWithConstraints.kt")
      public void testIsErasedDisallowForTypeWithConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowForTypeWithConstraints.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowFromAny.kt")
      public void testIsErasedDisallowFromAny() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromAny.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowFromIn.kt")
      public void testIsErasedDisallowFromIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromIn.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowFromOut.kt")
      public void testIsErasedDisallowFromOut() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOut.kt");
      }

      @Test
      @TestMetadata("IsErasedDisallowFromOutAtClass.kt")
      public void testIsErasedDisallowFromOutAtClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDisallowFromOutAtClass.kt");
      }

      @Test
      @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt")
      public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithFirstInvalid.kt");
      }

      @Test
      @TestMetadata("IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt")
      public void testIsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedDissallowForSubtypeMappedToTwoParamsWithSecondInvalid.kt");
      }

      @Test
      @TestMetadata("IsErasedToErrorType.kt")
      public void testIsErasedToErrorType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedToErrorType.kt");
      }

      @Test
      @TestMetadata("IsErasedUpcastToNonReified.kt")
      public void testIsErasedUpcastToNonReified() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsErasedUpcastToNonReified.kt");
      }

      @Test
      @TestMetadata("IsRecursionSustainable.kt")
      public void testIsRecursionSustainable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/IsRecursionSustainable.kt");
      }

      @Test
      @TestMetadata("WhenErasedDisallowFromAny.kt")
      public void testWhenErasedDisallowFromAny() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/WhenErasedDisallowFromAny.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/bare")
      @TestDataPath("$PROJECT_ROOT")
      public class Bare {
        @Test
        @TestMetadata("AsNestedBare.kt")
        public void testAsNestedBare() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/AsNestedBare.kt");
        }

        @Test
        @TestMetadata("AsNullable.kt")
        public void testAsNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/AsNullable.kt");
        }

        @Test
        @TestMetadata("AsNullableNotEnough.kt")
        public void testAsNullableNotEnough() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/AsNullableNotEnough.kt");
        }

        @Test
        @TestMetadata("EitherAs.kt")
        public void testEitherAs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/EitherAs.kt");
        }

        @Test
        @TestMetadata("EitherSafeAs.kt")
        public void testEitherSafeAs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/EitherSafeAs.kt");
        }

        @Test
        @TestMetadata("ErrorsInSubstitution.kt")
        public void testErrorsInSubstitution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/ErrorsInSubstitution.kt");
        }

        @Test
        @TestMetadata("FromErrorType.kt")
        public void testFromErrorType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/FromErrorType.kt");
        }

        @Test
        @TestMetadata("NullableAs.kt")
        public void testNullableAs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/NullableAs.kt");
        }

        @Test
        @TestMetadata("NullableAsNotEnough.kt")
        public void testNullableAsNotEnough() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/NullableAsNotEnough.kt");
        }

        @Test
        @TestMetadata("NullableAsNullable.kt")
        public void testNullableAsNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/NullableAsNullable.kt");
        }

        @Test
        @TestMetadata("NullableAsNullableNotEnough.kt")
        public void testNullableAsNullableNotEnough() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/NullableAsNullableNotEnough.kt");
        }

        @Test
        @TestMetadata("ToErrorType.kt")
        public void testToErrorType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/ToErrorType.kt");
        }

        @Test
        @TestMetadata("UnrelatedAs.kt")
        public void testUnrelatedAs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/UnrelatedAs.kt");
        }

        @Test
        @TestMetadata("UnrelatedColon.kt")
        public void testUnrelatedColon() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/UnrelatedColon.kt");
        }

        @Test
        @TestMetadata("UnrelatedIs.kt")
        public void testUnrelatedIs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/bare/UnrelatedIs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cast/neverSucceeds")
      @TestDataPath("$PROJECT_ROOT")
      public class NeverSucceeds {
        @Test
        @TestMetadata("MappedSubtypes.kt")
        public void testMappedSubtypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/neverSucceeds/MappedSubtypes.kt");
        }

        @Test
        @TestMetadata("NoGenericsRelated.kt")
        public void testNoGenericsRelated() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cast/neverSucceeds/NoGenericsRelated.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/checkArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class CheckArguments {
      @Test
      @TestMetadata("arrayAccessSet.kt")
      public void testArrayAccessSet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/arrayAccessSet.kt");
      }

      @Test
      @TestMetadata("arrayAccessSetNotEnoughArgs.kt")
      public void testArrayAccessSetNotEnoughArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/arrayAccessSetNotEnoughArgs.kt");
      }

      @Test
      @TestMetadata("arrayAccessSetTooManyArgs.kt")
      public void testArrayAccessSetTooManyArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/arrayAccessSetTooManyArgs.kt");
      }

      @Test
      @TestMetadata("booleanExpressions.kt")
      public void testBooleanExpressions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/booleanExpressions.kt");
      }

      @Test
      @TestMetadata("kt1897_diagnostic_part.kt")
      public void testKt1897_diagnostic_part() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/kt1897_diagnostic_part.kt");
      }

      @Test
      @TestMetadata("kt1940.kt")
      public void testKt1940() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/kt1940.kt");
      }

      @Test
      @TestMetadata("overloadedFunction.kt")
      public void testOverloadedFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/overloadedFunction.kt");
      }

      @Test
      @TestMetadata("SpreadVarargs.kt")
      public void testSpreadVarargs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/SpreadVarargs.kt");
      }

      @Test
      @TestMetadata("twoLambdasFunction.kt")
      public void testTwoLambdasFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/checkArguments/twoLambdasFunction.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classLiteral")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassLiteral {
      @Test
      @TestMetadata("arrays.kt")
      public void testArrays() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/arrays.kt");
      }

      @Test
      @TestMetadata("classLiteralType.kt")
      public void testClassLiteralType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/classLiteralType.kt");
      }

      @Test
      @TestMetadata("expressionWithNullableType.kt")
      public void testExpressionWithNullableType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/expressionWithNullableType.kt");
      }

      @Test
      @TestMetadata("genericArrays.kt")
      public void testGenericArrays() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/genericArrays.kt");
      }

      @Test
      @TestMetadata("genericClasses.kt")
      public void testGenericClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/genericClasses.kt");
      }

      @Test
      @TestMetadata("inAnnotationArguments.kt")
      public void testInAnnotationArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/inAnnotationArguments.kt");
      }

      @Test
      @TestMetadata("nonClassesOnLHS.kt")
      public void testNonClassesOnLHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/nonClassesOnLHS.kt");
      }

      @Test
      @TestMetadata("parameterizedTypeAlias.kt")
      public void testParameterizedTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/parameterizedTypeAlias.kt");
      }

      @Test
      @TestMetadata("smartCast.kt")
      public void testSmartCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/smartCast.kt");
      }

      @Test
      @TestMetadata("typealiases.kt")
      public void testTypealiases() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/typealiases.kt");
      }

      @Test
      @TestMetadata("unresolvedClass.kt")
      public void testUnresolvedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classLiteral/unresolvedClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/classObjects")
    @TestDataPath("$PROJECT_ROOT")
    public class ClassObjects {
      @Test
      @TestMetadata("ClassObjectCannotAccessClassFields.kt")
      public void testClassObjectCannotAccessClassFields() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/ClassObjectCannotAccessClassFields.kt");
      }

      @Test
      @TestMetadata("classObjectHeader.kt")
      public void testClassObjectHeader() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/classObjectHeader.kt");
      }

      @Test
      @TestMetadata("classObjectInLocalClass.kt")
      public void testClassObjectInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/classObjectInLocalClass.kt");
      }

      @Test
      @TestMetadata("classObjectRedeclaration.kt")
      public void testClassObjectRedeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/classObjectRedeclaration.kt");
      }

      @Test
      @TestMetadata("ClassObjectVisibility.kt")
      public void testClassObjectVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/ClassObjectVisibility.kt");
      }

      @Test
      @TestMetadata("ClassObjects.kt")
      public void testClassObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/ClassObjects.kt");
      }

      @Test
      @TestMetadata("classWithFunctionSupertype_after.kt")
      public void testClassWithFunctionSupertype_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/classWithFunctionSupertype_after.kt");
      }

      @Test
      @TestMetadata("classWithFunctionSupertype_before.kt")
      public void testClassWithFunctionSupertype_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/classWithFunctionSupertype_before.kt");
      }

      @Test
      @TestMetadata("companionInInnerOfLocalClassAfter.kt")
      public void testCompanionInInnerOfLocalClassAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/companionInInnerOfLocalClassAfter.kt");
      }

      @Test
      @TestMetadata("companionInInnerOfObjectExpressionAfter.kt")
      public void testCompanionInInnerOfObjectExpressionAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/companionInInnerOfObjectExpressionAfter.kt");
      }

      @Test
      @TestMetadata("companionObjectOfPrivateClassVisibility.kt")
      public void testCompanionObjectOfPrivateClassVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/companionObjectOfPrivateClassVisibility.kt");
      }

      @Test
      @TestMetadata("InnerClassAccessThroughClassObject.kt")
      public void testInnerClassAccessThroughClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughClassObject.kt");
      }

      @Test
      @TestMetadata("InnerClassAccessThroughEnum_after.kt")
      public void testInnerClassAccessThroughEnum_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum_after.kt");
      }

      @Test
      @TestMetadata("InnerClassAccessThroughEnum_before.kt")
      public void testInnerClassAccessThroughEnum_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/InnerClassAccessThroughEnum_before.kt");
      }

      @Test
      @TestMetadata("InnerClassClassObject.kt")
      public void testInnerClassClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/InnerClassClassObject.kt");
      }

      @Test
      @TestMetadata("invisibleClassObjects.kt")
      public void testInvisibleClassObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/invisibleClassObjects.kt");
      }

      @Test
      @TestMetadata("multipleDissallowedDefaultObjects.kt")
      public void testMultipleDissallowedDefaultObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/multipleDissallowedDefaultObjects.kt");
      }

      @Test
      @TestMetadata("nestedClassInPrivateClassObject.kt")
      public void testNestedClassInPrivateClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/nestedClassInPrivateClassObject.kt");
      }

      @Test
      @TestMetadata("protectedFieldFromSuperCompanion_before.kt")
      public void testProtectedFieldFromSuperCompanion_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/protectedFieldFromSuperCompanion_before.kt");
      }

      @Test
      @TestMetadata("resolveFunctionInsideClassObject.kt")
      public void testResolveFunctionInsideClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/resolveFunctionInsideClassObject.kt");
      }

      @Test
      @TestMetadata("selfCallsInCompanionSuperConstructor_error.kt")
      public void testSelfCallsInCompanionSuperConstructor_error() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/selfCallsInCompanionSuperConstructor_error.kt");
      }

      @Test
      @TestMetadata("typeParametersInAnnonymousObject_after.kt")
      public void testTypeParametersInAnnonymousObject_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/typeParametersInAnnonymousObject_after.kt");
      }

      @Test
      @TestMetadata("typeParametersInObject.kt")
      public void testTypeParametersInObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/classObjects/typeParametersInObject.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/collectionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class CollectionLiterals {
      @Test
      @TestMetadata("argumentsOfAnnotation.kt")
      public void testArgumentsOfAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotation.kt");
      }

      @Test
      @TestMetadata("argumentsOfAnnotationWithKClass.kt")
      public void testArgumentsOfAnnotationWithKClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/argumentsOfAnnotationWithKClass.kt");
      }

      @Test
      @TestMetadata("arrayLiteralInNestedAnnotationCall.kt")
      public void testArrayLiteralInNestedAnnotationCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/arrayLiteralInNestedAnnotationCall.kt");
      }

      @Test
      @TestMetadata("basicCollectionLiterals.kt")
      public void testBasicCollectionLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/basicCollectionLiterals.kt");
      }

      @Test
      @TestMetadata("collectionLiteralsAsPrimitiveArrays.kt")
      public void testCollectionLiteralsAsPrimitiveArrays() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsAsPrimitiveArrays.kt");
      }

      @Test
      @TestMetadata("collectionLiteralsOutsideOfAnnotations.kt")
      public void testCollectionLiteralsOutsideOfAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsOutsideOfAnnotations.kt");
      }

      @Test
      @TestMetadata("collectionLiteralsWithVarargs.kt")
      public void testCollectionLiteralsWithVarargs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/collectionLiteralsWithVarargs.kt");
      }

      @Test
      @TestMetadata("defaultValuesInAnnotation.kt")
      public void testDefaultValuesInAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesInAnnotation.kt");
      }

      @Test
      @TestMetadata("defaultValuesWithConstantsInAnnotation.kt")
      public void testDefaultValuesWithConstantsInAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/defaultValuesWithConstantsInAnnotation.kt");
      }

      @Test
      @TestMetadata("kt34515.kt")
      public void testKt34515() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/kt34515.kt");
      }

      @Test
      @TestMetadata("noCollectionLiterals.kt")
      public void testNoCollectionLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/noCollectionLiterals.kt");
      }

      @Test
      @TestMetadata("resolveToFunctionFromBuiltIns.kt")
      public void testResolveToFunctionFromBuiltIns() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/collectionLiterals/resolveToFunctionFromBuiltIns.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstantEvaluator {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/constant")
      @TestDataPath("$PROJECT_ROOT")
      public class Constant {
        @Test
        @TestMetadata("differentTypes.kt")
        public void testDifferentTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/differentTypes.kt");
        }

        @Test
        @TestMetadata("duplicateLabelWithNonTrivialCondition_disabled.kt")
        public void testDuplicateLabelWithNonTrivialCondition_disabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/duplicateLabelWithNonTrivialCondition_disabled.kt");
        }

        @Test
        @TestMetadata("duplicateLabelWithNonTrivialCondition_enabled.kt")
        public void testDuplicateLabelWithNonTrivialCondition_enabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/duplicateLabelWithNonTrivialCondition_enabled.kt");
        }

        @Test
        @TestMetadata("floatsAndDoubles.kt")
        public void testFloatsAndDoubles() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/floatsAndDoubles.kt");
        }

        @Test
        @TestMetadata("identityCompare.kt")
        public void testIdentityCompare() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/identityCompare.kt");
        }

        @Test
        @TestMetadata("integer.kt")
        public void testInteger() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/integer.kt");
        }

        @Test
        @TestMetadata("integerOperations.kt")
        public void testIntegerOperations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/integerOperations.kt");
        }

        @Test
        @TestMetadata("integers.kt")
        public void testIntegers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/integers.kt");
        }

        @Test
        @TestMetadata("nonConstAnnotationConstructorParam.kt")
        public void testNonConstAnnotationConstructorParam() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/nonConstAnnotationConstructorParam.kt");
        }

        @Test
        @TestMetadata("nonConstValuesInConstContext.kt")
        public void testNonConstValuesInConstContext() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/nonConstValuesInConstContext.kt");
        }

        @Test
        @TestMetadata("typeAliasToUnsigned.kt")
        public void testTypeAliasToUnsigned() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/typeAliasToUnsigned.kt");
        }

        @Test
        @TestMetadata("unaryMinusIndependentExpType.kt")
        public void testUnaryMinusIndependentExpType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/unaryMinusIndependentExpType.kt");
        }

        @Test
        @TestMetadata("unresolvedReference.kt")
        public void testUnresolvedReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/unresolvedReference.kt");
        }

        @Test
        @TestMetadata("unsignedOperations.kt")
        public void testUnsignedOperations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/constant/unsignedOperations.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/constantEvaluator/isPure")
      @TestDataPath("$PROJECT_ROOT")
      public class IsPure {
        @Test
        @TestMetadata("unaryMinusIndependentExpType.kt")
        public void testUnaryMinusIndependentExpType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constantEvaluator/isPure/unaryMinusIndependentExpType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/constructorConsistency")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstructorConsistency {
      @Test
      @TestMetadata("companion.kt")
      public void testCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constructorConsistency/companion.kt");
      }

      @Test
      @TestMetadata("errorInsideDelegationCallNoPrimary.kt")
      public void testErrorInsideDelegationCallNoPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constructorConsistency/errorInsideDelegationCallNoPrimary.kt");
      }

      @Test
      @TestMetadata("twoSuperTypeCalls.kt")
      public void testTwoSuperTypeCalls() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/constructorConsistency/twoSuperTypeCalls.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/contextParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class ContextParameters {
      @Test
      @TestMetadata("contextParameterUsage.kt")
      public void testContextParameterUsage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contextParameters/contextParameterUsage.kt");
      }

      @Test
      @TestMetadata("dslMarker.kt")
      public void testDslMarker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contextParameters/dslMarker.kt");
      }

      @Test
      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contextParameters/invoke.kt");
      }

      @Test
      @TestMetadata("invokeWithReceiverAgainstContextFunctionTypeContextDisabled.kt")
      public void testInvokeWithReceiverAgainstContextFunctionTypeContextDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contextParameters/invokeWithReceiverAgainstContextFunctionTypeContextDisabled.kt");
      }

      @Test
      @TestMetadata("overloadAmbiguity.kt")
      public void testOverloadAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contextParameters/overloadAmbiguity.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Test
      @TestMetadata("suppressContractWarning.kt")
      public void testSuppressContractWarning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contracts/suppressContractWarning.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/contracts/neg")
      @TestDataPath("$PROJECT_ROOT")
      public class Neg {
        @Test
        @TestMetadata("14.kt")
        public void test14() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contracts/neg/14.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/contracts/pos")
      @TestDataPath("$PROJECT_ROOT")
      public class Pos {
        @Test
        @TestMetadata("14UserDefined.kt")
        public void test14UserDefined() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/contracts/pos/14UserDefined.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlFlowAnalysis {
      @Test
      @TestMetadata("accessToCompanionInBaseEnumInitSection_function.kt")
      public void testAccessToCompanionInBaseEnumInitSection_function() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/accessToCompanionInBaseEnumInitSection_function.kt");
      }

      @Test
      @TestMetadata("accessToCompanionInBaseEnumInitSection_property.kt")
      public void testAccessToCompanionInBaseEnumInitSection_property() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/accessToCompanionInBaseEnumInitSection_property.kt");
      }

      @Test
      @TestMetadata("accessValueParameterInDefaultValue_after.kt")
      public void testAccessValueParameterInDefaultValue_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/accessValueParameterInDefaultValue_after.kt");
      }

      @Test
      @TestMetadata("accessValueParameterInDefaultValue_before.kt")
      public void testAccessValueParameterInDefaultValue_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/accessValueParameterInDefaultValue_before.kt");
      }

      @Test
      @TestMetadata("assignedInTryWithCatch.kt")
      public void testAssignedInTryWithCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInTryWithCatch.kt");
      }

      @Test
      @TestMetadata("assignedInTryWithoutCatch.kt")
      public void testAssignedInTryWithoutCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/assignedInTryWithoutCatch.kt");
      }

      @Test
      @TestMetadata("assignmentInLocalsInConstructor.kt")
      public void testAssignmentInLocalsInConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/assignmentInLocalsInConstructor.kt");
      }

      @Test
      @TestMetadata("assignmentOfSyntheticVarWithInconsistentNullability.kt")
      public void testAssignmentOfSyntheticVarWithInconsistentNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/assignmentOfSyntheticVarWithInconsistentNullability.kt");
      }

      @Test
      @TestMetadata("backingFieldInsideGetter_after.kt")
      public void testBackingFieldInsideGetter_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/backingFieldInsideGetter_after.kt");
      }

      @Test
      @TestMetadata("breakContinueNoinline.kt")
      public void testBreakContinueNoinline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueNoinline.kt");
      }

      @Test
      @TestMetadata("breakContinueWithElvisInLambda.kt")
      public void testBreakContinueWithElvisInLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/breakContinueWithElvisInLambda.kt");
      }

      @Test
      @TestMetadata("breakInLambdaPassedToDirectInvoke.kt")
      public void testBreakInLambdaPassedToDirectInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/breakInLambdaPassedToDirectInvoke.kt");
      }

      @Test
      @TestMetadata("breakInsideLocal.kt")
      public void testBreakInsideLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/breakInsideLocal.kt");
      }

      @Test
      @TestMetadata("breakOrContinueInLoopCondition.kt")
      public void testBreakOrContinueInLoopCondition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/breakOrContinueInLoopCondition.kt");
      }

      @Test
      @TestMetadata("capturingUninitializedVariableInNonInPlaceLambda.kt")
      public void testCapturingUninitializedVariableInNonInPlaceLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/capturingUninitializedVariableInNonInPlaceLambda.kt");
      }

      @Test
      @TestMetadata("cfgOfFullyIncorrectCode.kt")
      public void testCfgOfFullyIncorrectCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/cfgOfFullyIncorrectCode.kt");
      }

      @Test
      @TestMetadata("checkPropertyAccessor.kt")
      public void testCheckPropertyAccessor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/checkPropertyAccessor.kt");
      }

      @Test
      @TestMetadata("constructorPropertyInterdependence.kt")
      public void testConstructorPropertyInterdependence() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/constructorPropertyInterdependence.kt");
      }

      @Test
      @TestMetadata("definiteReturnInWhen.kt")
      public void testDefiniteReturnInWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturnInWhen.kt");
      }

      @Test
      @TestMetadata("delegatedMemberProperyWriteInInit.kt")
      public void testDelegatedMemberProperyWriteInInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedMemberProperyWriteInInit.kt");
      }

      @Test
      @TestMetadata("delegatedPropertyEarlyAccess.kt")
      public void testDelegatedPropertyEarlyAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/delegatedPropertyEarlyAccess.kt");
      }

      @Test
      @TestMetadata("doWhileAssignment.kt")
      public void testDoWhileAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileAssignment.kt");
      }

      @Test
      @TestMetadata("doWhileNotDefined.kt")
      public void testDoWhileNotDefined() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/doWhileNotDefined.kt");
      }

      @Test
      @TestMetadata("elvisNotProcessed.kt")
      public void testElvisNotProcessed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/elvisNotProcessed.kt");
      }

      @Test
      @TestMetadata("enumCompanionInterdependence.kt")
      public void testEnumCompanionInterdependence() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/enumCompanionInterdependence.kt");
      }

      @Test
      @TestMetadata("enumEntryAccessInCapturedBlock.kt")
      public void testEnumEntryAccessInCapturedBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/enumEntryAccessInCapturedBlock.kt");
      }

      @Test
      @TestMetadata("enumEntryAccessInCapturedBlockWithProperAnalysis.kt")
      public void testEnumEntryAccessInCapturedBlockWithProperAnalysis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/enumEntryAccessInCapturedBlockWithProperAnalysis.kt");
      }

      @Test
      @TestMetadata("enumEntryAssignment.kt")
      public void testEnumEntryAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/enumEntryAssignment.kt");
      }

      @Test
      @TestMetadata("enumInterdependence.kt")
      public void testEnumInterdependence() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/enumInterdependence.kt");
      }

      @Test
      @TestMetadata("fieldAsClassDelegate.kt")
      public void testFieldAsClassDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/fieldAsClassDelegate.kt");
      }

      @Test
      @TestMetadata("fieldInitialization.kt")
      public void testFieldInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/fieldInitialization.kt");
      }

      @Test
      @TestMetadata("initializationInLambda.kt")
      public void testInitializationInLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLambda.kt");
      }

      @Test
      @TestMetadata("initializationInLocalClass.kt")
      public void testInitializationInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalClass.kt");
      }

      @Test
      @TestMetadata("initializationInLocalFun.kt")
      public void testInitializationInLocalFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalFun.kt");
      }

      @Test
      @TestMetadata("initializationInLocalViaExplicitThis_after.kt")
      public void testInitializationInLocalViaExplicitThis_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalViaExplicitThis_after.kt");
      }

      @Test
      @TestMetadata("initializationInLocalViaExplicitThis_before.kt")
      public void testInitializationInLocalViaExplicitThis_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/initializationInLocalViaExplicitThis_before.kt");
      }

      @Test
      @TestMetadata("inlinedBreakContinueFeatureDisabled.kt")
      public void testInlinedBreakContinueFeatureDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/inlinedBreakContinueFeatureDisabled.kt");
      }

      @Test
      @TestMetadata("kt10823.kt")
      public void testKt10823() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt10823.kt");
      }

      @Test
      @TestMetadata("kt1185enums.kt")
      public void testKt1185enums() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1185enums.kt");
      }

      @Test
      @TestMetadata("kt1571.kt")
      public void testKt1571() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt1571.kt");
      }

      @Test
      @TestMetadata("kt2330.kt")
      public void testKt2330() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2330.kt");
      }

      @Test
      @TestMetadata("kt2334.kt")
      public void testKt2334() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2334.kt");
      }

      @Test
      @TestMetadata("kt2369.kt")
      public void testKt2369() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2369.kt");
      }

      @Test
      @TestMetadata("kt2845.kt")
      public void testKt2845() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2845.kt");
      }

      @Test
      @TestMetadata("kt2960.kt")
      public void testKt2960() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt2960.kt");
      }

      @Test
      @TestMetadata("kt3444.kt")
      public void testKt3444() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt3444.kt");
      }

      @Test
      @TestMetadata("kt4405.kt")
      public void testKt4405() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt4405.kt");
      }

      @Test
      @TestMetadata("kt607.kt")
      public void testKt607() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt607.kt");
      }

      @Test
      @TestMetadata("kt6788.kt")
      public void testKt6788() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt6788.kt");
      }

      @Test
      @TestMetadata("kt843.kt")
      public void testKt843() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt843.kt");
      }

      @Test
      @TestMetadata("kt897.kt")
      public void testKt897() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/kt897.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureInConstructor.kt")
      public void testLambdaCaptureInConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureInConstructor.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureInExtensionReceiver.kt")
      public void testLambdaCaptureInExtensionReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureInExtensionReceiver.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureInJavaFunction.kt")
      public void testLambdaCaptureInJavaFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureInJavaFunction.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureInitializedPropertyInOtherArgument.kt")
      public void testLambdaCaptureInitializedPropertyInOtherArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureInitializedPropertyInOtherArgument.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureUninitializedInOtherArgument.kt")
      public void testLambdaCaptureUninitializedInOtherArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureUninitializedInOtherArgument.kt");
      }

      @Test
      @TestMetadata("lambdaCaptureUninitializedProperty.kt")
      public void testLambdaCaptureUninitializedProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/lambdaCaptureUninitializedProperty.kt");
      }

      @Test
      @TestMetadata("localClasses.kt")
      public void testLocalClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/localClasses.kt");
      }

      @Test
      @TestMetadata("privateSetter.kt")
      public void testPrivateSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/privateSetter.kt");
      }

      @Test
      @TestMetadata("propertiesInitWithOtherInstance.kt")
      public void testPropertiesInitWithOtherInstance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstance.kt");
      }

      @Test
      @TestMetadata("propertiesInitWithOtherInstanceInner.kt")
      public void testPropertiesInitWithOtherInstanceInner() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceInner.kt");
      }

      @Test
      @TestMetadata("propertiesInitWithOtherInstanceThisLabel.kt")
      public void testPropertiesInitWithOtherInstanceThisLabel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesInitWithOtherInstanceThisLabel.kt");
      }

      @Test
      @TestMetadata("propertiesOrderInPackage.kt")
      public void testPropertiesOrderInPackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/propertiesOrderInPackage.kt");
      }

      @Test
      @TestMetadata("reassignmentInCatch.kt")
      public void testReassignmentInCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInCatch.kt");
      }

      @Test
      @TestMetadata("reassignmentInConcurrentLambdas.kt")
      public void testReassignmentInConcurrentLambdas() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInConcurrentLambdas.kt");
      }

      @Test
      @TestMetadata("reassignmentInTryCatch.kt")
      public void testReassignmentInTryCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatch.kt");
      }

      @Test
      @TestMetadata("reassignmentInTryCatchWithJumps.kt")
      public void testReassignmentInTryCatchWithJumps() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/reassignmentInTryCatchWithJumps.kt");
      }

      @Test
      @TestMetadata("referenceToPropertyInitializer.kt")
      public void testReferenceToPropertyInitializer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/referenceToPropertyInitializer.kt");
      }

      @Test
      @TestMetadata("repeatUnitializedErrorOnlyForLocalVars.kt")
      public void testRepeatUnitializedErrorOnlyForLocalVars() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/repeatUnitializedErrorOnlyForLocalVars.kt");
      }

      @Test
      @TestMetadata("smartCastInCatch.kt")
      public void testSmartCastInCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/smartCastInCatch.kt");
      }

      @Test
      @TestMetadata("smartcastOnThisInInitializationSection.kt")
      public void testSmartcastOnThisInInitializationSection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/smartcastOnThisInInitializationSection.kt");
      }

      @Test
      @TestMetadata("tryCatchFinallyIfs.kt")
      public void testTryCatchFinallyIfs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/tryCatchFinallyIfs.kt");
      }

      @Test
      @TestMetadata("uninintializedProperyWithDirectAndDelayedInitialization.kt")
      public void testUninintializedProperyWithDirectAndDelayedInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/uninintializedProperyWithDirectAndDelayedInitialization.kt");
      }

      @Test
      @TestMetadata("uninitializedCompanionOfEnum_after.kt")
      public void testUninitializedCompanionOfEnum_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedCompanionOfEnum_after.kt");
      }

      @Test
      @TestMetadata("uninitializedCompanionOfEnum_before.kt")
      public void testUninitializedCompanionOfEnum_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedCompanionOfEnum_before.kt");
      }

      @Test
      @TestMetadata("UninitializedEnumCompanionVals.kt")
      public void testUninitializedEnumCompanionVals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedEnumCompanionVals.kt");
      }

      @Test
      @TestMetadata("uninitializedInLocalDeclarations.kt")
      public void testUninitializedInLocalDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedInLocalDeclarations.kt");
      }

      @Test
      @TestMetadata("UninitializedOrReassignedVariables.kt")
      public void testUninitializedOrReassignedVariables() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/UninitializedOrReassignedVariables.kt");
      }

      @Test
      @TestMetadata("uninitializedQualifiedEnumEntry.kt")
      public void testUninitializedQualifiedEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/uninitializedQualifiedEnumEntry.kt");
      }

      @Test
      @TestMetadata("unmappedArgs.kt")
      public void testUnmappedArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/unmappedArgs.kt");
      }

      @Test
      @TestMetadata("unresolvedReference.kt")
      public void testUnresolvedReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/unresolvedReference.kt");
      }

      @Test
      @TestMetadata("useUninitializedInLambda.kt")
      public void testUseUninitializedInLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/useUninitializedInLambda.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode")
      @TestDataPath("$PROJECT_ROOT")
      public class DeadCode {
        @Test
        @TestMetadata("deadCodeDifferentExamples.kt")
        public void testDeadCodeDifferentExamples() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeDifferentExamples.kt");
        }

        @Test
        @TestMetadata("deadCodeInUnaryExpr.kt")
        public void testDeadCodeInUnaryExpr() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/deadCodeInUnaryExpr.kt");
        }

        @Test
        @TestMetadata("initializationInUnreachableCode.kt")
        public void testInitializationInUnreachableCode() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/initializationInUnreachableCode.kt");
        }

        @Test
        @TestMetadata("reassignementInUnreachableCode.kt")
        public void testReassignementInUnreachableCode() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/deadCode/reassignementInUnreachableCode.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn")
      @TestDataPath("$PROJECT_ROOT")
      public class DefiniteReturn {
        @Test
        @TestMetadata("kt3444_ReturnFromLocalFunctions.kt")
        public void testKt3444_ReturnFromLocalFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/kt3444_ReturnFromLocalFunctions.kt");
        }

        @Test
        @TestMetadata("ReturnFromFunctionInObject.kt")
        public void testReturnFromFunctionInObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/ReturnFromFunctionInObject.kt");
        }

        @Test
        @TestMetadata("simpleClass.kt")
        public void testSimpleClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/simpleClass.kt");
        }

        @Test
        @TestMetadata("singleReturnFromTry.kt")
        public void testSingleReturnFromTry() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/definiteReturn/singleReturnFromTry.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit")
      @TestDataPath("$PROJECT_ROOT")
      public class UnnecessaryLateinit {
        @Test
        @TestMetadata("lateinitWithErroneousDelegation.kt")
        public void testLateinitWithErroneousDelegation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/lateinitWithErroneousDelegation.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorDelegateItself.kt")
        public void testSecondaryConstructorDelegateItself() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateItself.kt");
        }

        @Test
        @TestMetadata("secondaryConstructorDelegateLoop.kt")
        public void testSecondaryConstructorDelegateLoop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlFlowAnalysis/unnecessaryLateinit/secondaryConstructorDelegateLoop.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/controlStructures")
    @TestDataPath("$PROJECT_ROOT")
    public class ControlStructures {
      @Test
      @TestMetadata("breakContinueInCrossInlineLambda.kt")
      public void testBreakContinueInCrossInlineLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/breakContinueInCrossInlineLambda.kt");
      }

      @Test
      @TestMetadata("breakContinueInNoInlineLambda.kt")
      public void testBreakContinueInNoInlineLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/breakContinueInNoInlineLambda.kt");
      }

      @Test
      @TestMetadata("catchGenerics.kt")
      public void testCatchGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchGenerics.kt");
      }

      @Test
      @TestMetadata("catchInnerClassesOfGenerics.kt")
      public void testCatchInnerClassesOfGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics.kt");
      }

      @Test
      @TestMetadata("catchInnerClassesOfGenerics_deprecation.kt")
      public void testCatchInnerClassesOfGenerics_deprecation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchInnerClassesOfGenerics_deprecation.kt");
      }

      @Test
      @TestMetadata("catchOfTypeNothing.kt")
      public void testCatchOfTypeNothing() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchOfTypeNothing.kt");
      }

      @Test
      @TestMetadata("catchWithDefault.kt")
      public void testCatchWithDefault() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchWithDefault.kt");
      }

      @Test
      @TestMetadata("catchingLocalClassesCapturingTypeParameters.kt")
      public void testCatchingLocalClassesCapturingTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/catchingLocalClassesCapturingTypeParameters.kt");
      }

      @Test
      @TestMetadata("continueAndBreakLabelWithSameFunctionName.kt")
      public void testContinueAndBreakLabelWithSameFunctionName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/continueAndBreakLabelWithSameFunctionName.kt");
      }

      @Test
      @TestMetadata("continueInInitBlock.kt")
      public void testContinueInInitBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/continueInInitBlock.kt");
      }

      @Test
      @TestMetadata("emptyIf.kt")
      public void testEmptyIf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/emptyIf.kt");
      }

      @Test
      @TestMetadata("ForLoopWithExtensionIteratorOnNullable.kt")
      public void testForLoopWithExtensionIteratorOnNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ForLoopWithExtensionIteratorOnNullable.kt");
      }

      @Test
      @TestMetadata("forLoopWithNullableRange.kt")
      public void testForLoopWithNullableRange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/forLoopWithNullableRange.kt");
      }

      @Test
      @TestMetadata("forWithIncorrectTypeSpecializer.kt")
      public void testForWithIncorrectTypeSpecializer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/forWithIncorrectTypeSpecializer.kt");
      }

      @Test
      @TestMetadata("forWithNullableIterator.kt")
      public void testForWithNullableIterator() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/forWithNullableIterator.kt");
      }

      @Test
      @TestMetadata("ForbidStatementAsDirectFunctionBody.kt")
      public void testForbidStatementAsDirectFunctionBody() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ForbidStatementAsDirectFunctionBody.kt");
      }

      @Test
      @TestMetadata("ifElseIntersection.kt")
      public void testIfElseIntersection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ifElseIntersection.kt");
      }

      @Test
      @TestMetadata("ifToAnyDiscriminatingUsages.kt")
      public void testIfToAnyDiscriminatingUsages() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ifToAnyDiscriminatingUsages.kt");
      }

      @Test
      @TestMetadata("ifWhenToAnyComplexExpressions.kt")
      public void testIfWhenToAnyComplexExpressions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ifWhenToAnyComplexExpressions.kt");
      }

      @Test
      @TestMetadata("ifWhenWithoutElse.kt")
      public void testIfWhenWithoutElse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/ifWhenWithoutElse.kt");
      }

      @Test
      @TestMetadata("improperElseInExpression.kt")
      public void testImproperElseInExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/improperElseInExpression.kt");
      }

      @Test
      @TestMetadata("incorrectElvis.kt")
      public void testIncorrectElvis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/incorrectElvis.kt");
      }

      @Test
      @TestMetadata("jumpAcrossFunctionBoundary.kt")
      public void testJumpAcrossFunctionBoundary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/jumpAcrossFunctionBoundary.kt");
      }

      @Test
      @TestMetadata("kt10717.kt")
      public void testKt10717() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt10717.kt");
      }

      @Test
      @TestMetadata("kt1075.kt")
      public void testKt1075() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt1075.kt");
      }

      @Test
      @TestMetadata("kt30406.kt")
      public void testKt30406() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt30406.kt");
      }

      @Test
      @TestMetadata("kt4310.kt")
      public void testKt4310() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt4310.kt");
      }

      @Test
      @TestMetadata("kt657.kt")
      public void testKt657() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt657.kt");
      }

      @Test
      @TestMetadata("kt770.kt351.kt735_StatementType.kt")
      public void testKt770_kt351_kt735_StatementType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt770.kt351.kt735_StatementType.kt");
      }

      @Test
      @TestMetadata("kt786.kt")
      public void testKt786() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt786.kt");
      }

      @Test
      @TestMetadata("kt799.kt")
      public void testKt799() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/kt799.kt");
      }

      @Test
      @TestMetadata("localReturnInsidePropertyAccessor.kt")
      public void testLocalReturnInsidePropertyAccessor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/localReturnInsidePropertyAccessor.kt");
      }

      @Test
      @TestMetadata("nestedLoopsWithMultipleLabels.kt")
      public void testNestedLoopsWithMultipleLabels() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/nestedLoopsWithMultipleLabels.kt");
      }

      @Test
      @TestMetadata("noTypeMismatchWithWhenWithoutElse.kt")
      public void testNoTypeMismatchWithWhenWithoutElse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/noTypeMismatchWithWhenWithoutElse.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveIfInElvis_after.kt")
      public void testNonExhaustiveIfInElvis_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/nonExhaustiveIfInElvis_after.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveIfInElvis_before.kt")
      public void testNonExhaustiveIfInElvis_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/nonExhaustiveIfInElvis_before.kt");
      }

      @Test
      @TestMetadata("notAFunctionLabel_after.kt")
      public void testNotAFunctionLabel_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/notAFunctionLabel_after.kt");
      }

      @Test
      @TestMetadata("specialConstructsAndPlatformTypes.kt")
      public void testSpecialConstructsAndPlatformTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/specialConstructsAndPlatformTypes.kt");
      }

      @Test
      @TestMetadata("tryReturnType.kt")
      public void testTryReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/tryReturnType.kt");
      }

      @Test
      @TestMetadata("typeInferenceForExclExcl.kt")
      public void testTypeInferenceForExclExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/typeInferenceForExclExcl.kt");
      }

      @Test
      @TestMetadata("valVarCatchParameter.kt")
      public void testValVarCatchParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/valVarCatchParameter.kt");
      }

      @Test
      @TestMetadata("valVarLoopParameter.kt")
      public void testValVarLoopParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/valVarLoopParameter.kt");
      }

      @Test
      @TestMetadata("whenToAnyDiscriminatingUsages.kt")
      public void testWhenToAnyDiscriminatingUsages() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/whenToAnyDiscriminatingUsages.kt");
      }

      @Test
      @TestMetadata("whenWithNoSubjectAndCommas.kt")
      public void testWhenWithNoSubjectAndCommas() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/whenWithNoSubjectAndCommas.kt");
      }

      @Test
      @TestMetadata("when.kt234.kt973.kt")
      public void testWhen_kt234_kt973() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/controlStructures/when.kt234.kt973.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @Test
      @TestMetadata("modifierFormBuiltinSuspendFun.kt")
      public void testModifierFormBuiltinSuspendFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/modifierFormBuiltinSuspendFun.kt");
      }

      @Test
      @TestMetadata("suspendCallInInit.kt")
      public void testSuspendCallInInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendCallInInit.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/coroutines/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @Test
        @TestMetadata("invokeOutideSuspend.kt")
        public void testInvokeOutideSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/callableReference/invokeOutideSuspend.kt");
        }

        @Test
        @TestMetadata("outsideSuspend.kt")
        public void testOutsideSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/callableReference/outsideSuspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionAsSupertype {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN")
        @TestDataPath("$PROJECT_ROOT")
        public class KSuspendFunctionN {
          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }

          @Test
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/kSuspendFunctionN/simple.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple")
        @TestDataPath("$PROJECT_ROOT")
        public class Simple {
          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/simple/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN")
        @TestDataPath("$PROJECT_ROOT")
        public class SuspendFunctionN {
          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypes.kt")
          public void testMixingSuspendAndNonSuspendSupertypes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypes.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperClass() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperClass.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperFunInterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperFunInterface.kt");
          }

          @Test
          @TestMetadata("mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt")
          public void testMixingSuspendAndNonSuspendSupertypesThruSuperinterface() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/coroutines/suspendFunctionAsSupertype/suspendFunctionN/mixingSuspendAndNonSuspendSupertypesThruSuperinterface.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy")
    @TestDataPath("$PROJECT_ROOT")
    public class CyclicHierarchy {
      @Test
      @TestMetadata("classIndirectlyInheritsNested.kt")
      public void testClassIndirectlyInheritsNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/classIndirectlyInheritsNested.kt");
      }

      @Test
      @TestMetadata("classInheritsNested.kt")
      public void testClassInheritsNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/classInheritsNested.kt");
      }

      @Test
      @TestMetadata("commonSupertypeForCyclicAndUsualTypes.kt")
      public void testCommonSupertypeForCyclicAndUsualTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicAndUsualTypes.kt");
      }

      @Test
      @TestMetadata("commonSupertypeForCyclicTypes.kt")
      public void testCommonSupertypeForCyclicTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/commonSupertypeForCyclicTypes.kt");
      }

      @Test
      @TestMetadata("cyclicHierarchy.kt")
      public void testCyclicHierarchy() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/cyclicHierarchy.kt");
      }

      @Test
      @TestMetadata("javaKotlinJavaCycle.kt")
      public void testJavaKotlinJavaCycle() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/javaKotlinJavaCycle.kt");
      }

      @Test
      @TestMetadata("kotlinJavaCycle.kt")
      public void testKotlinJavaCycle() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaCycle.kt");
      }

      @Test
      @TestMetadata("kotlinJavaKotlinCycle.kt")
      public void testKotlinJavaKotlinCycle() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaKotlinCycle.kt");
      }

      @Test
      @TestMetadata("kotlinJavaNestedCycle.kt")
      public void testKotlinJavaNestedCycle() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/kotlinJavaNestedCycle.kt");
      }

      @Test
      @TestMetadata("kt303.kt")
      public void testKt303() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/kt303.kt");
      }

      @Test
      @TestMetadata("objectInheritsNested.kt")
      public void testObjectInheritsNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/objectInheritsNested.kt");
      }

      @Test
      @TestMetadata("twoClassesWithNestedCycle.kt")
      public void testTwoClassesWithNestedCycle() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/twoClassesWithNestedCycle.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion")
      @TestDataPath("$PROJECT_ROOT")
      public class WithCompanion {
        @Test
        @TestMetadata("noMembers_after.kt")
        public void testNoMembers_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/noMembers_after.kt");
        }

        @Test
        @TestMetadata("noMembers_before.kt")
        public void testNoMembers_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/cyclicHierarchy/withCompanion/noMembers_before.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClassNonPublicConstructor")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClassNonPublicConstructor {
      @Test
      @TestMetadata("deprecationPhase1_incompatibleAnnotations.kt")
      public void testDeprecationPhase1_incompatibleAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_incompatibleAnnotations.kt");
      }

      @Test
      @TestMetadata("deprecationPhase1_inlineFun.kt")
      public void testDeprecationPhase1_inlineFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_inlineFun.kt");
      }

      @Test
      @TestMetadata("deprecationPhase1_optIn.kt")
      public void testDeprecationPhase1_optIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_optIn.kt");
      }

      @Test
      @TestMetadata("deprecationPhase1_wrongAnnotationTarget.kt")
      public void testDeprecationPhase1_wrongAnnotationTarget() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase1_wrongAnnotationTarget.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_customCopy.kt")
      public void testDeprecationPhase2_customCopy() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_customCopy.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_inlineFun.kt")
      public void testDeprecationPhase2_inlineFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_inlineFun.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_internalConstructor.kt")
      public void testDeprecationPhase2_internalConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_internalConstructor.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_optIn.kt")
      public void testDeprecationPhase2_optIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_optIn.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_optOut.kt")
      public void testDeprecationPhase2_optOut() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_optOut.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_privateConstructor.kt")
      public void testDeprecationPhase2_privateConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_privateConstructor.kt");
      }

      @Test
      @TestMetadata("deprecationPhase2_protectedConstructor.kt")
      public void testDeprecationPhase2_protectedConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase2_protectedConstructor.kt");
      }

      @Test
      @TestMetadata("deprecationPhase3_inlineFun.kt")
      public void testDeprecationPhase3_inlineFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase3_inlineFun.kt");
      }

      @Test
      @TestMetadata("deprecationPhase3_invisibleReference.kt")
      public void testDeprecationPhase3_invisibleReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase3_invisibleReference.kt");
      }

      @Test
      @TestMetadata("deprecationPhase3_optIn.kt")
      public void testDeprecationPhase3_optIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase3_optIn.kt");
      }

      @Test
      @TestMetadata("deprecationPhase3_optOut.kt")
      public void testDeprecationPhase3_optOut() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClassNonPublicConstructor/deprecationPhase3_optOut.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class DataClasses {
      @Test
      @TestMetadata("companionDataObject.kt")
      public void testCompanionDataObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/companionDataObject.kt");
      }

      @Test
      @TestMetadata("conflictingCopyOverloads.kt")
      public void testConflictingCopyOverloads() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/conflictingCopyOverloads.kt");
      }

      @Test
      @TestMetadata("conflictingOverloads.kt")
      public void testConflictingOverloads() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/conflictingOverloads.kt");
      }

      @Test
      @TestMetadata("copyInDataObject.kt")
      public void testCopyInDataObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/copyInDataObject.kt");
      }

      @Test
      @TestMetadata("dataClassExplicitlyOverridingCopyNoDefaults.kt")
      public void testDataClassExplicitlyOverridingCopyNoDefaults() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyNoDefaults.kt");
      }

      @Test
      @TestMetadata("dataClassExplicitlyOverridingCopyWithDefaults.kt")
      public void testDataClassExplicitlyOverridingCopyWithDefaults() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassExplicitlyOverridingCopyWithDefaults.kt");
      }

      @Test
      @TestMetadata("dataClassNoName.kt")
      public void testDataClassNoName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassNoName.kt");
      }

      @Test
      @TestMetadata("dataClassOverridingCopy_lv12.kt")
      public void testDataClassOverridingCopy_lv12() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv12.kt");
      }

      @Test
      @TestMetadata("dataClassOverridingCopy_lv13.kt")
      public void testDataClassOverridingCopy_lv13() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassOverridingCopy_lv13.kt");
      }

      @Test
      @TestMetadata("dataClassVarargParam.kt")
      public void testDataClassVarargParam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataClassVarargParam.kt");
      }

      @Test
      @TestMetadata("dataInheritance.kt")
      public void testDataInheritance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataInheritance.kt");
      }

      @Test
      @TestMetadata("dataObjectDisabled.kt")
      public void testDataObjectDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataObjectDisabled.kt");
      }

      @Test
      @TestMetadata("dataObjectLiteral.kt")
      public void testDataObjectLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/dataObjectLiteral.kt");
      }

      @Test
      @TestMetadata("emptyConstructor.kt")
      public void testEmptyConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/emptyConstructor.kt");
      }

      @Test
      @TestMetadata("errorTypesInDataClasses.kt")
      public void testErrorTypesInDataClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/errorTypesInDataClasses.kt");
      }

      @Test
      @TestMetadata("extensionComponentsOnNullable.kt")
      public void testExtensionComponentsOnNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/extensionComponentsOnNullable.kt");
      }

      @Test
      @TestMetadata("implementMethodsFromInterface.kt")
      public void testImplementMethodsFromInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/implementMethodsFromInterface.kt");
      }

      @Test
      @TestMetadata("implementTraitWhichHasFinalComponent1.kt")
      public void testImplementTraitWhichHasFinalComponent1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/implementTraitWhichHasFinalComponent1.kt");
      }

      @Test
      @TestMetadata("innerDataClass.kt")
      public void testInnerDataClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/innerDataClass.kt");
      }

      @Test
      @TestMetadata("innerOuterDataClass.kt")
      public void testInnerOuterDataClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/innerOuterDataClass.kt");
      }

      @Test
      @TestMetadata("multiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/multiDeclaration.kt");
      }

      @Test
      @TestMetadata("multiDeclarationFor.kt")
      public void testMultiDeclarationFor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/multiDeclarationFor.kt");
      }

      @Test
      @TestMetadata("noConstructor.kt")
      public void testNoConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/noConstructor.kt");
      }

      @Test
      @TestMetadata("notADataClass.kt")
      public void testNotADataClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/notADataClass.kt");
      }

      @Test
      @TestMetadata("oneValParam.kt")
      public void testOneValParam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/oneValParam.kt");
      }

      @Test
      @TestMetadata("repeatedProperties.kt")
      public void testRepeatedProperties() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/repeatedProperties.kt");
      }

      @Test
      @TestMetadata("sealedDataClass.kt")
      public void testSealedDataClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/sealedDataClass.kt");
      }

      @Test
      @TestMetadata("strange.kt")
      public void testStrange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/strange.kt");
      }

      @Test
      @TestMetadata("twoValParams.kt")
      public void testTwoValParams() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/twoValParams.kt");
      }

      @Test
      @TestMetadata("twoVarParams.kt")
      public void testTwoVarParams() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataClasses/twoVarParams.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlow")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlow {
      @Test
      @TestMetadata("desugaredAssignment.kt")
      public void testDesugaredAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/desugaredAssignment.kt");
      }

      @Test
      @TestMetadata("EmptyIf.kt")
      public void testEmptyIf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/EmptyIf.kt");
      }

      @Test
      @TestMetadata("IsExpression.kt")
      public void testIsExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/IsExpression.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/dataFlow/assignment")
      @TestDataPath("$PROJECT_ROOT")
      public class Assignment {
        @Test
        @TestMetadata("assignToNewVal.kt")
        public void testAssignToNewVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/assignment/assignToNewVal.kt");
        }

        @Test
        @TestMetadata("uninitializedValIsCheck.kt")
        public void testUninitializedValIsCheck() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValIsCheck.kt");
        }

        @Test
        @TestMetadata("uninitializedValNullability.kt")
        public void testUninitializedValNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlow/assignment/uninitializedValNullability.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataFlowInfoTraversal")
    @TestDataPath("$PROJECT_ROOT")
    public class DataFlowInfoTraversal {
      @Test
      @TestMetadata("AndOr.kt")
      public void testAndOr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AndOr.kt");
      }

      @Test
      @TestMetadata("ArrayAccess.kt")
      public void testArrayAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayAccess.kt");
      }

      @Test
      @TestMetadata("ArrayExpression.kt")
      public void testArrayExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayExpression.kt");
      }

      @Test
      @TestMetadata("ArrayGetSetConvention.kt")
      public void testArrayGetSetConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayGetSetConvention.kt");
      }

      @Test
      @TestMetadata("ArrayIndices.kt")
      public void testArrayIndices() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ArrayIndices.kt");
      }

      @Test
      @TestMetadata("AssignmentOperation.kt")
      public void testAssignmentOperation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentOperation.kt");
      }

      @Test
      @TestMetadata("AssignmentToArrayElement.kt")
      public void testAssignmentToArrayElement() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/AssignmentToArrayElement.kt");
      }

      @Test
      @TestMetadata("BinaryExpression.kt")
      public void testBinaryExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpression.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionBooleanOperations.kt")
      public void testBinaryExpressionBooleanOperations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionBooleanOperations.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionCompareToConvention.kt")
      public void testBinaryExpressionCompareToConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionCompareToConvention.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionContainsConvention.kt")
      public void testBinaryExpressionContainsConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionContainsConvention.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionElvis.kt")
      public void testBinaryExpressionElvis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionElvis.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionEqualsConvention.kt")
      public void testBinaryExpressionEqualsConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionEqualsConvention.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionIdentifier.kt")
      public void testBinaryExpressionIdentifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionIdentifier.kt");
      }

      @Test
      @TestMetadata("BinaryExpressionPlusConvention.kt")
      public void testBinaryExpressionPlusConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/BinaryExpressionPlusConvention.kt");
      }

      @Test
      @TestMetadata("Condition.kt")
      public void testCondition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Condition.kt");
      }

      @Test
      @TestMetadata("ContinueOuterLoop.kt")
      public void testContinueOuterLoop() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ContinueOuterLoop.kt");
      }

      @Test
      @TestMetadata("DeepIf.kt")
      public void testDeepIf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DeepIf.kt");
      }

      @Test
      @TestMetadata("DoWhile.kt")
      public void testDoWhile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhile.kt");
      }

      @Test
      @TestMetadata("DoWhileCondition.kt")
      public void testDoWhileCondition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/DoWhileCondition.kt");
      }

      @Test
      @TestMetadata("Elvis.kt")
      public void testElvis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Elvis.kt");
      }

      @Test
      @TestMetadata("ExclExcl.kt")
      public void testExclExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ExclExcl.kt");
      }

      @Test
      @TestMetadata("For.kt")
      public void testFor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/For.kt");
      }

      @Test
      @TestMetadata("ForLoopRange.kt")
      public void testForLoopRange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ForLoopRange.kt");
      }

      @Test
      @TestMetadata("FunctionLiteral.kt")
      public void testFunctionLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/FunctionLiteral.kt");
      }

      @Test
      @TestMetadata("IfStatement.kt")
      public void testIfStatement() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfStatement.kt");
      }

      @Test
      @TestMetadata("IfThenElse.kt")
      public void testIfThenElse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElse.kt");
      }

      @Test
      @TestMetadata("IfThenElseBothInvalid.kt")
      public void testIfThenElseBothInvalid() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IfThenElseBothInvalid.kt");
      }

      @Test
      @TestMetadata("IsExpression.kt")
      public void testIsExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/IsExpression.kt");
      }

      @Test
      @TestMetadata("ManyIfs.kt")
      public void testManyIfs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ManyIfs.kt");
      }

      @Test
      @TestMetadata("MultiDeclaration.kt")
      public void testMultiDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/MultiDeclaration.kt");
      }

      @Test
      @TestMetadata("ObjectExpression.kt")
      public void testObjectExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ObjectExpression.kt");
      }

      @Test
      @TestMetadata("QualifiedExpression.kt")
      public void testQualifiedExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/QualifiedExpression.kt");
      }

      @Test
      @TestMetadata("Return.kt")
      public void testReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Return.kt");
      }

      @Test
      @TestMetadata("StringTemplate.kt")
      public void testStringTemplate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/StringTemplate.kt");
      }

      @Test
      @TestMetadata("ThisSuper.kt")
      public void testThisSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/ThisSuper.kt");
      }

      @Test
      @TestMetadata("Throw.kt")
      public void testThrow() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/Throw.kt");
      }

      @Test
      @TestMetadata("TryCatch.kt")
      public void testTryCatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryCatch.kt");
      }

      @Test
      @TestMetadata("TryFinally.kt")
      public void testTryFinally() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/TryFinally.kt");
      }

      @Test
      @TestMetadata("UnaryExpression.kt")
      public void testUnaryExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/UnaryExpression.kt");
      }

      @Test
      @TestMetadata("WhenEntryAs.kt")
      public void testWhenEntryAs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryAs.kt");
      }

      @Test
      @TestMetadata("WhenEntryIs.kt")
      public void testWhenEntryIs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenEntryIs.kt");
      }

      @Test
      @TestMetadata("WhenIn.kt")
      public void testWhenIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenIn.kt");
      }

      @Test
      @TestMetadata("WhenSubject.kt")
      public void testWhenSubject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhenSubject.kt");
      }

      @Test
      @TestMetadata("While.kt")
      public void testWhile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/While.kt");
      }

      @Test
      @TestMetadata("WhileCondition.kt")
      public void testWhileCondition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataFlowInfoTraversal/WhileCondition.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dataObjects")
    @TestDataPath("$PROJECT_ROOT")
    public class DataObjects {
      @Test
      @TestMetadata("overrideEqualsAndHashCode.kt")
      public void testOverrideEqualsAndHashCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dataObjects/overrideEqualsAndHashCode.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks")
    @TestDataPath("$PROJECT_ROOT")
    public class DeclarationChecks {
      @Test
      @TestMetadata("ambiguousObjectExpressionType.kt")
      public void testAmbiguousObjectExpressionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/ambiguousObjectExpressionType.kt");
      }

      @Test
      @TestMetadata("anonymousFunAsLastExpressionInBlock.kt")
      public void testAnonymousFunAsLastExpressionInBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/anonymousFunAsLastExpressionInBlock.kt");
      }

      @Test
      @TestMetadata("ComponentFunctionReturnTypeMismatch.kt")
      public void testComponentFunctionReturnTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/ComponentFunctionReturnTypeMismatch.kt");
      }

      @Test
      @TestMetadata("ConflictingAndRedundantProjections.kt")
      public void testConflictingAndRedundantProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/ConflictingAndRedundantProjections.kt");
      }

      @Test
      @TestMetadata("DataFlowInMultiDeclInFor.kt")
      public void testDataFlowInMultiDeclInFor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/DataFlowInMultiDeclInFor.kt");
      }

      @Test
      @TestMetadata("FunctionWithMissingNames.kt")
      public void testFunctionWithMissingNames() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/FunctionWithMissingNames.kt");
      }

      @Test
      @TestMetadata("illegalModifiersOnClass.kt")
      public void testIllegalModifiersOnClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/illegalModifiersOnClass.kt");
      }

      @Test
      @TestMetadata("kClassInSignature.kt")
      public void testKClassInSignature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kClassInSignature.kt");
      }

      @Test
      @TestMetadata("kt1141.kt")
      public void testKt1141() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt1141.kt");
      }

      @Test
      @TestMetadata("kt1193.kt")
      public void testKt1193() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt1193.kt");
      }

      @Test
      @TestMetadata("kt2096.kt")
      public void testKt2096() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt2096.kt");
      }

      @Test
      @TestMetadata("kt2397.kt")
      public void testKt2397() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt2397.kt");
      }

      @Test
      @TestMetadata("kt2631_MultipleDeclaration.kt")
      public void testKt2631_MultipleDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt2631_MultipleDeclaration.kt");
      }

      @Test
      @TestMetadata("kt47245.kt")
      public void testKt47245() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt47245.kt");
      }

      @Test
      @TestMetadata("kt559.kt")
      public void testKt559() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/kt559.kt");
      }

      @Test
      @TestMetadata("localDeclarationModifiers.kt")
      public void testLocalDeclarationModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/localDeclarationModifiers.kt");
      }

      @Test
      @TestMetadata("localFunctionNoInheritVisibility.kt")
      public void testLocalFunctionNoInheritVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/localFunctionNoInheritVisibility.kt");
      }

      @Test
      @TestMetadata("localObjectInInnerClass.kt")
      public void testLocalObjectInInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/localObjectInInnerClass.kt");
      }

      @Test
      @TestMetadata("LocalVariableWithNoTypeInformation.kt")
      public void testLocalVariableWithNoTypeInformation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/LocalVariableWithNoTypeInformation.kt");
      }

      @Test
      @TestMetadata("localVariablesWithTypeParameters_1_4.kt")
      public void testLocalVariablesWithTypeParameters_1_4() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/localVariablesWithTypeParameters_1_4.kt");
      }

      @Test
      @TestMetadata("memberPropertyInitialized.kt")
      public void testMemberPropertyInitialized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/memberPropertyInitialized.kt");
      }

      @Test
      @TestMetadata("mulitpleVarargParameters.kt")
      public void testMulitpleVarargParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/mulitpleVarargParameters.kt");
      }

      @Test
      @TestMetadata("MultiDeclarationErrors.kt")
      public void testMultiDeclarationErrors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/MultiDeclarationErrors.kt");
      }

      @Test
      @TestMetadata("namedFunAsLastExpressionInBlock.kt")
      public void testNamedFunAsLastExpressionInBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/namedFunAsLastExpressionInBlock.kt");
      }

      @Test
      @TestMetadata("packageDeclarationModifiers.kt")
      public void testPackageDeclarationModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/packageDeclarationModifiers.kt");
      }

      @Test
      @TestMetadata("propertyInPackageHasNoInheritVisibility.kt")
      public void testPropertyInPackageHasNoInheritVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/propertyInPackageHasNoInheritVisibility.kt");
      }

      @Test
      @TestMetadata("RedeclarationsInMultiDecl.kt")
      public void testRedeclarationsInMultiDecl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/RedeclarationsInMultiDecl.kt");
      }

      @Test
      @TestMetadata("ScalaLikeNamedFun.kt")
      public void testScalaLikeNamedFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/ScalaLikeNamedFun.kt");
      }

      @Test
      @TestMetadata("sealedOnMembers.kt")
      public void testSealedOnMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/sealedOnMembers.kt");
      }

      @Test
      @TestMetadata("unambiguousObjectExpressionType.kt")
      public void testUnambiguousObjectExpressionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/unambiguousObjectExpressionType.kt");
      }

      @Test
      @TestMetadata("valVarFunctionParameter.kt")
      public void testValVarFunctionParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/valVarFunctionParameter.kt");
      }

      @Test
      @TestMetadata("VarianceOnFunctionAndPropertyTypeParameters.kt")
      public void testVarianceOnFunctionAndPropertyTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/VarianceOnFunctionAndPropertyTypeParameters.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations")
      @TestDataPath("$PROJECT_ROOT")
      public class DestructuringDeclarations {
        @Test
        @TestMetadata("destructuringDeclarationAssignedUnresolved.kt")
        public void testDestructuringDeclarationAssignedUnresolved() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationAssignedUnresolved.kt");
        }

        @Test
        @TestMetadata("destructuringDeclarationMissingInitializer.kt")
        public void testDestructuringDeclarationMissingInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/destructuringDeclarationMissingInitializer.kt");
        }

        @Test
        @TestMetadata("FolLoopTypeComponentTypeMismatch.kt")
        public void testFolLoopTypeComponentTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/FolLoopTypeComponentTypeMismatch.kt");
        }

        @Test
        @TestMetadata("ForLoopComponentFunctionAmbiguity.kt")
        public void testForLoopComponentFunctionAmbiguity() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionAmbiguity.kt");
        }

        @Test
        @TestMetadata("ForLoopComponentFunctionMissing.kt")
        public void testForLoopComponentFunctionMissing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopComponentFunctionMissing.kt");
        }

        @Test
        @TestMetadata("ForLoopMissingLoopParameter.kt")
        public void testForLoopMissingLoopParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/ForLoopMissingLoopParameter.kt");
        }

        @Test
        @TestMetadata("missingComponentN.kt")
        public void testMissingComponentN() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/missingComponentN.kt");
        }

        @Test
        @TestMetadata("RedeclarationInForLoop.kt")
        public void testRedeclarationInForLoop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/RedeclarationInForLoop.kt");
        }

        @Test
        @TestMetadata("underscore.kt")
        public void testUnderscore() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/destructuringDeclarations/underscore.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class FiniteBoundRestriction {
        @Test
        @TestMetadata("CasesWithOneTypeParameter.kt")
        public void testCasesWithOneTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithOneTypeParameter.kt");
        }

        @Test
        @TestMetadata("CasesWithTwoTypeParameters.kt")
        public void testCasesWithTwoTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/finiteBoundRestriction/CasesWithTwoTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction")
      @TestDataPath("$PROJECT_ROOT")
      public class NonExpansiveInheritanceRestriction {
        @Test
        @TestMetadata("JavaWithKotlin.kt")
        public void testJavaWithKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/JavaWithKotlin.kt");
        }

        @Test
        @TestMetadata("PureKotlin.kt")
        public void testPureKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/declarationChecks/nonExpansiveInheritanceRestriction/PureKotlin.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/defaultArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class DefaultArguments {
      @Test
      @TestMetadata("kt5232.kt")
      public void testKt5232() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/defaultArguments/kt5232.kt");
      }

      @Test
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/defaultArguments/superCall.kt");
      }

      @Test
      @TestMetadata("superCallWithDelegation.kt")
      public void testSuperCallWithDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/defaultArguments/superCallWithDelegation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    public class DelegatedProperty {
      @Test
      @TestMetadata("abstractDelegatedProperty.kt")
      public void testAbstractDelegatedProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/abstractDelegatedProperty.kt");
      }

      @Test
      @TestMetadata("backingField.kt")
      public void testBackingField() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/backingField.kt");
      }

      @Test
      @TestMetadata("delegateWithAnnotationOnAccessorWithExplicitType.kt")
      public void testDelegateWithAnnotationOnAccessorWithExplicitType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/delegateWithAnnotationOnAccessorWithExplicitType.kt");
      }

      @Test
      @TestMetadata("delegateWithAnnotationOnAccessorWithImplicitType.kt")
      public void testDelegateWithAnnotationOnAccessorWithImplicitType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/delegateWithAnnotationOnAccessorWithImplicitType.kt");
      }

      @Test
      @TestMetadata("delegatedPropertyOverridedInTraitTypeMismatch.kt")
      public void testDelegatedPropertyOverridedInTraitTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/delegatedPropertyOverridedInTraitTypeMismatch.kt");
      }

      @Test
      @TestMetadata("disallowImplInTypeParameter.kt")
      public void testDisallowImplInTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/disallowImplInTypeParameter.kt");
      }

      @Test
      @TestMetadata("inTrait.kt")
      public void testInTrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inTrait.kt");
      }

      @Test
      @TestMetadata("incompleteTypeInference.kt")
      public void testIncompleteTypeInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/incompleteTypeInference.kt");
      }

      @Test
      @TestMetadata("kt4640.kt")
      public void testKt4640() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/kt4640.kt");
      }

      @Test
      @TestMetadata("kt48546.kt")
      public void testKt48546() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/kt48546.kt");
      }

      @Test
      @TestMetadata("kt48546Strict.kt")
      public void testKt48546Strict() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/kt48546Strict.kt");
      }

      @Test
      @TestMetadata("missedGetter.kt")
      public void testMissedGetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/missedGetter.kt");
      }

      @Test
      @TestMetadata("missedSetter.kt")
      public void testMissedSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/missedSetter.kt");
      }

      @Test
      @TestMetadata("noInferenceFromGetValueThroughSetValue.kt")
      public void testNoInferenceFromGetValueThroughSetValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/noInferenceFromGetValueThroughSetValue.kt");
      }

      @Test
      @TestMetadata("nonDefaultAccessors.kt")
      public void testNonDefaultAccessors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/nonDefaultAccessors.kt");
      }

      @Test
      @TestMetadata("propertyDefferedType.kt")
      public void testPropertyDefferedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/propertyDefferedType.kt");
      }

      @Test
      @TestMetadata("recursiveType.kt")
      public void testRecursiveType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/recursiveType.kt");
      }

      @Test
      @TestMetadata("redundantGetter.kt")
      public void testRedundantGetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/redundantGetter.kt");
      }

      @Test
      @TestMetadata("redundantSetter.kt")
      public void testRedundantSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/redundantSetter.kt");
      }

      @Test
      @TestMetadata("setterThisTypeMismatch.kt")
      public void testSetterThisTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/setterThisTypeMismatch.kt");
      }

      @Test
      @TestMetadata("thisInDelegate.kt")
      public void testThisInDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/thisInDelegate.kt");
      }

      @Test
      @TestMetadata("thisOfNothingNullableType.kt")
      public void testThisOfNothingNullableType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingNullableType.kt");
      }

      @Test
      @TestMetadata("thisOfNothingType.kt")
      public void testThisOfNothingType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/thisOfNothingType.kt");
      }

      @Test
      @TestMetadata("twoGetMethods.kt")
      public void testTwoGetMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/twoGetMethods.kt");
      }

      @Test
      @TestMetadata("typeMismatchForGetReturnType.kt")
      public void testTypeMismatchForGetReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetReturnType.kt");
      }

      @Test
      @TestMetadata("typeMismatchForGetWithGeneric.kt")
      public void testTypeMismatchForGetWithGeneric() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForGetWithGeneric.kt");
      }

      @Test
      @TestMetadata("typeMismatchForSetParameter.kt")
      public void testTypeMismatchForSetParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForSetParameter.kt");
      }

      @Test
      @TestMetadata("typeMismatchForThisGetParameter.kt")
      public void testTypeMismatchForThisGetParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/typeMismatchForThisGetParameter.kt");
      }

      @Test
      @TestMetadata("useTypeParameterOfExtensionProperty.kt")
      public void testUseTypeParameterOfExtensionProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty.kt");
      }

      @Test
      @TestMetadata("useTypeParameterOfExtensionProperty2.kt")
      public void testUseTypeParameterOfExtensionProperty2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty2.kt");
      }

      @Test
      @TestMetadata("useTypeParameterOfExtensionProperty3.kt")
      public void testUseTypeParameterOfExtensionProperty3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/useTypeParameterOfExtensionProperty3.kt");
      }

      @Test
      @TestMetadata("withInvokes.kt")
      public void testWithInvokes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/withInvokes.kt");
      }

      @Test
      @TestMetadata("wrongCountOfParametersInGet.kt")
      public void testWrongCountOfParametersInGet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInGet.kt");
      }

      @Test
      @TestMetadata("wrongCountOfParametersInSet.kt")
      public void testWrongCountOfParametersInSet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/wrongCountOfParametersInSet.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("differentDelegatedExpressions.kt")
        public void testDifferentDelegatedExpressions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/differentDelegatedExpressions.kt");
        }

        @Test
        @TestMetadata("extensionProperty.kt")
        public void testExtensionProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/extensionProperty.kt");
        }

        @Test
        @TestMetadata("genericMethodInGenericClass.kt")
        public void testGenericMethodInGenericClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethodInGenericClass.kt");
        }

        @Test
        @TestMetadata("genericMethods.kt")
        public void testGenericMethods() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/genericMethods.kt");
        }

        @Test
        @TestMetadata("lambdaDelegate.kt")
        public void testLambdaDelegate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/lambdaDelegate.kt");
        }

        @Test
        @TestMetadata("manyIncompleteCandidates.kt")
        public void testManyIncompleteCandidates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/manyIncompleteCandidates.kt");
        }

        @Test
        @TestMetadata("noErrorsForImplicitConstraints.kt")
        public void testNoErrorsForImplicitConstraints() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/noErrorsForImplicitConstraints.kt");
        }

        @Test
        @TestMetadata("noExpectedTypeForSupertypeConstraint.kt")
        public void testNoExpectedTypeForSupertypeConstraint() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/noExpectedTypeForSupertypeConstraint.kt");
        }

        @Test
        @TestMetadata("provideDelegateReturningOuterTypeVariable.kt")
        public void testProvideDelegateReturningOuterTypeVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/provideDelegateReturningOuterTypeVariable.kt");
        }

        @Test
        @TestMetadata("successfulProvideDelegateLeadsToRedGetValue.kt")
        public void testSuccessfulProvideDelegateLeadsToRedGetValue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/successfulProvideDelegateLeadsToRedGetValue.kt");
        }

        @Test
        @TestMetadata("typeVariablesFlowComplex.kt")
        public void testTypeVariablesFlowComplex() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/typeVariablesFlowComplex.kt");
        }

        @Test
        @TestMetadata("useCompleterWithoutExpectedType.kt")
        public void testUseCompleterWithoutExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/inference/useCompleterWithoutExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate")
      @TestDataPath("$PROJECT_ROOT")
      public class ProvideDelegate {
        @Test
        @TestMetadata("hostAndReceiver1.kt")
        public void testHostAndReceiver1() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver1.kt");
        }

        @Test
        @TestMetadata("hostAndReceiver2.kt")
        public void testHostAndReceiver2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/hostAndReceiver2.kt");
        }

        @Test
        @TestMetadata("noOperatorModifierOnProvideDelegate.kt")
        public void testNoOperatorModifierOnProvideDelegate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/noOperatorModifierOnProvideDelegate.kt");
        }

        @Test
        @TestMetadata("provideDelegateOnFunctionalTypeWithThis.kt")
        public void testProvideDelegateOnFunctionalTypeWithThis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateOnFunctionalTypeWithThis.kt");
        }

        @Test
        @TestMetadata("provideDelegateOperatorDeclaration.kt")
        public void testProvideDelegateOperatorDeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegatedProperty/provideDelegate/provideDelegateOperatorDeclaration.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/delegation")
    @TestDataPath("$PROJECT_ROOT")
    public class Delegation {
      @Test
      @TestMetadata("DelegationAndOverriding.kt")
      public void testDelegationAndOverriding() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/DelegationAndOverriding.kt");
      }

      @Test
      @TestMetadata("DelegationExpectedType.kt")
      public void testDelegationExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/DelegationExpectedType.kt");
      }

      @Test
      @TestMetadata("DelegationNotTotrait.kt")
      public void testDelegationNotTotrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/DelegationNotTotrait.kt");
      }

      @Test
      @TestMetadata("DelegationToJavaIface.kt")
      public void testDelegationToJavaIface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/DelegationToJavaIface.kt");
      }

      @Test
      @TestMetadata("Delegation_ClashingFunctions.kt")
      public void testDelegation_ClashingFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_ClashingFunctions.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics.kt")
      public void testDelegation_DifferentGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_After.kt")
      public void testDelegation_DifferentGenerics_After() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_After.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_Intersection_After.kt")
      public void testDelegation_DifferentGenerics_Intersection_After() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_Intersection_After.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_MultipleDelegation_After.kt")
      public void testDelegation_DifferentGenerics_MultipleDelegation_After() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_MultipleDelegation_After.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_RawType_After.kt")
      public void testDelegation_DifferentGenerics_RawType_After() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_RawType_After.kt");
      }

      @Test
      @TestMetadata("Delegation_DifferentGenerics_Substitution.kt")
      public void testDelegation_DifferentGenerics_Substitution() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_DifferentGenerics_Substitution.kt");
      }

      @Test
      @TestMetadata("Delegation_MultipleDelegates.kt")
      public void testDelegation_MultipleDelegates() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/Delegation_MultipleDelegates.kt");
      }

      @Test
      @TestMetadata("kt40510.kt")
      public void testKt40510() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/kt40510.kt");
      }

      @Test
      @TestMetadata("kt44843.kt")
      public void testKt44843() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/kt44843.kt");
      }

      @Test
      @TestMetadata("kt48546.kt")
      public void testKt48546() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/kt48546.kt");
      }

      @Test
      @TestMetadata("kt49477.kt")
      public void testKt49477() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/kt49477.kt");
      }

      @Test
      @TestMetadata("kt49477Error.kt")
      public void testKt49477Error() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/kt49477Error.kt");
      }

      @Test
      @TestMetadata("multipleDelegationRegression.kt")
      public void testMultipleDelegationRegression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/multipleDelegationRegression.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/clashes")
      @TestDataPath("$PROJECT_ROOT")
      public class Clashes {
        @Test
        @TestMetadata("finalMemberOverridden.kt")
        public void testFinalMemberOverridden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/clashes/finalMemberOverridden.kt");
        }

        @Test
        @TestMetadata("propertyTypeMismatch.kt")
        public void testPropertyTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/clashes/propertyTypeMismatch.kt");
        }

        @Test
        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/clashes/returnTypeMismatch.kt");
        }

        @Test
        @TestMetadata("varOverriddenByVal.kt")
        public void testVarOverriddenByVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/clashes/varOverriddenByVal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/covariantOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class CovariantOverrides {
        @Test
        @TestMetadata("fromClass.kt")
        public void testFromClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/covariantOverrides/fromClass.kt");
        }

        @Test
        @TestMetadata("irrelevant.kt")
        public void testIrrelevant() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/covariantOverrides/irrelevant.kt");
        }

        @Test
        @TestMetadata("kt13952.kt")
        public void testKt13952() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/covariantOverrides/kt13952.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/covariantOverrides/simple.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride")
      @TestDataPath("$PROJECT_ROOT")
      public class MemberHidesSupertypeOverride {
        @Test
        @TestMetadata("diamond.kt")
        public void testDiamond() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/diamond.kt");
        }

        @Test
        @TestMetadata("severalDelegates.kt")
        public void testSeveralDelegates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/delegation/memberHidesSupertypeOverride/severalDelegates.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deparenthesize")
    @TestDataPath("$PROJECT_ROOT")
    public class Deparenthesize {
      @Test
      @TestMetadata("checkDeparenthesizedType.kt")
      public void testCheckDeparenthesizedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deparenthesize/checkDeparenthesizedType.kt");
      }

      @Test
      @TestMetadata("ParenthesizedVariable.kt")
      public void testParenthesizedVariable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deparenthesize/ParenthesizedVariable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @Test
      @TestMetadata("deprecatedError.kt")
      public void testDeprecatedError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedError.kt");
      }

      @Test
      @TestMetadata("deprecatedErrorBuilder.kt")
      public void testDeprecatedErrorBuilder() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedErrorBuilder.kt");
      }

      @Test
      @TestMetadata("deprecatedHidden.kt")
      public void testDeprecatedHidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedHidden.kt");
      }

      @Test
      @TestMetadata("deprecatedInheritance_after.kt")
      public void testDeprecatedInheritance_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedInheritance_after.kt");
      }

      @Test
      @TestMetadata("deprecatedInheritance_before.kt")
      public void testDeprecatedInheritance_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedInheritance_before.kt");
      }

      @Test
      @TestMetadata("deprecatedPropertyInheritance_after.kt")
      public void testDeprecatedPropertyInheritance_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedPropertyInheritance_after.kt");
      }

      @Test
      @TestMetadata("deprecatedPropertyInheritance_before.kt")
      public void testDeprecatedPropertyInheritance_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedPropertyInheritance_before.kt");
      }

      @Test
      @TestMetadata("hiddenComponentInDestructuringDeclaration.kt")
      public void testHiddenComponentInDestructuringDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/hiddenComponentInDestructuringDeclaration.kt");
      }

      @Test
      @TestMetadata("hiddenPropertyAccessors.kt")
      public void testHiddenPropertyAccessors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/hiddenPropertyAccessors.kt");
      }

      @Test
      @TestMetadata("javaDeprecated.kt")
      public void testJavaDeprecated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/javaDeprecated.kt");
      }

      @Test
      @TestMetadata("javaDeprecatedHidden.kt")
      public void testJavaDeprecatedHidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/javaDeprecatedHidden.kt");
      }

      @Test
      @TestMetadata("nestedTypesUsage.kt")
      public void testNestedTypesUsage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/nestedTypesUsage.kt");
      }

      @Test
      @TestMetadata("typealiasForDeprecatedClass.kt")
      public void testTypealiasForDeprecatedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/typealiasForDeprecatedClass.kt");
      }

      @Test
      @TestMetadata("warningOnConstructorErrorOnClass.kt")
      public void testWarningOnConstructorErrorOnClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/warningOnConstructorErrorOnClass.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin")
      @TestDataPath("$PROJECT_ROOT")
      public class DeprecatedSinceKotlin {
        @Test
        @TestMetadata("checkValuesAreParseableAsVersion.kt")
        public void testCheckValuesAreParseableAsVersion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/checkValuesAreParseableAsVersion.kt");
        }

        @Test
        @TestMetadata("deprecatedSinceKotlinDeclaration.kt")
        public void testDeprecatedSinceKotlinDeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinDeclaration.kt");
        }

        @Test
        @TestMetadata("deprecatedSinceKotlinOutsideKotlinPackage.kt")
        public void testDeprecatedSinceKotlinOutsideKotlinPackage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinOutsideKotlinPackage.kt");
        }

        @Test
        @TestMetadata("deprecatedSinceKotlinWithoutArguments.kt")
        public void testDeprecatedSinceKotlinWithoutArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/deprecatedSinceKotlinWithoutArguments.kt");
        }

        @Test
        @TestMetadata("error.kt")
        public void testError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/error.kt");
        }

        @Test
        @TestMetadata("hidden.kt")
        public void testHidden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/deprecated/deprecatedSinceKotlin/hidden.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/destructuring")
    @TestDataPath("$PROJECT_ROOT")
    public class Destructuring {
      @Test
      @TestMetadata("delegationInDestructuring.kt")
      public void testDelegationInDestructuring() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/destructuring/delegationInDestructuring.kt");
      }

      @Test
      @TestMetadata("destructuringInWhenSubject.kt")
      public void testDestructuringInWhenSubject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/destructuring/destructuringInWhenSubject.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/dynamicTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class DynamicTypes {
      @Test
      @TestMetadata("delegationBy.kt")
      public void testDelegationBy() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dynamicTypes/delegationBy.kt");
      }

      @Test
      @TestMetadata("unsupported.kt")
      public void testUnsupported() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dynamicTypes/unsupported.kt");
      }

      @Test
      @TestMetadata("withInvisibleSynthesized.kt")
      public void testWithInvisibleSynthesized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/dynamicTypes/withInvisibleSynthesized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/enum")
    @TestDataPath("$PROJECT_ROOT")
    public class Enum {
      @Test
      @TestMetadata("AbstractEnum.kt")
      public void testAbstractEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/AbstractEnum.kt");
      }

      @Test
      @TestMetadata("AbstractInEnum.kt")
      public void testAbstractInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/AbstractInEnum.kt");
      }

      @Test
      @TestMetadata("classObjectInEnumPrivate.kt")
      public void testClassObjectInEnumPrivate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/classObjectInEnumPrivate.kt");
      }

      @Test
      @TestMetadata("compareTwoDifferentEnums.kt")
      public void testCompareTwoDifferentEnums() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/compareTwoDifferentEnums.kt");
      }

      @Test
      @TestMetadata("ConstructorCallFromOutside.kt")
      public void testConstructorCallFromOutside() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/ConstructorCallFromOutside.kt");
      }

      @Test
      @TestMetadata("constructorWithDefaultParametersOnly.kt")
      public void testConstructorWithDefaultParametersOnly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/constructorWithDefaultParametersOnly.kt");
      }

      @Test
      @TestMetadata("declaringClass.kt")
      public void testDeclaringClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/declaringClass.kt");
      }

      @Test
      @TestMetadata("dontCreatePackageTypeForEnumEntry_after.kt")
      public void testDontCreatePackageTypeForEnumEntry_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry_after.kt");
      }

      @Test
      @TestMetadata("dontCreatePackageTypeForEnumEntry_before.kt")
      public void testDontCreatePackageTypeForEnumEntry_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/dontCreatePackageTypeForEnumEntry_before.kt");
      }

      @Test
      @TestMetadata("enumEntryCannotHaveClassObject.kt")
      public void testEnumEntryCannotHaveClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumEntryCannotHaveClassObject.kt");
      }

      @Test
      @TestMetadata("enumEntryInAbstractEnum.kt")
      public void testEnumEntryInAbstractEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumEntryInAbstractEnum.kt");
      }

      @Test
      @TestMetadata("enumImplementingTrait.kt")
      public void testEnumImplementingTrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumImplementingTrait.kt");
      }

      @Test
      @TestMetadata("enumInheritance.kt")
      public void testEnumInheritance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumInheritance.kt");
      }

      @Test
      @TestMetadata("enumMissingName.kt")
      public void testEnumMissingName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumMissingName.kt");
      }

      @Test
      @TestMetadata("enumModifier.kt")
      public void testEnumModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumModifier.kt");
      }

      @Test
      @TestMetadata("enumWithAnnotationKeyword.kt")
      public void testEnumWithAnnotationKeyword() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumWithAnnotationKeyword.kt");
      }

      @Test
      @TestMetadata("enumWithEmptyName.kt")
      public void testEnumWithEmptyName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/enumWithEmptyName.kt");
      }

      @Test
      @TestMetadata("equalityOfEnumAndParameter.kt")
      public void testEqualityOfEnumAndParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/equalityOfEnumAndParameter.kt");
      }

      @Test
      @TestMetadata("equalityOfFlexibleTypeParameters.kt")
      public void testEqualityOfFlexibleTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/equalityOfFlexibleTypeParameters.kt");
      }

      @Test
      @TestMetadata("ExplicitConstructorCall.kt")
      public void testExplicitConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/ExplicitConstructorCall.kt");
      }

      @Test
      @TestMetadata("extendingEnumDirectly.kt")
      public void testExtendingEnumDirectly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/extendingEnumDirectly.kt");
      }

      @Test
      @TestMetadata("genericWithEnumBound.kt")
      public void testGenericWithEnumBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/genericWithEnumBound.kt");
      }

      @Test
      @TestMetadata("ifEnumEntry.kt")
      public void testIfEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/ifEnumEntry.kt");
      }

      @Test
      @TestMetadata("incompatibleEnumEntryClasses.kt")
      public void testIncompatibleEnumEntryClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/incompatibleEnumEntryClasses.kt");
      }

      @Test
      @TestMetadata("incompatibleEnums_1_4.kt")
      public void testIncompatibleEnums_1_4() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/incompatibleEnums_1_4.kt");
      }

      @Test
      @TestMetadata("inheritFromEnumEntry.kt")
      public void testInheritFromEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inheritFromEnumEntry.kt");
      }

      @Test
      @TestMetadata("inheritanceFromEnum.kt")
      public void testInheritanceFromEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inheritanceFromEnum.kt");
      }

      @Test
      @TestMetadata("InsideEntryConstructorCall.kt")
      public void testInsideEntryConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/InsideEntryConstructorCall.kt");
      }

      @Test
      @TestMetadata("InsideSecondaryConstructorCall.kt")
      public void testInsideSecondaryConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/InsideSecondaryConstructorCall.kt");
      }

      @Test
      @TestMetadata("interfaceWithEnumKeyword.kt")
      public void testInterfaceWithEnumKeyword() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/interfaceWithEnumKeyword.kt");
      }

      @Test
      @TestMetadata("isEnumEntry.kt")
      public void testIsEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/isEnumEntry.kt");
      }

      @Test
      @TestMetadata("javaEnumValueOfMethod.kt")
      public void testJavaEnumValueOfMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/javaEnumValueOfMethod.kt");
      }

      @Test
      @TestMetadata("javaEnumValuesMethod.kt")
      public void testJavaEnumValuesMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/javaEnumValuesMethod.kt");
      }

      @Test
      @TestMetadata("javaEnumWithAbstractFun.kt")
      public void testJavaEnumWithAbstractFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/javaEnumWithAbstractFun.kt");
      }

      @Test
      @TestMetadata("kt8972_cloneNotAllowed.kt")
      public void testKt8972_cloneNotAllowed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/kt8972_cloneNotAllowed.kt");
      }

      @Test
      @TestMetadata("localEnums.kt")
      public void testLocalEnums() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/localEnums.kt");
      }

      @Test
      @TestMetadata("modifiersOnEnumEntry.kt")
      public void testModifiersOnEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/modifiersOnEnumEntry.kt");
      }

      @Test
      @TestMetadata("NonPrivateConstructor.kt")
      public void testNonPrivateConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/NonPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("openMemberInEnum.kt")
      public void testOpenMemberInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/openMemberInEnum.kt");
      }

      @Test
      @TestMetadata("overrideFinalEnumMethods.kt")
      public void testOverrideFinalEnumMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/overrideFinalEnumMethods.kt");
      }

      @Test
      @TestMetadata("referenceToEnumEntry.kt")
      public void testReferenceToEnumEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/referenceToEnumEntry.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature.kt")
      public void testSecondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/secondaryConstructorWithoutDelegatingToPrimaryOneWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("typeCompatibility.kt")
      public void testTypeCompatibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/typeCompatibility.kt");
      }

      @Test
      @TestMetadata("typeParametersInEnum.kt")
      public void testTypeParametersInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/typeParametersInEnum.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/entries")
      @TestDataPath("$PROJECT_ROOT")
      public class Entries {
        @Test
        @TestMetadata("entriesPropertyImportPrioritized.kt")
        public void testEntriesPropertyImportPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/entriesPropertyImportPrioritized.kt");
        }

        @Test
        @TestMetadata("entriesPropertyInCompanionClash.kt")
        public void testEntriesPropertyInCompanionClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/entriesPropertyInCompanionClash.kt");
        }

        @Test
        @TestMetadata("entriesPropertyInCompanionClashOn.kt")
        public void testEntriesPropertyInCompanionClashOn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/entriesPropertyInCompanionClashOn.kt");
        }

        @Test
        @TestMetadata("entriesPropertyInCompanionClashPrioritized.kt")
        public void testEntriesPropertyInCompanionClashPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/entriesPropertyInCompanionClashPrioritized.kt");
        }

        @Test
        @TestMetadata("entriesUnsupported.kt")
        public void testEntriesUnsupported() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/entriesUnsupported.kt");
        }

        @Test
        @TestMetadata("enumEntriesAmbiguityPrioritized.kt")
        public void testEnumEntriesAmbiguityPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/enumEntriesAmbiguityPrioritized.kt");
        }

        @Test
        @TestMetadata("genericEntriesPropertyClashPrioritized.kt")
        public void testGenericEntriesPropertyClashPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/genericEntriesPropertyClashPrioritized.kt");
        }

        @Test
        @TestMetadata("javaEnumEntriesAmbiguityPrioritized.kt")
        public void testJavaEnumEntriesAmbiguityPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/javaEnumEntriesAmbiguityPrioritized.kt");
        }

        @Test
        @TestMetadata("nameShadowingOfExternallyDefinedEntriesPrioritized.kt")
        public void testNameShadowingOfExternallyDefinedEntriesPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/nameShadowingOfExternallyDefinedEntriesPrioritized.kt");
        }

        @Test
        @TestMetadata("redeclarationOfEnumEntriesNameWithIntrinsicPrioritized.kt")
        public void testRedeclarationOfEnumEntriesNameWithIntrinsicPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/entries/redeclarationOfEnumEntriesNameWithIntrinsicPrioritized.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/enum/inner")
      @TestDataPath("$PROJECT_ROOT")
      public class Inner {
        @Test
        @TestMetadata("insideEnumEntry_after.kt")
        public void testInsideEnumEntry_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry_after.kt");
        }

        @Test
        @TestMetadata("insideEnumEntry_before.kt")
        public void testInsideEnumEntry_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inner/insideEnumEntry_before.kt");
        }

        @Test
        @TestMetadata("insideInnerClassNotAllowed.kt")
        public void testInsideInnerClassNotAllowed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inner/insideInnerClassNotAllowed.kt");
        }

        @Test
        @TestMetadata("twoEnumsInClassObjectAndInnerClass.kt")
        public void testTwoEnumsInClassObjectAndInnerClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/enum/inner/twoEnumsInClassObjectAndInnerClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate {
      @Test
      @TestMetadata("binaryMinusDepOnExpType.kt")
      public void testBinaryMinusDepOnExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/binaryMinusDepOnExpType.kt");
      }

      @Test
      @TestMetadata("binaryMinusIndepWoExpType.kt")
      public void testBinaryMinusIndepWoExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/binaryMinusIndepWoExpType.kt");
      }

      @Test
      @TestMetadata("binaryMinusIndependentExpType.kt")
      public void testBinaryMinusIndependentExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/binaryMinusIndependentExpType.kt");
      }

      @Test
      @TestMetadata("customExtensionOverKotlinExtensionInConst.kt")
      public void testCustomExtensionOverKotlinExtensionInConst() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/customExtensionOverKotlinExtensionInConst.kt");
      }

      @Test
      @TestMetadata("divisionByZero.kt")
      public void testDivisionByZero() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/divisionByZero.kt");
      }

      @Test
      @TestMetadata("infixFunOverBuiltinMemberInConst.kt")
      public void testInfixFunOverBuiltinMemberInConst() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/infixFunOverBuiltinMemberInConst.kt");
      }

      @Test
      @TestMetadata("integer.kt")
      public void testInteger() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/integer.kt");
      }

      @Test
      @TestMetadata("logicWithNumber.kt")
      public void testLogicWithNumber() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/logicWithNumber.kt");
      }

      @Test
      @TestMetadata("numberBinaryOperations.kt")
      public void testNumberBinaryOperations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/numberBinaryOperations.kt");
      }

      @Test
      @TestMetadata("numberBinaryOperationsCall.kt")
      public void testNumberBinaryOperationsCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsCall.kt");
      }

      @Test
      @TestMetadata("numberBinaryOperationsInfixCall.kt")
      public void testNumberBinaryOperationsInfixCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/numberBinaryOperationsInfixCall.kt");
      }

      @Test
      @TestMetadata("parentesized.kt")
      public void testParentesized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/parentesized.kt");
      }

      @Test
      @TestMetadata("unaryMinusDepOnExpType.kt")
      public void testUnaryMinusDepOnExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/unaryMinusDepOnExpType.kt");
      }

      @Test
      @TestMetadata("unaryMinusIndepWoExpType.kt")
      public void testUnaryMinusIndepWoExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/unaryMinusIndepWoExpType.kt");
      }

      @Test
      @TestMetadata("unaryMinusIndependentExpType.kt")
      public void testUnaryMinusIndependentExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/unaryMinusIndependentExpType.kt");
      }

      @Test
      @TestMetadata("wrongLongSuffix.kt")
      public void testWrongLongSuffix() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/wrongLongSuffix.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/evaluate/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @Test
        @TestMetadata("constructorOfUnsignedType.kt")
        public void testConstructorOfUnsignedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/evaluate/inlineClasses/constructorOfUnsignedType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/exceptions")
    @TestDataPath("$PROJECT_ROOT")
    public class Exceptions {
      @Test
      @TestMetadata("annotationWithWrongArgInDanglingModifierList.kt")
      public void testAnnotationWithWrongArgInDanglingModifierList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/annotationWithWrongArgInDanglingModifierList.kt");
      }

      @Test
      @TestMetadata("assignmentWithIncorrectLValue.kt")
      public void testAssignmentWithIncorrectLValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/assignmentWithIncorrectLValue.kt");
      }

      @Test
      @TestMetadata("expectedSomeTypesOnBranchForWhenExpressionOfErroneousType.kt")
      public void testExpectedSomeTypesOnBranchForWhenExpressionOfErroneousType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/expectedSomeTypesOnBranchForWhenExpressionOfErroneousType.kt");
      }

      @Test
      @TestMetadata("incorrectCallOnILT.kt")
      public void testIncorrectCallOnILT() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/incorrectCallOnILT.kt");
      }

      @Test
      @TestMetadata("keywordsInsteadOfIdentifiers.kt")
      public void testKeywordsInsteadOfIdentifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/keywordsInsteadOfIdentifiers.kt");
      }

      @Test
      @TestMetadata("kt24158.kt")
      public void testKt24158() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/kt24158.kt");
      }

      @Test
      @TestMetadata("stackOverflowOnDoUnify.kt")
      public void testStackOverflowOnDoUnify() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/stackOverflowOnDoUnify.kt");
      }

      @Test
      @TestMetadata("transformErrorTypeChildrenWhileTransformingPartiallyResolvedType.kt")
      public void testTransformErrorTypeChildrenWhileTransformingPartiallyResolvedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/transformErrorTypeChildrenWhileTransformingPartiallyResolvedType.kt");
      }

      @Test
      @TestMetadata("uninitializedTypeArgumentsMappingIfErrorCandidates.kt")
      public void testUninitializedTypeArgumentsMappingIfErrorCandidates() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/uninitializedTypeArgumentsMappingIfErrorCandidates.kt");
      }

      @Test
      @TestMetadata("unresolvedReferenceDuringProjectionRelationChecking.kt")
      public void testUnresolvedReferenceDuringProjectionRelationChecking() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exceptions/unresolvedReferenceDuringProjectionRelationChecking.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection")
    @TestDataPath("$PROJECT_ROOT")
    public class ExplicitDefinitelyNotNullableViaIntersection {
      @Test
      @TestMetadata("approximation.kt")
      public void testApproximation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/approximation.kt");
      }

      @Test
      @TestMetadata("bareTypes.kt")
      public void testBareTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/bareTypes.kt");
      }

      @Test
      @TestMetadata("dnnAgainstSam.kt")
      public void testDnnAgainstSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/dnnAgainstSam.kt");
      }

      @Test
      @TestMetadata("dnnTypeProjectionInParameter.kt")
      public void testDnnTypeProjectionInParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/dnnTypeProjectionInParameter.kt");
      }

      @Test
      @TestMetadata("dnnTypeProjectionInReceiver.kt")
      public void testDnnTypeProjectionInReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/dnnTypeProjectionInReceiver.kt");
      }

      @Test
      @TestMetadata("inference.kt")
      public void testInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/inference.kt");
      }

      @Test
      @TestMetadata("isAsOperators.kt")
      public void testIsAsOperators() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/isAsOperators.kt");
      }

      @Test
      @TestMetadata("isAsOperatorsEnabled.kt")
      public void testIsAsOperatorsEnabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/isAsOperatorsEnabled.kt");
      }

      @Test
      @TestMetadata("notApplicable.kt")
      public void testNotApplicable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/notApplicable.kt");
      }

      @Test
      @TestMetadata("overrides.kt")
      public void testOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/overrides.kt");
      }

      @Test
      @TestMetadata("overridesJavaAnnotated.kt")
      public void testOverridesJavaAnnotated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/overridesJavaAnnotated.kt");
      }

      @Test
      @TestMetadata("recursiveBounds.kt")
      public void testRecursiveBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/recursiveBounds.kt");
      }

      @Test
      @TestMetadata("reifiedArguments.kt")
      public void testReifiedArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/reifiedArguments.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/explicitDefinitelyNotNullableViaIntersection/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/exposed")
    @TestDataPath("$PROJECT_ROOT")
    public class Exposed {
      @Test
      @TestMetadata("ambiguousAnonymousExposed.kt")
      public void testAmbiguousAnonymousExposed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/ambiguousAnonymousExposed.kt");
      }

      @Test
      @TestMetadata("exceptionOnFakeInvisible.kt")
      public void testExceptionOnFakeInvisible() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/exceptionOnFakeInvisible.kt");
      }

      @Test
      @TestMetadata("functional.kt")
      public void testFunctional() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/functional.kt");
      }

      @Test
      @TestMetadata("internal.kt")
      public void testInternal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/internal.kt");
      }

      @Test
      @TestMetadata("internalFromLocal.kt")
      public void testInternalFromLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/internalFromLocal.kt");
      }

      @Test
      @TestMetadata("local.kt")
      public void testLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/local.kt");
      }

      @Test
      @TestMetadata("localInFunReturnType.kt")
      public void testLocalInFunReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/localInFunReturnType.kt");
      }

      @Test
      @TestMetadata("localInMemberType.kt")
      public void testLocalInMemberType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/localInMemberType.kt");
      }

      @Test
      @TestMetadata("localInPropertyType.kt")
      public void testLocalInPropertyType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/localInPropertyType.kt");
      }

      @Test
      @TestMetadata("nestedInheritance.kt")
      public void testNestedInheritance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/nestedInheritance.kt");
      }

      @Test
      @TestMetadata("object.kt")
      public void testObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/object.kt");
      }

      @Test
      @TestMetadata("packagePrivate.kt")
      public void testPackagePrivate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/packagePrivate.kt");
      }

      @Test
      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/privateInFile.kt");
      }

      @Test
      @TestMetadata("privateInFileDisabled.kt")
      public void testPrivateInFileDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/privateInFileDisabled.kt");
      }

      @Test
      @TestMetadata("propertyInPrivateConstructorError.kt")
      public void testPropertyInPrivateConstructorError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/propertyInPrivateConstructorError.kt");
      }

      @Test
      @TestMetadata("propertyInSimpleConstructor.kt")
      public void testPropertyInSimpleConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/propertyInSimpleConstructor.kt");
      }

      @Test
      @TestMetadata("protected.kt")
      public void testProtected() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/protected.kt");
      }

      @Test
      @TestMetadata("protectedInProtected.kt")
      public void testProtectedInProtected() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/protectedInProtected.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/simple.kt");
      }

      @Test
      @TestMetadata("typeArgs.kt")
      public void testTypeArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/exposed/typeArgs.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/expressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expressions {
      @Test
      @TestMetadata("UnusedExpressionByType.kt")
      public void testUnusedExpressionByType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/expressions/UnusedExpressionByType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/extensions")
    @TestDataPath("$PROJECT_ROOT")
    public class Extensions {
      @Test
      @TestMetadata("classObject.kt")
      public void testClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/classObject.kt");
      }

      @Test
      @TestMetadata("ExtensionFunctions.kt")
      public void testExtensionFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/ExtensionFunctions.kt");
      }

      @Test
      @TestMetadata("extensionMemberInClassObject.kt")
      public void testExtensionMemberInClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/extensionMemberInClassObject.kt");
      }

      @Test
      @TestMetadata("ExtensionsCalledOnSuper.kt")
      public void testExtensionsCalledOnSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/ExtensionsCalledOnSuper.kt");
      }

      @Test
      @TestMetadata("GenericIterator2.kt")
      public void testGenericIterator2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/GenericIterator2.kt");
      }

      @Test
      @TestMetadata("kt1875.kt")
      public void testKt1875() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/kt1875.kt");
      }

      @Test
      @TestMetadata("kt3563.kt")
      public void testKt3563() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/kt3563.kt");
      }

      @Test
      @TestMetadata("noClassObjectsInJava.kt")
      public void testNoClassObjectsInJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/noClassObjectsInJava.kt");
      }

      @Test
      @TestMetadata("throwOutCandidatesByReceiver.kt")
      public void testThrowOutCandidatesByReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver.kt");
      }

      @Test
      @TestMetadata("throwOutCandidatesByReceiver2.kt")
      public void testThrowOutCandidatesByReceiver2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/throwOutCandidatesByReceiver2.kt");
      }

      @Test
      @TestMetadata("variableInvoke.kt")
      public void testVariableInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/variableInvoke.kt");
      }

      @Test
      @TestMetadata("ViolatedUpperBoundInExtensionReceiver.kt")
      public void testViolatedUpperBoundInExtensionReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/ViolatedUpperBoundInExtensionReceiver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers")
      @TestDataPath("$PROJECT_ROOT")
      public class ContextReceivers {
        @Test
        @TestMetadata("ambiguityInGroup.kt")
        public void testAmbiguityInGroup() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/ambiguityInGroup.kt");
        }

        @Test
        @TestMetadata("conflicting.kt")
        public void testConflicting() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/conflicting.kt");
        }

        @Test
        @TestMetadata("conflictingWithDifferentOrder.kt")
        public void testConflictingWithDifferentOrder() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/conflictingWithDifferentOrder.kt");
        }

        @Test
        @TestMetadata("contextAndNoContextOverloads.kt")
        public void testContextAndNoContextOverloads() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/contextAndNoContextOverloads.kt");
        }

        @Test
        @TestMetadata("contextReceiverAmbiguity.kt")
        public void testContextReceiverAmbiguity() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverAmbiguity.kt");
        }

        @Test
        @TestMetadata("contextReceiverTypeParamsUsageError.kt")
        public void testContextReceiverTypeParamsUsageError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/contextReceiverTypeParamsUsageError.kt");
        }

        @Test
        @TestMetadata("contextualFunctionalTypeConversion.kt")
        public void testContextualFunctionalTypeConversion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/contextualFunctionalTypeConversion.kt");
        }

        @Test
        @TestMetadata("genericOuterClass.kt")
        public void testGenericOuterClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/genericOuterClass.kt");
        }

        @Test
        @TestMetadata("insideDeclaration.kt")
        public void testInsideDeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/insideDeclaration.kt");
        }

        @Test
        @TestMetadata("labelsFromClassNameForbidden.kt")
        public void testLabelsFromClassNameForbidden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/labelsFromClassNameForbidden.kt");
        }

        @Test
        @TestMetadata("lazy.kt")
        public void testLazy() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/lazy.kt");
        }

        @Test
        @TestMetadata("manyReceivers.kt")
        public void testManyReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/manyReceivers.kt");
        }

        @Test
        @TestMetadata("noBackingField.kt")
        public void testNoBackingField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/noBackingField.kt");
        }

        @Test
        @TestMetadata("noContextReceiversOnValueClasses.kt")
        public void testNoContextReceiversOnValueClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/noContextReceiversOnValueClasses.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
        }

        @Test
        @TestMetadata("noExplicitReceiver.kt")
        public void testNoExplicitReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/noExplicitReceiver.kt");
        }

        @Test
        @TestMetadata("noLabelsByClassName.kt")
        public void testNoLabelsByClassName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/noLabelsByClassName.kt");
        }

        @Test
        @TestMetadata("outerClass.kt")
        public void testOuterClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/outerClass.kt");
        }

        @Test
        @TestMetadata("resolutionByName.kt")
        public void testResolutionByName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/resolutionByName.kt");
        }

        @Test
        @TestMetadata("subtypingBetweenContextReceivers.kt")
        public void testSubtypingBetweenContextReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/subtypingBetweenContextReceivers.kt");
        }

        @Test
        @TestMetadata("superWithContext.kt")
        public void testSuperWithContext() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/superWithContext.kt");
        }

        @Test
        @TestMetadata("syntaxError.kt")
        public void testSyntaxError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/syntaxError.kt");
        }

        @Test
        @TestMetadata("thisWithCustomLabel.kt")
        public void testThisWithCustomLabel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithCustomLabel.kt");
        }

        @Test
        @TestMetadata("thisWithReceiverLabelsFunctions.kt")
        public void testThisWithReceiverLabelsFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsFunctions.kt");
        }

        @Test
        @TestMetadata("thisWithReceiverLabelsProperties.kt")
        public void testThisWithReceiverLabelsProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/thisWithReceiverLabelsProperties.kt");
        }

        @Test
        @TestMetadata("twoReceiverCandidatesError.kt")
        public void testTwoReceiverCandidatesError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/twoReceiverCandidatesError.kt");
        }

        @Test
        @TestMetadata("typeParameterized.kt")
        public void testTypeParameterized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterized.kt");
        }

        @Test
        @TestMetadata("typeParameterizedList.kt")
        public void testTypeParameterizedList() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/typeParameterizedList.kt");
        }

        @Test
        @TestMetadata("unsupported.kt")
        public void testUnsupported() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/unsupported.kt");
        }

        @Test
        @TestMetadata("withExplicitReceiver.kt")
        public void testWithExplicitReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/withExplicitReceiver.kt");
        }

        @Test
        @TestMetadata("withExplicitReceiverError.kt")
        public void testWithExplicitReceiverError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/withExplicitReceiverError.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP")
        @TestDataPath("$PROJECT_ROOT")
        public class FromKEEP {
          @Test
          @TestMetadata("autoCloseScope.kt")
          public void testAutoCloseScope() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/autoCloseScope.kt");
          }

          @Test
          @TestMetadata("dp.kt")
          public void testDp() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/dp.kt");
          }

          @Test
          @TestMetadata("iterableClass.kt")
          public void testIterableClass() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/iterableClass.kt");
          }

          @Test
          @TestMetadata("monoidSum.kt")
          public void testMonoidSum() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/extensions/contextReceivers/fromKEEP/monoidSum.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/fieldRename")
    @TestDataPath("$PROJECT_ROOT")
    public class FieldRename {
      @Test
      @TestMetadata("javaFieldKotlinPropertyDifferentType.kt")
      public void testJavaFieldKotlinPropertyDifferentType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyDifferentType.kt");
      }

      @Test
      @TestMetadata("javaFieldKotlinPropertyDifferentType2.kt")
      public void testJavaFieldKotlinPropertyDifferentType2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyDifferentType2.kt");
      }

      @Test
      @TestMetadata("javaFieldKotlinPropertyJavaFieldInPackagePrivate.kt")
      public void testJavaFieldKotlinPropertyJavaFieldInPackagePrivate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyJavaFieldInPackagePrivate.kt");
      }

      @Test
      @TestMetadata("javaFieldKotlinPropertyJavaPackagePrivateField.kt")
      public void testJavaFieldKotlinPropertyJavaPackagePrivateField() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/fieldRename/javaFieldKotlinPropertyJavaPackagePrivateField.kt");
      }

      @Test
      @TestMetadata("javaProtectedFieldAndKotlinInvisiblePropertyReference.kt")
      public void testJavaProtectedFieldAndKotlinInvisiblePropertyReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/fieldRename/javaProtectedFieldAndKotlinInvisiblePropertyReference.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/funInterface")
    @TestDataPath("$PROJECT_ROOT")
    public class FunInterface {
      @Test
      @TestMetadata("funInterfaceConstructorReferences_after.kt")
      public void testFunInterfaceConstructorReferences_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funInterfaceConstructorReferences_after.kt");
      }

      @Test
      @TestMetadata("funInterfaceConstructorReferences_before.kt")
      public void testFunInterfaceConstructorReferences_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funInterfaceConstructorReferences_before.kt");
      }

      @Test
      @TestMetadata("funInterfaceConversionOnReceiver.kt")
      public void testFunInterfaceConversionOnReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funInterfaceConversionOnReceiver.kt");
      }

      @Test
      @TestMetadata("funInterfaceDeclarationCheck.kt")
      public void testFunInterfaceDeclarationCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funInterfaceDeclarationCheck.kt");
      }

      @Test
      @TestMetadata("funInterfaceWithAnyOverrides.kt")
      public void testFunInterfaceWithAnyOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funInterfaceWithAnyOverrides.kt");
      }

      @Test
      @TestMetadata("funIsNotInheritedFromBaseInterface.kt")
      public void testFunIsNotInheritedFromBaseInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/funIsNotInheritedFromBaseInterface.kt");
      }

      @Test
      @TestMetadata("functionDelegateClashOnJvm.kt")
      public void testFunctionDelegateClashOnJvm() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/functionDelegateClashOnJvm.kt");
      }

      @Test
      @TestMetadata("genericSubstitutionForFunInterface.kt")
      public void testGenericSubstitutionForFunInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/genericSubstitutionForFunInterface.kt");
      }

      @Test
      @TestMetadata("resolveFunInterfaceWithoutMainMethod.kt")
      public void testResolveFunInterfaceWithoutMainMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/resolveFunInterfaceWithoutMainMethod.kt");
      }

      @Test
      @TestMetadata("unitInCovariantPosition.kt")
      public void testUnitInCovariantPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/funInterface/unitInCovariantPosition.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionAsExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionAsExpression {
      @Test
      @TestMetadata("AutoLabels.kt")
      public void testAutoLabels() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/AutoLabels.kt");
      }

      @Test
      @TestMetadata("Common.kt")
      public void testCommon() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/Common.kt");
      }

      @Test
      @TestMetadata("ForbiddenNonLocalReturn.kt")
      public void testForbiddenNonLocalReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/ForbiddenNonLocalReturn.kt");
      }

      @Test
      @TestMetadata("FunctionType.kt")
      public void testFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/FunctionType.kt");
      }

      @Test
      @TestMetadata("InferenceParametersTypes.kt")
      public void testInferenceParametersTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/InferenceParametersTypes.kt");
      }

      @Test
      @TestMetadata("MissingParameterTypes.kt")
      public void testMissingParameterTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/MissingParameterTypes.kt");
      }

      @Test
      @TestMetadata("NameDeprecation.kt")
      public void testNameDeprecation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/NameDeprecation.kt");
      }

      @Test
      @TestMetadata("NonSuspendAnonFuncAsInitializerOfSuspendFunctionType.kt")
      public void testNonSuspendAnonFuncAsInitializerOfSuspendFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/NonSuspendAnonFuncAsInitializerOfSuspendFunctionType.kt");
      }

      @Test
      @TestMetadata("NonSuspendAnonFuncAsReturnValueOfSuspendFunctionTypeInConcreteFunction.kt")
      public void testNonSuspendAnonFuncAsReturnValueOfSuspendFunctionTypeInConcreteFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/NonSuspendAnonFuncAsReturnValueOfSuspendFunctionTypeInConcreteFunction.kt");
      }

      @Test
      @TestMetadata("Parameters.kt")
      public void testParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/Parameters.kt");
      }

      @Test
      @TestMetadata("ReceiverByExpectedType.kt")
      public void testReceiverByExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/ReceiverByExpectedType.kt");
      }

      @Test
      @TestMetadata("ReturnTypeCheck.kt")
      public void testReturnTypeCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/ReturnTypeCheck.kt");
      }

      @Test
      @TestMetadata("ScopeCheck.kt")
      public void testScopeCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/ScopeCheck.kt");
      }

      @Test
      @TestMetadata("WithGenericParameters.kt")
      public void testWithGenericParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/WithGenericParameters.kt");
      }

      @Test
      @TestMetadata("WithoutBody.kt")
      public void testWithoutBody() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionAsExpression/WithoutBody.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionLiterals {
      @Test
      @TestMetadata("assignmentOperationInLambda.kt")
      public void testAssignmentOperationInLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambda.kt");
      }

      @Test
      @TestMetadata("assignmentOperationInLambdaWithExpectedType.kt")
      public void testAssignmentOperationInLambdaWithExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/assignmentOperationInLambdaWithExpectedType.kt");
      }

      @Test
      @TestMetadata("DeprecatedSyntax.kt")
      public void testDeprecatedSyntax() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/DeprecatedSyntax.kt");
      }

      @Test
      @TestMetadata("emptyLambdaTypeMismatchDiagnostic.kt")
      public void testEmptyLambdaTypeMismatchDiagnostic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/emptyLambdaTypeMismatchDiagnostic.kt");
      }

      @Test
      @TestMetadata("ExpectedParameterTypeMismatchVariance.kt")
      public void testExpectedParameterTypeMismatchVariance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/ExpectedParameterTypeMismatchVariance.kt");
      }

      @Test
      @TestMetadata("ExpectedParametersTypesMismatch.kt")
      public void testExpectedParametersTypesMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/ExpectedParametersTypesMismatch.kt");
      }

      @Test
      @TestMetadata("functionLIteralInBlockInIf.kt")
      public void testFunctionLIteralInBlockInIf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/functionLIteralInBlockInIf.kt");
      }

      @Test
      @TestMetadata("functionLiteralWithoutArgumentList.kt")
      public void testFunctionLiteralWithoutArgumentList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/functionLiteralWithoutArgumentList.kt");
      }

      @Test
      @TestMetadata("higherOrderCallMissingParameters.kt")
      public void testHigherOrderCallMissingParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/higherOrderCallMissingParameters.kt");
      }

      @Test
      @TestMetadata("kt11733.kt")
      public void testKt11733() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt11733.kt");
      }

      @Test
      @TestMetadata("kt11733_1.kt")
      public void testKt11733_1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt11733_1.kt");
      }

      @Test
      @TestMetadata("kt16016.kt")
      public void testKt16016() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt16016.kt");
      }

      @Test
      @TestMetadata("kt47493.kt")
      public void testKt47493() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt47493.kt");
      }

      @Test
      @TestMetadata("kt56138.kt")
      public void testKt56138() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt56138.kt");
      }

      @Test
      @TestMetadata("kt6541_extensionForExtensionFunction.kt")
      public void testKt6541_extensionForExtensionFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt6541_extensionForExtensionFunction.kt");
      }

      @Test
      @TestMetadata("kt7383_starProjectedFunction.kt")
      public void testKt7383_starProjectedFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/kt7383_starProjectedFunction.kt");
      }

      @Test
      @TestMetadata("LabeledFunctionLiterals.kt")
      public void testLabeledFunctionLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/LabeledFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("missedTypeMismatch.kt")
      public void testMissedTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/missedTypeMismatch.kt");
      }

      @Test
      @TestMetadata("underscopeParameters.kt")
      public void testUnderscopeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/underscopeParameters.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas")
      @TestDataPath("$PROJECT_ROOT")
      public class DestructuringInLambdas {
        @Test
        @TestMetadata("complexInference.kt")
        public void testComplexInference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/complexInference.kt");
        }

        @Test
        @TestMetadata("extensionComponents.kt")
        public void testExtensionComponents() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/extensionComponents.kt");
        }

        @Test
        @TestMetadata("inferredFunctionalType.kt")
        public void testInferredFunctionalType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/inferredFunctionalType.kt");
        }

        @Test
        @TestMetadata("modifiers.kt")
        public void testModifiers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/modifiers.kt");
        }

        @Test
        @TestMetadata("noExpectedType.kt")
        public void testNoExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/noExpectedType.kt");
        }

        @Test
        @TestMetadata("redeclaration.kt")
        public void testRedeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/redeclaration.kt");
        }

        @Test
        @TestMetadata("shadowing.kt")
        public void testShadowing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/shadowing.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/simple.kt");
        }

        @Test
        @TestMetadata("underscore.kt")
        public void testUnderscore() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/underscore.kt");
        }

        @Test
        @TestMetadata("unusedParameters.kt")
        public void testUnusedParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/destructuringInLambdas/unusedParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/functionLiterals/return")
      @TestDataPath("$PROJECT_ROOT")
      public class Return {
        @Test
        @TestMetadata("AutoLabelsNonLocal.kt")
        public void testAutoLabelsNonLocal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/AutoLabelsNonLocal.kt");
        }

        @Test
        @TestMetadata("ForbiddenNonLocalReturnNoType.kt")
        public void testForbiddenNonLocalReturnNoType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/ForbiddenNonLocalReturnNoType.kt");
        }

        @Test
        @TestMetadata("IfWithoutElseWithExplicitType.kt")
        public void testIfWithoutElseWithExplicitType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/IfWithoutElseWithExplicitType.kt");
        }

        @Test
        @TestMetadata("kt66277.kt")
        public void testKt66277() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/kt66277.kt");
        }

        @Test
        @TestMetadata("kt66512.kt")
        public void testKt66512() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/kt66512.kt");
        }

        @Test
        @TestMetadata("kt66534.kt")
        public void testKt66534() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/kt66534.kt");
        }

        @Test
        @TestMetadata("LambdaReturnTypeIsUnitIfImplicitReturnExists.kt")
        public void testLambdaReturnTypeIsUnitIfImplicitReturnExists() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LambdaReturnTypeIsUnitIfImplicitReturnExists.kt");
        }

        @Test
        @TestMetadata("LocalAndNonLocalReturnInLambda.kt")
        public void testLocalAndNonLocalReturnInLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalAndNonLocalReturnInLambda.kt");
        }

        @Test
        @TestMetadata("LocalReturnExplicitLabelNoParens.kt")
        public void testLocalReturnExplicitLabelNoParens() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelNoParens.kt");
        }

        @Test
        @TestMetadata("LocalReturnExplicitLabelParens.kt")
        public void testLocalReturnExplicitLabelParens() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnExplicitLabelParens.kt");
        }

        @Test
        @TestMetadata("LocalReturnHasTypeNothing.kt")
        public void testLocalReturnHasTypeNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnHasTypeNothing.kt");
        }

        @Test
        @TestMetadata("LocalReturnInNestedFunction.kt")
        public void testLocalReturnInNestedFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedFunction.kt");
        }

        @Test
        @TestMetadata("LocalReturnInNestedLambda.kt")
        public void testLocalReturnInNestedLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnInNestedLambda.kt");
        }

        @Test
        @TestMetadata("LocalReturnNoCoercionToUnit.kt")
        public void testLocalReturnNoCoercionToUnit() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnNoCoercionToUnit.kt");
        }

        @Test
        @TestMetadata("LocalReturnSecondUnit.kt")
        public void testLocalReturnSecondUnit() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnSecondUnit.kt");
        }

        @Test
        @TestMetadata("LocalReturnUnit.kt")
        public void testLocalReturnUnit() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnit.kt");
        }

        @Test
        @TestMetadata("LocalReturnUnitAndDontCareType.kt")
        public void testLocalReturnUnitAndDontCareType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnUnitAndDontCareType.kt");
        }

        @Test
        @TestMetadata("LocalReturnsWithExplicitReturnType.kt")
        public void testLocalReturnsWithExplicitReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/LocalReturnsWithExplicitReturnType.kt");
        }

        @Test
        @TestMetadata("MixedReturnsFromLambda.kt")
        public void testMixedReturnsFromLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/MixedReturnsFromLambda.kt");
        }

        @Test
        @TestMetadata("unresolvedReferenceInReturnBlock.kt")
        public void testUnresolvedReferenceInReturnBlock() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/functionLiterals/return/unresolvedReferenceInReturnBlock.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/generics")
    @TestDataPath("$PROJECT_ROOT")
    public class Generics {
      @Test
      @TestMetadata("argumentsForT.kt")
      public void testArgumentsForT() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/argumentsForT.kt");
      }

      @Test
      @TestMetadata("bareTypesWithStarProjections.kt")
      public void testBareTypesWithStarProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/bareTypesWithStarProjections.kt");
      }

      @Test
      @TestMetadata("conflictingStarAndTypeParameterBounds.kt")
      public void testConflictingStarAndTypeParameterBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/conflictingStarAndTypeParameterBounds.kt");
      }

      @Test
      @TestMetadata("constructorOnGenericQualifier.kt")
      public void testConstructorOnGenericQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/constructorOnGenericQualifier.kt");
      }

      @Test
      @TestMetadata("constructorOnGenericQualifierForbidden.kt")
      public void testConstructorOnGenericQualifierForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/constructorOnGenericQualifierForbidden.kt");
      }

      @Test
      @TestMetadata("doNotCaptureSupertype.kt")
      public void testDoNotCaptureSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/doNotCaptureSupertype.kt");
      }

      @Test
      @TestMetadata("finalUpperBoundWithoutOverride.kt")
      public void testFinalUpperBoundWithoutOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/finalUpperBoundWithoutOverride.kt");
      }

      @Test
      @TestMetadata("genericsInType.kt")
      public void testGenericsInType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/genericsInType.kt");
      }

      @Test
      @TestMetadata("InconsistentTypeParameterBounds.kt")
      public void testInconsistentTypeParameterBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/InconsistentTypeParameterBounds.kt");
      }

      @Test
      @TestMetadata("invalidArgumentsNumberInWhere.kt")
      public void testInvalidArgumentsNumberInWhere() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/invalidArgumentsNumberInWhere.kt");
      }

      @Test
      @TestMetadata("kt30590.kt")
      public void testKt30590() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/kt30590.kt");
      }

      @Test
      @TestMetadata("kt34729.kt")
      public void testKt34729() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/kt34729.kt");
      }

      @Test
      @TestMetadata("kt53656.kt")
      public void testKt53656() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/kt53656.kt");
      }

      @Test
      @TestMetadata("kt5508.kt")
      public void testKt5508() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/kt5508.kt");
      }

      @Test
      @TestMetadata("kt9985.kt")
      public void testKt9985() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/kt9985.kt");
      }

      @Test
      @TestMetadata("outerTypeParametersInNestedClasses.kt")
      public void testOuterTypeParametersInNestedClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/outerTypeParametersInNestedClasses.kt");
      }

      @Test
      @TestMetadata("Projections.kt")
      public void testProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/Projections.kt");
      }

      @Test
      @TestMetadata("protectedSuperCall.kt")
      public void testProtectedSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/protectedSuperCall.kt");
      }

      @Test
      @TestMetadata("RawTypeInIsExpression.kt")
      public void testRawTypeInIsExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/RawTypeInIsExpression.kt");
      }

      @Test
      @TestMetadata("RawTypeInIsPattern.kt")
      public void testRawTypeInIsPattern() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/RawTypeInIsPattern.kt");
      }

      @Test
      @TestMetadata("RecursiveUpperBoundCheck.kt")
      public void testRecursiveUpperBoundCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundCheck.kt");
      }

      @Test
      @TestMetadata("RecursiveUpperBoundWithTwoArguments.kt")
      public void testRecursiveUpperBoundWithTwoArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/RecursiveUpperBoundWithTwoArguments.kt");
      }

      @Test
      @TestMetadata("TypeParameterBounds.kt")
      public void testTypeParameterBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/TypeParameterBounds.kt");
      }

      @Test
      @TestMetadata("TypeParametersInTypeParameterBounds.kt")
      public void testTypeParametersInTypeParameterBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/TypeParametersInTypeParameterBounds.kt");
      }

      @Test
      @TestMetadata("unclearTypeMismatch.kt")
      public void testUnclearTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/unclearTypeMismatch.kt");
      }

      @Test
      @TestMetadata("unclearTypeMismatchWithCapturedTypes.kt")
      public void testUnclearTypeMismatchWithCapturedTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/unclearTypeMismatchWithCapturedTypes.kt");
      }

      @Test
      @TestMetadata("unresolvedClassifierInWhere.kt")
      public void testUnresolvedClassifierInWhere() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/unresolvedClassifierInWhere.kt");
      }

      @Test
      @TestMetadata("whereClauseSyntax.kt")
      public void testWhereClauseSyntax() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/whereClauseSyntax.kt");
      }

      @Test
      @TestMetadata("wildcardInValueParameter.kt")
      public void testWildcardInValueParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/wildcardInValueParameter.kt");
      }

      @Test
      @TestMetadata("wrongNumberOfTypeArgumentsDiagnostic.kt")
      public void testWrongNumberOfTypeArgumentsDiagnostic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/wrongNumberOfTypeArgumentsDiagnostic.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/capturedParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedParameters {
        @Test
        @TestMetadata("captured.kt")
        public void testCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/captured.kt");
        }

        @Test
        @TestMetadata("innerLocalClass.kt")
        public void testInnerLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/innerLocalClass.kt");
        }

        @Test
        @TestMetadata("localClass.kt")
        public void testLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/localClass.kt");
        }

        @Test
        @TestMetadata("localWithTypeParameter.kt")
        public void testLocalWithTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/localWithTypeParameter.kt");
        }

        @Test
        @TestMetadata("objectLiteral.kt")
        public void testObjectLiteral() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/objectLiteral.kt");
        }

        @Test
        @TestMetadata("uncheckedCast.kt")
        public void testUncheckedCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/capturedParameters/uncheckedCast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/cyclicBounds")
      @TestDataPath("$PROJECT_ROOT")
      public class CyclicBounds {
        @Test
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/cyclicBounds/functions.kt");
        }

        @Test
        @TestMetadata("inClass.kt")
        public void testInClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/cyclicBounds/inClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InnerClasses {
        @Test
        @TestMetadata("bareTypes.kt")
        public void testBareTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/bareTypes.kt");
        }

        @Test
        @TestMetadata("bareTypesComplex.kt")
        public void testBareTypesComplex() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/bareTypesComplex.kt");
        }

        @Test
        @TestMetadata("castAnElementToInnerClassWithTypeParameter.kt")
        public void testCastAnElementToInnerClassWithTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/castAnElementToInnerClassWithTypeParameter.kt");
        }

        @Test
        @TestMetadata("checkBoundsOuter.kt")
        public void testCheckBoundsOuter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/checkBoundsOuter.kt");
        }

        @Test
        @TestMetadata("importedInner.kt")
        public void testImportedInner() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/importedInner.kt");
        }

        @Test
        @TestMetadata("innerClassGenericBounds.kt")
        public void testInnerClassGenericBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/innerClassGenericBounds.kt");
        }

        @Test
        @TestMetadata("innerTP.kt")
        public void testInnerTP() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/innerTP.kt");
        }

        @Test
        @TestMetadata("innerUncheckedCast.kt")
        public void testInnerUncheckedCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/innerUncheckedCast.kt");
        }

        @Test
        @TestMetadata("innerVariance.kt")
        public void testInnerVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/innerVariance.kt");
        }

        @Test
        @TestMetadata("iterator.kt")
        public void testIterator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/iterator.kt");
        }

        @Test
        @TestMetadata("j+k.kt")
        public void testJ_k() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/j+k.kt");
        }

        @Test
        @TestMetadata("j+k_complex.kt")
        public void testJ_k_complex() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/j+k_complex.kt");
        }

        @Test
        @TestMetadata("outerArgumentsRequired.kt")
        public void testOuterArgumentsRequired() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/outerArgumentsRequired.kt");
        }

        @Test
        @TestMetadata("parameterShadowing.kt")
        public void testParameterShadowing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/parameterShadowing.kt");
        }

        @Test
        @TestMetadata("qualifiedOuter.kt")
        public void testQualifiedOuter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedOuter.kt");
        }

        @Test
        @TestMetadata("qualifiedTypesResolution.kt")
        public void testQualifiedTypesResolution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/qualifiedTypesResolution.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/simple.kt");
        }

        @Test
        @TestMetadata("simpleIn.kt")
        public void testSimpleIn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/simpleIn.kt");
        }

        @Test
        @TestMetadata("simpleOut.kt")
        public void testSimpleOut() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/simpleOut.kt");
        }

        @Test
        @TestMetadata("simpleOutUseSite.kt")
        public void testSimpleOutUseSite() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/simpleOutUseSite.kt");
        }

        @Test
        @TestMetadata("substitutedMemberScope.kt")
        public void testSubstitutedMemberScope() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/substitutedMemberScope.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments")
        @TestDataPath("$PROJECT_ROOT")
        public class ImplicitArguments {
          @Test
          @TestMetadata("fromCompanionObject_after.kt")
          public void testFromCompanionObject_after() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromCompanionObject_after.kt");
          }

          @Test
          @TestMetadata("fromCompanionObject_before.kt")
          public void testFromCompanionObject_before() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromCompanionObject_before.kt");
          }

          @Test
          @TestMetadata("fromSuperClasses.kt")
          public void testFromSuperClasses() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClasses.kt");
          }

          @Test
          @TestMetadata("fromSuperClassesLocal.kt")
          public void testFromSuperClassesLocal() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocal.kt");
          }

          @Test
          @TestMetadata("fromSuperClassesLocalInsideInner.kt")
          public void testFromSuperClassesLocalInsideInner() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesLocalInsideInner.kt");
          }

          @Test
          @TestMetadata("fromSuperClassesTransitive.kt")
          public void testFromSuperClassesTransitive() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/fromSuperClassesTransitive.kt");
          }

          @Test
          @TestMetadata("inStaticScope.kt")
          public void testInStaticScope() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/inStaticScope.kt");
          }

          @Test
          @TestMetadata("runtimeCrashOnInnerWithImplicitInArgument.kt")
          public void testRuntimeCrashOnInnerWithImplicitInArgument() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/runtimeCrashOnInnerWithImplicitInArgument.kt");
          }

          @Test
          @TestMetadata("runtimeCrashOnInnerWithImplicitOutArgument.kt")
          public void testRuntimeCrashOnInnerWithImplicitOutArgument() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/runtimeCrashOnInnerWithImplicitOutArgument.kt");
          }

          @Test
          @TestMetadata("secondLevelDepth.kt")
          public void testSecondLevelDepth() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/innerClasses/implicitArguments/secondLevelDepth.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope")
      @TestDataPath("$PROJECT_ROOT")
      public class MultipleBoundsMemberScope {
        @Test
        @TestMetadata("conflictingReturnType.kt")
        public void testConflictingReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/conflictingReturnType.kt");
        }

        @Test
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/flexibleTypes.kt");
        }

        @Test
        @TestMetadata("mostSpecific.kt")
        public void testMostSpecific() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/mostSpecific.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/properties.kt");
        }

        @Test
        @TestMetadata("propertiesConflict.kt")
        public void testPropertiesConflict() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/propertiesConflict.kt");
        }

        @Test
        @TestMetadata("validTypeParameters.kt")
        public void testValidTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/multipleBoundsMemberScope/validTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/nullability")
      @TestDataPath("$PROJECT_ROOT")
      public class Nullability {
        @Test
        @TestMetadata("considerTypeNotNullOnlyIfItHasNotNullBound.kt")
        public void testConsiderTypeNotNullOnlyIfItHasNotNullBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/considerTypeNotNullOnlyIfItHasNotNullBound.kt");
        }

        @Test
        @TestMetadata("declarationsBoundsViolation.kt")
        public void testDeclarationsBoundsViolation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/declarationsBoundsViolation.kt");
        }

        @Test
        @TestMetadata("expressionsBoundsViolation.kt")
        public void testExpressionsBoundsViolation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/expressionsBoundsViolation.kt");
        }

        @Test
        @TestMetadata("functionalBound.kt")
        public void testFunctionalBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/functionalBound.kt");
        }

        @Test
        @TestMetadata("nullToGeneric.kt")
        public void testNullToGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/nullToGeneric.kt");
        }

        @Test
        @TestMetadata("smartCastRefinedClass.kt")
        public void testSmartCastRefinedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/smartCastRefinedClass.kt");
        }

        @Test
        @TestMetadata("smartCasts.kt")
        public void testSmartCasts() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/smartCasts.kt");
        }

        @Test
        @TestMetadata("smartCastsOnThis.kt")
        public void testSmartCastsOnThis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/smartCastsOnThis.kt");
        }

        @Test
        @TestMetadata("smartCastsValueArgument.kt")
        public void testSmartCastsValueArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/smartCastsValueArgument.kt");
        }

        @Test
        @TestMetadata("tpBoundsViolation.kt")
        public void testTpBoundsViolation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolation.kt");
        }

        @Test
        @TestMetadata("tpBoundsViolationVariance.kt")
        public void testTpBoundsViolationVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/tpBoundsViolationVariance.kt");
        }

        @Test
        @TestMetadata("tpInBounds.kt")
        public void testTpInBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/tpInBounds.kt");
        }

        @Test
        @TestMetadata("useAsReceiver.kt")
        public void testUseAsReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/useAsReceiver.kt");
        }

        @Test
        @TestMetadata("useAsValueArgument.kt")
        public void testUseAsValueArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/nullability/useAsValueArgument.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/projectionsScope")
      @TestDataPath("$PROJECT_ROOT")
      public class ProjectionsScope {
        @Test
        @TestMetadata("addAll.kt")
        public void testAddAll() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/addAll.kt");
        }

        @Test
        @TestMetadata("approximateDispatchReceiver.kt")
        public void testApproximateDispatchReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/approximateDispatchReceiver.kt");
        }

        @Test
        @TestMetadata("extensionReceiverTypeMismatch.kt")
        public void testExtensionReceiverTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/extensionReceiverTypeMismatch.kt");
        }

        @Test
        @TestMetadata("flexibleProjectedScope.kt")
        public void testFlexibleProjectedScope() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/flexibleProjectedScope.kt");
        }

        @Test
        @TestMetadata("inValueParameter.kt")
        public void testInValueParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/inValueParameter.kt");
        }

        @Test
        @TestMetadata("kt7296.kt")
        public void testKt7296() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/kt7296.kt");
        }

        @Test
        @TestMetadata("lambdaArgument.kt")
        public void testLambdaArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/lambdaArgument.kt");
        }

        @Test
        @TestMetadata("leakedApproximatedType.kt")
        public void testLeakedApproximatedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/leakedApproximatedType.kt");
        }

        @Test
        @TestMetadata("MLOut.kt")
        public void testMLOut() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/MLOut.kt");
        }

        @Test
        @TestMetadata("multipleArgumentProjectedOut.kt")
        public void testMultipleArgumentProjectedOut() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/multipleArgumentProjectedOut.kt");
        }

        @Test
        @TestMetadata("platformSuperClass.kt")
        public void testPlatformSuperClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/platformSuperClass.kt");
        }

        @Test
        @TestMetadata("projectedOutConventions.kt")
        public void testProjectedOutConventions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutConventions.kt");
        }

        @Test
        @TestMetadata("projectedOutSmartCast.kt")
        public void testProjectedOutSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/projectedOutSmartCast.kt");
        }

        @Test
        @TestMetadata("recursiveUpperBoundStar.kt")
        public void testRecursiveUpperBoundStar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/recursiveUpperBoundStar.kt");
        }

        @Test
        @TestMetadata("starNullability.kt")
        public void testStarNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/starNullability.kt");
        }

        @Test
        @TestMetadata("starNullabilityRecursive.kt")
        public void testStarNullabilityRecursive() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/starNullabilityRecursive.kt");
        }

        @Test
        @TestMetadata("superClass.kt")
        public void testSuperClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/superClass.kt");
        }

        @Test
        @TestMetadata("typeMismatchConventions.kt")
        public void testTypeMismatchConventions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchConventions.kt");
        }

        @Test
        @TestMetadata("typeMismatchInLambda.kt")
        public void testTypeMismatchInLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/typeMismatchInLambda.kt");
        }

        @Test
        @TestMetadata("typeParameterBounds.kt")
        public void testTypeParameterBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/typeParameterBounds.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/projectionsScope/varargs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/starProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class StarProjections {
        @Test
        @TestMetadata("invalid.kt")
        public void testInvalid() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/starProjections/invalid.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/tpAsReified")
      @TestDataPath("$PROJECT_ROOT")
      public class TpAsReified {
        @Test
        @TestMetadata("CapturedAsReified.kt")
        public void testCapturedAsReified() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/CapturedAsReified.kt");
        }

        @Test
        @TestMetadata("ClassDereference.kt")
        public void testClassDereference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/ClassDereference.kt");
        }

        @Test
        @TestMetadata("Conventions.kt")
        public void testConventions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/Conventions.kt");
        }

        @Test
        @TestMetadata("GenericArrayAsReifiedArgument.kt")
        public void testGenericArrayAsReifiedArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/GenericArrayAsReifiedArgument.kt");
        }

        @Test
        @TestMetadata("InConstructor.kt")
        public void testInConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/InConstructor.kt");
        }

        @Test
        @TestMetadata("InFunction.kt")
        public void testInFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/InFunction.kt");
        }

        @Test
        @TestMetadata("InProperty.kt")
        public void testInProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/InProperty.kt");
        }

        @Test
        @TestMetadata("InType.kt")
        public void testInType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/InType.kt");
        }

        @Test
        @TestMetadata("LocalFun.kt")
        public void testLocalFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/LocalFun.kt");
        }

        @Test
        @TestMetadata("NotInlineableReified.kt")
        public void testNotInlineableReified() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/NotInlineableReified.kt");
        }

        @Test
        @TestMetadata("ReifiedClass.kt")
        public void testReifiedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedClass.kt");
        }

        @Test
        @TestMetadata("ReifiedTypeAliasEnabled.kt")
        public void testReifiedTypeAliasEnabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/tpAsReified/ReifiedTypeAliasEnabled.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/generics/varProjection")
      @TestDataPath("$PROJECT_ROOT")
      public class VarProjection {
        @Test
        @TestMetadata("setterNotProjectedOutAssign.kt")
        public void testSetterNotProjectedOutAssign() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/varProjection/setterNotProjectedOutAssign.kt");
        }

        @Test
        @TestMetadata("setterProjectedOutAssign.kt")
        public void testSetterProjectedOutAssign() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutAssign.kt");
        }

        @Test
        @TestMetadata("setterProjectedOutNoPlusAssign.kt")
        public void testSetterProjectedOutNoPlusAssign() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/generics/varProjection/setterProjectedOutNoPlusAssign.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/imports")
    @TestDataPath("$PROJECT_ROOT")
    public class Imports {
      @Test
      @TestMetadata("AllUnderImportsAmbiguity.kt")
      public void testAllUnderImportsAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/AllUnderImportsAmbiguity.kt");
      }

      @Test
      @TestMetadata("brokenImport.kt")
      public void testBrokenImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/brokenImport.kt");
      }

      @Test
      @TestMetadata("CheckJavaVisibility.kt")
      public void testCheckJavaVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/CheckJavaVisibility.kt");
      }

      @Test
      @TestMetadata("CheckJavaVisibility2.kt")
      public void testCheckJavaVisibility2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/CheckJavaVisibility2.kt");
      }

      @Test
      @TestMetadata("CheckVisibility.kt")
      public void testCheckVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/CheckVisibility.kt");
      }

      @Test
      @TestMetadata("ClassClash.kt")
      public void testClassClash() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ClassClash.kt");
      }

      @Test
      @TestMetadata("ClassClashStarImport.kt")
      public void testClassClashStarImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ClassClashStarImport.kt");
      }

      @Test
      @TestMetadata("ClassImportsConflicting.kt")
      public void testClassImportsConflicting() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ClassImportsConflicting.kt");
      }

      @Test
      @TestMetadata("DoubleImports.kt")
      public void testDoubleImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/DoubleImports.kt");
      }

      @Test
      @TestMetadata("EnumEntryVsStaticAmbiguity.kt")
      public void testEnumEntryVsStaticAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity.kt");
      }

      @Test
      @TestMetadata("EnumEntryVsStaticAmbiguity2.kt")
      public void testEnumEntryVsStaticAmbiguity2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity2.kt");
      }

      @Test
      @TestMetadata("EnumEntryVsStaticAmbiguity3.kt")
      public void testEnumEntryVsStaticAmbiguity3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity3.kt");
      }

      @Test
      @TestMetadata("EnumEntryVsStaticAmbiguity4.kt")
      public void testEnumEntryVsStaticAmbiguity4() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/EnumEntryVsStaticAmbiguity4.kt");
      }

      @Test
      @TestMetadata("ExplicitImportsAmbiguity.kt")
      public void testExplicitImportsAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ExplicitImportsAmbiguity.kt");
      }

      @Test
      @TestMetadata("ExplicitPackageImportsAmbiguity.kt")
      public void testExplicitPackageImportsAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ExplicitPackageImportsAmbiguity.kt");
      }

      @Test
      @TestMetadata("ImportClassClash.kt")
      public void testImportClassClash() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportClassClash.kt");
      }

      @Test
      @TestMetadata("ImportFromCompanionObject.kt")
      public void testImportFromCompanionObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportFromCompanionObject.kt");
      }

      @Test
      @TestMetadata("ImportFromCurrentWithDifferentName.kt")
      public void testImportFromCurrentWithDifferentName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentName.kt");
      }

      @Test
      @TestMetadata("ImportFromCurrentWithDifferentNameComplex.kt")
      public void testImportFromCurrentWithDifferentNameComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportFromCurrentWithDifferentNameComplex.kt");
      }

      @Test
      @TestMetadata("ImportFromObject.kt")
      public void testImportFromObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportFromObject.kt");
      }

      @Test
      @TestMetadata("ImportObjectAndUseAsSupertype.kt")
      public void testImportObjectAndUseAsSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportObjectAndUseAsSupertype.kt");
      }

      @Test
      @TestMetadata("ImportOverloadFunctions.kt")
      public void testImportOverloadFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportOverloadFunctions.kt");
      }

      @Test
      @TestMetadata("ImportPrivateMember.kt")
      public void testImportPrivateMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportPrivateMember.kt");
      }

      @Test
      @TestMetadata("ImportPrivateMemberFromOtherFile.kt")
      public void testImportPrivateMemberFromOtherFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportPrivateMemberFromOtherFile.kt");
      }

      @Test
      @TestMetadata("ImportPrivateMembersWithStar.kt")
      public void testImportPrivateMembersWithStar() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportPrivateMembersWithStar.kt");
      }

      @Test
      @TestMetadata("ImportProtectedClass.kt")
      public void testImportProtectedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/ImportProtectedClass.kt");
      }

      @Test
      @TestMetadata("Imports.kt")
      public void testImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/Imports.kt");
      }

      @Test
      @TestMetadata("InaccessiblePrivateClass.kt")
      public void testInaccessiblePrivateClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/InaccessiblePrivateClass.kt");
      }

      @Test
      @TestMetadata("invisibleFakeReferenceInImport.kt")
      public void testInvisibleFakeReferenceInImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/invisibleFakeReferenceInImport.kt");
      }

      @Test
      @TestMetadata("kt13112.kt")
      public void testKt13112() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/kt13112.kt");
      }

      @Test
      @TestMetadata("MalformedImports.kt")
      public void testMalformedImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/MalformedImports.kt");
      }

      @Test
      @TestMetadata("NestedClassClash.kt")
      public void testNestedClassClash() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/NestedClassClash.kt");
      }

      @Test
      @TestMetadata("OperatorRenameOnImport.kt")
      public void testOperatorRenameOnImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/OperatorRenameOnImport.kt");
      }

      @Test
      @TestMetadata("PackageLocalClassReferencedError.kt")
      public void testPackageLocalClassReferencedError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/PackageLocalClassReferencedError.kt");
      }

      @Test
      @TestMetadata("PrivateClassReferencedError.kt")
      public void testPrivateClassReferencedError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/PrivateClassReferencedError.kt");
      }

      @Test
      @TestMetadata("propertyClassFileDependencyRecursion.kt")
      public void testPropertyClassFileDependencyRecursion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/propertyClassFileDependencyRecursion.kt");
      }

      @Test
      @TestMetadata("RenameOnImport.kt")
      public void testRenameOnImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/RenameOnImport.kt");
      }

      @Test
      @TestMetadata("RootPackageNoImports.kt")
      public void testRootPackageNoImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/RootPackageNoImports.kt");
      }

      @Test
      @TestMetadata("StarImportFromObject.kt")
      public void testStarImportFromObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/StarImportFromObject.kt");
      }

      @Test
      @TestMetadata("SyntaxError.kt")
      public void testSyntaxError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/SyntaxError.kt");
      }

      @Test
      @TestMetadata("twoImportLists.kt")
      public void testTwoImportLists() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/twoImportLists.kt");
      }

      @Test
      @TestMetadata("WrongImport.kt")
      public void testWrongImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/imports/WrongImport.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode")
    @TestDataPath("$PROJECT_ROOT")
    public class IncompleteCode {
      @Test
      @TestMetadata("arrayBracketsRange.kt")
      public void testArrayBracketsRange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/arrayBracketsRange.kt");
      }

      @Test
      @TestMetadata("checkNothingIsSubtype.kt")
      public void testCheckNothingIsSubtype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/checkNothingIsSubtype.kt");
      }

      @Test
      @TestMetadata("controlStructuresErrors.kt")
      public void testControlStructuresErrors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/controlStructuresErrors.kt");
      }

      @Test
      @TestMetadata("illegalSelectorCallableReference.kt")
      public void testIllegalSelectorCallableReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/illegalSelectorCallableReference.kt");
      }

      @Test
      @TestMetadata("inExpr.kt")
      public void testInExpr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/inExpr.kt");
      }

      @Test
      @TestMetadata("incompleteAssignment.kt")
      public void testIncompleteAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/incompleteAssignment.kt");
      }

      @Test
      @TestMetadata("incompleteConstructorCall.kt")
      public void testIncompleteConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/incompleteConstructorCall.kt");
      }

      @Test
      @TestMetadata("incompleteEquals.kt")
      public void testIncompleteEquals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/incompleteEquals.kt");
      }

      @Test
      @TestMetadata("incompleteTryCatchBlock.kt")
      public void testIncompleteTryCatchBlock() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/incompleteTryCatchBlock.kt");
      }

      @Test
      @TestMetadata("kt1955.kt")
      public void testKt1955() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/kt1955.kt");
      }

      @Test
      @TestMetadata("kt2014.kt")
      public void testKt2014() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/kt2014.kt");
      }

      @Test
      @TestMetadata("kt4866UnresolvedArrayAccess.kt")
      public void testKt4866UnresolvedArrayAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/kt4866UnresolvedArrayAccess.kt");
      }

      @Test
      @TestMetadata("kt59041.kt")
      public void testKt59041() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/kt59041.kt");
      }

      @Test
      @TestMetadata("missingNames.kt")
      public void testMissingNames() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/missingNames.kt");
      }

      @Test
      @TestMetadata("NoSenselessComparisonForErrorType.kt")
      public void testNoSenselessComparisonForErrorType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/NoSenselessComparisonForErrorType.kt");
      }

      @Test
      @TestMetadata("plusOnTheRight.kt")
      public void testPlusOnTheRight() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/plusOnTheRight.kt");
      }

      @Test
      @TestMetadata("pseudocodeTraverseNextInstructions.kt")
      public void testPseudocodeTraverseNextInstructions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/pseudocodeTraverseNextInstructions.kt");
      }

      @Test
      @TestMetadata("senselessComparisonWithNull.kt")
      public void testSenselessComparisonWithNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/senselessComparisonWithNull.kt");
      }

      @Test
      @TestMetadata("SupertypeOfErrorType.kt")
      public void testSupertypeOfErrorType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/SupertypeOfErrorType.kt");
      }

      @Test
      @TestMetadata("typeParameterOnLhsOfDot.kt")
      public void testTypeParameterOnLhsOfDot() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/typeParameterOnLhsOfDot.kt");
      }

      @Test
      @TestMetadata("unresolvedArguments.kt")
      public void testUnresolvedArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/unresolvedArguments.kt");
      }

      @Test
      @TestMetadata("unresolvedOperation.kt")
      public void testUnresolvedOperation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/unresolvedOperation.kt");
      }

      @Test
      @TestMetadata("unresolvedTypeWithTypeArguments.kt")
      public void testUnresolvedTypeWithTypeArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/unresolvedTypeWithTypeArguments.kt");
      }

      @Test
      @TestMetadata("variableDeclarationInSelector.kt")
      public void testVariableDeclarationInSelector() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/variableDeclarationInSelector.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError")
      @TestDataPath("$PROJECT_ROOT")
      public class DiagnosticWithSyntaxError {
        @Test
        @TestMetadata("arrayExpression.kt")
        public void testArrayExpression() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/arrayExpression.kt");
        }

        @Test
        @TestMetadata("checkBackingFieldException.kt")
        public void testCheckBackingFieldException() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/checkBackingFieldException.kt");
        }

        @Test
        @TestMetadata("completeFunctionArgumentsOfNestedCalls.kt")
        public void testCompleteFunctionArgumentsOfNestedCalls() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/completeFunctionArgumentsOfNestedCalls.kt");
        }

        @Test
        @TestMetadata("declarationAfterDotSelectorExpected.kt")
        public void testDeclarationAfterDotSelectorExpected() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterDotSelectorExpected.kt");
        }

        @Test
        @TestMetadata("declarationAfterIncompleteElvis.kt")
        public void testDeclarationAfterIncompleteElvis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/declarationAfterIncompleteElvis.kt");
        }

        @Test
        @TestMetadata("funEquals.kt")
        public void testFunEquals() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funEquals.kt");
        }

        @Test
        @TestMetadata("funKeyword.kt")
        public void testFunKeyword() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funKeyword.kt");
        }

        @Test
        @TestMetadata("funcitonTypes.kt")
        public void testFuncitonTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/funcitonTypes.kt");
        }

        @Test
        @TestMetadata("incompleteEnumReference.kt")
        public void testIncompleteEnumReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteEnumReference.kt");
        }

        @Test
        @TestMetadata("incompleteVal.kt")
        public void testIncompleteVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteVal.kt");
        }

        @Test
        @TestMetadata("incompleteValWithAccessor.kt")
        public void testIncompleteValWithAccessor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteValWithAccessor.kt");
        }

        @Test
        @TestMetadata("incompleteWhen.kt")
        public void testIncompleteWhen() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/incompleteWhen.kt");
        }

        @Test
        @TestMetadata("namedFun.kt")
        public void testNamedFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/namedFun.kt");
        }

        @Test
        @TestMetadata("noTypeParamsInReturnType.kt")
        public void testNoTypeParamsInReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/noTypeParamsInReturnType.kt");
        }

        @Test
        @TestMetadata("typeReferenceError.kt")
        public void testTypeReferenceError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/typeReferenceError.kt");
        }

        @Test
        @TestMetadata("valNoName.kt")
        public void testValNoName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valNoName.kt");
        }

        @Test
        @TestMetadata("valWithNoNameBeforeNextDeclarationWithModifiers.kt")
        public void testValWithNoNameBeforeNextDeclarationWithModifiers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameBeforeNextDeclarationWithModifiers.kt");
        }

        @Test
        @TestMetadata("valWithNoNameInBlock.kt")
        public void testValWithNoNameInBlock() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/incompleteCode/diagnosticWithSyntaxError/valWithNoNameInBlock.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("annotatedUnderscoredTypeArgument.kt")
      public void testAnnotatedUnderscoredTypeArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/annotatedUnderscoredTypeArgument.kt");
      }

      @Test
      @TestMetadata("cannotCompleteResolveAmbiguity.kt")
      public void testCannotCompleteResolveAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cannotCompleteResolveAmbiguity.kt");
      }

      @Test
      @TestMetadata("cannotCompleteResolveFunctionLiteralsNoUse.kt")
      public void testCannotCompleteResolveFunctionLiteralsNoUse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cannotCompleteResolveFunctionLiteralsNoUse.kt");
      }

      @Test
      @TestMetadata("cannotCompleteResolveNoInfoForParameter.kt")
      public void testCannotCompleteResolveNoInfoForParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoInfoForParameter.kt");
      }

      @Test
      @TestMetadata("cannotCompleteResolveNoneApplicable.kt")
      public void testCannotCompleteResolveNoneApplicable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cannotCompleteResolveNoneApplicable.kt");
      }

      @Test
      @TestMetadata("cannotCompleteResolveWithFunctionLiterals.kt")
      public void testCannotCompleteResolveWithFunctionLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cannotCompleteResolveWithFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("coerceFunctionLiteralToSuspend.kt")
      public void testCoerceFunctionLiteralToSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coerceFunctionLiteralToSuspend.kt");
      }

      @Test
      @TestMetadata("commonSuperTypeOfErrorTypes.kt")
      public void testCommonSuperTypeOfErrorTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSuperTypeOfErrorTypes.kt");
      }

      @Test
      @TestMetadata("commonSuperTypeOfTypesWithErrorSupertypes.kt")
      public void testCommonSuperTypeOfTypesWithErrorSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSuperTypeOfTypesWithErrorSupertypes.kt");
      }

      @Test
      @TestMetadata("completeInferenceIfManyFailed.kt")
      public void testCompleteInferenceIfManyFailed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completeInferenceIfManyFailed.kt");
      }

      @Test
      @TestMetadata("completionOfMultipleLambdas.kt")
      public void testCompletionOfMultipleLambdas() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completionOfMultipleLambdas.kt");
      }

      @Test
      @TestMetadata("crashWithNestedLambdasRedCode.kt")
      public void testCrashWithNestedLambdasRedCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/crashWithNestedLambdasRedCode.kt");
      }

      @Test
      @TestMetadata("cstFromErrorAndNonErrorTypes.kt")
      public void testCstFromErrorAndNonErrorTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/cstFromErrorAndNonErrorTypes.kt");
      }

      @Test
      @TestMetadata("dependOnExpectedType.kt")
      public void testDependOnExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/dependOnExpectedType.kt");
      }

      @Test
      @TestMetadata("dependantOnVariance.kt")
      public void testDependantOnVariance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/dependantOnVariance.kt");
      }

      @Test
      @TestMetadata("dependantOnVarianceNullable.kt")
      public void testDependantOnVarianceNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/dependantOnVarianceNullable.kt");
      }

      @Test
      @TestMetadata("dontThrowEmptyIntersectionException.kt")
      public void testDontThrowEmptyIntersectionException() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/dontThrowEmptyIntersectionException.kt");
      }

      @Test
      @TestMetadata("errorsOnImplicitInvokeInSimpleCall.kt")
      public void testErrorsOnImplicitInvokeInSimpleCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/errorsOnImplicitInvokeInSimpleCall.kt");
      }

      @Test
      @TestMetadata("expectedTypeAdditionalTest.kt")
      public void testExpectedTypeAdditionalTest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/expectedTypeAdditionalTest.kt");
      }

      @Test
      @TestMetadata("expectedTypeDoubleReceiver.kt")
      public void testExpectedTypeDoubleReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/expectedTypeDoubleReceiver.kt");
      }

      @Test
      @TestMetadata("expectedTypeFromCast.kt")
      public void testExpectedTypeFromCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/expectedTypeFromCast.kt");
      }

      @Test
      @TestMetadata("extensionLambdasAndArrow.kt")
      public void testExtensionLambdasAndArrow() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/extensionLambdasAndArrow.kt");
      }

      @Test
      @TestMetadata("functionPlaceholderError.kt")
      public void testFunctionPlaceholderError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/functionPlaceholderError.kt");
      }

      @Test
      @TestMetadata("genericInvokeInCompanion.kt")
      public void testGenericInvokeInCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/genericInvokeInCompanion.kt");
      }

      @Test
      @TestMetadata("hasErrorInConstrainingTypes.kt")
      public void testHasErrorInConstrainingTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/hasErrorInConstrainingTypes.kt");
      }

      @Test
      @TestMetadata("ifWithDependentBranches.kt")
      public void testIfWithDependentBranches() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/ifWithDependentBranches.kt");
      }

      @Test
      @TestMetadata("illegalUnderscoredTypeArgument.kt")
      public void testIllegalUnderscoredTypeArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/illegalUnderscoredTypeArgument.kt");
      }

      @Test
      @TestMetadata("implicitInvokeExtensionWithFunctionalArgument.kt")
      public void testImplicitInvokeExtensionWithFunctionalArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/implicitInvokeExtensionWithFunctionalArgument.kt");
      }

      @Test
      @TestMetadata("implicitInvokeInCompanionObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInCompanionObjectWithFunctionalArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/implicitInvokeInCompanionObjectWithFunctionalArgument.kt");
      }

      @Test
      @TestMetadata("implicitInvokeInObjectWithFunctionalArgument.kt")
      public void testImplicitInvokeInObjectWithFunctionalArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/implicitInvokeInObjectWithFunctionalArgument.kt");
      }

      @Test
      @TestMetadata("implicitInvokeWithFunctionLiteralArgument.kt")
      public void testImplicitInvokeWithFunctionLiteralArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/implicitInvokeWithFunctionLiteralArgument.kt");
      }

      @Test
      @TestMetadata("invokeLambdaAsFunction.kt")
      public void testInvokeLambdaAsFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/invokeLambdaAsFunction.kt");
      }

      @Test
      @TestMetadata("kt11963.kt")
      public void testKt11963() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt11963.kt");
      }

      @Test
      @TestMetadata("kt12399.kt")
      public void testKt12399() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt12399.kt");
      }

      @Test
      @TestMetadata("kt1293.kt")
      public void testKt1293() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt1293.kt");
      }

      @Test
      @TestMetadata("kt28654.kt")
      public void testKt28654() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt28654.kt");
      }

      @Test
      @TestMetadata("kt30405.kt")
      public void testKt30405() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt30405.kt");
      }

      @Test
      @TestMetadata("kt39220.kt")
      public void testKt39220() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt39220.kt");
      }

      @Test
      @TestMetadata("kt40396.kt")
      public void testKt40396() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt40396.kt");
      }

      @Test
      @TestMetadata("kt46515.kt")
      public void testKt46515() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt46515.kt");
      }

      @Test
      @TestMetadata("kt49658.kt")
      public void testKt49658() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt49658.kt");
      }

      @Test
      @TestMetadata("kt49658Strict.kt")
      public void testKt49658Strict() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt49658Strict.kt");
      }

      @Test
      @TestMetadata("kt49961.kt")
      public void testKt49961() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt49961.kt");
      }

      @Test
      @TestMetadata("kt50232a.kt")
      public void testKt50232a() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt50232a.kt");
      }

      @Test
      @TestMetadata("kt6175.kt")
      public void testKt6175() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt6175.kt");
      }

      @Test
      @TestMetadata("kt63577.kt")
      public void testKt63577() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt63577.kt");
      }

      @Test
      @TestMetadata("kt68570.kt")
      public void testKt68570() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt68570.kt");
      }

      @Test
      @TestMetadata("kt69326.kt")
      public void testKt69326() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/kt69326.kt");
      }

      @Test
      @TestMetadata("lambdaAgainstSimpleTypeMismatch.kt")
      public void testLambdaAgainstSimpleTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/lambdaAgainstSimpleTypeMismatch.kt");
      }

      @Test
      @TestMetadata("lambdaInValInitializerWithAnonymousFunctions.kt")
      public void testLambdaInValInitializerWithAnonymousFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/lambdaInValInitializerWithAnonymousFunctions.kt");
      }

      @Test
      @TestMetadata("listConstructor.kt")
      public void testListConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/listConstructor.kt");
      }

      @Test
      @TestMetadata("mapFunction.kt")
      public void testMapFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/mapFunction.kt");
      }

      @Test
      @TestMetadata("mostSpecificAfterInference.kt")
      public void testMostSpecificAfterInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/mostSpecificAfterInference.kt");
      }

      @Test
      @TestMetadata("nestedIfWithExpectedType.kt")
      public void testNestedIfWithExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nestedIfWithExpectedType.kt");
      }

      @Test
      @TestMetadata("NoInferenceFromDeclaredBounds.kt")
      public void testNoInferenceFromDeclaredBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/NoInferenceFromDeclaredBounds.kt");
      }

      @Test
      @TestMetadata("noInformationForParameter.kt")
      public void testNoInformationForParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/noInformationForParameter.kt");
      }

      @Test
      @TestMetadata("noInformationForStarProjectionCase.kt")
      public void testNoInformationForStarProjectionCase() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/noInformationForStarProjectionCase.kt");
      }

      @Test
      @TestMetadata("nonFunctionalExpectedTypeForLambdaArgument.kt")
      public void testNonFunctionalExpectedTypeForLambdaArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nonFunctionalExpectedTypeForLambdaArgument.kt");
      }

      @Test
      @TestMetadata("nullableArgumentForDnn.kt")
      public void testNullableArgumentForDnn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nullableArgumentForDnn.kt");
      }

      @Test
      @TestMetadata("nullableVsDnnVariationsDisabled.kt")
      public void testNullableVsDnnVariationsDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nullableVsDnnVariationsDisabled.kt");
      }

      @Test
      @TestMetadata("possibleCycleOnConstraints.kt")
      public void testPossibleCycleOnConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/possibleCycleOnConstraints.kt");
      }

      @Test
      @TestMetadata("reportAboutUnresolvedReferenceAsUnresolved.kt")
      public void testReportAboutUnresolvedReferenceAsUnresolved() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportAboutUnresolvedReferenceAsUnresolved.kt");
      }

      @Test
      @TestMetadata("reportNotEnoughTypeInformationErrorsOnBlockExpressions.kt")
      public void testReportNotEnoughTypeInformationErrorsOnBlockExpressions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportNotEnoughTypeInformationErrorsOnBlockExpressions.kt");
      }

      @Test
      @TestMetadata("resolveWithUnknownLambdaParameterType.kt")
      public void testResolveWithUnknownLambdaParameterType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/resolveWithUnknownLambdaParameterType.kt");
      }

      @Test
      @TestMetadata("returningLambdaInSuspendContext.kt")
      public void testReturningLambdaInSuspendContext() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/returningLambdaInSuspendContext.kt");
      }

      @Test
      @TestMetadata("smartCastFork.kt")
      public void testSmartCastFork() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/smartCastFork.kt");
      }

      @Test
      @TestMetadata("specialCallsWithCallableReferences.kt")
      public void testSpecialCallsWithCallableReferences() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/specialCallsWithCallableReferences.kt");
      }

      @Test
      @TestMetadata("tooEagerSmartcast.kt")
      public void testTooEagerSmartcast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/tooEagerSmartcast.kt");
      }

      @Test
      @TestMetadata("typeConstructorMismatch.kt")
      public void testTypeConstructorMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/typeConstructorMismatch.kt");
      }

      @Test
      @TestMetadata("typeInferenceExpectedTypeMismatch.kt")
      public void testTypeInferenceExpectedTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/typeInferenceExpectedTypeMismatch.kt");
      }

      @Test
      @TestMetadata("underscoredTypeArgumentInErroneousCall.kt")
      public void testUnderscoredTypeArgumentInErroneousCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/underscoredTypeArgumentInErroneousCall.kt");
      }

      @Test
      @TestMetadata("underscoredTypeInForbiddenPositions.kt")
      public void testUnderscoredTypeInForbiddenPositions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/underscoredTypeInForbiddenPositions.kt");
      }

      @Test
      @TestMetadata("unsoundness1.kt")
      public void testUnsoundness1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/unsoundness1.kt");
      }

      @Test
      @TestMetadata("violatingUpperBoundForSelfTypeError.kt")
      public void testViolatingUpperBoundForSelfTypeError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/violatingUpperBoundForSelfTypeError.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/callableReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReferences {
        @Test
        @TestMetadata("fromExpectedTypeInLambda.kt")
        public void testFromExpectedTypeInLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/callableReferences/fromExpectedTypeInLambda.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @Test
        @TestMetadata("approximateContravariantCapturedTypes.kt")
        public void testApproximateContravariantCapturedTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/approximateContravariantCapturedTypes.kt");
        }

        @Test
        @TestMetadata("cannotCaptureInProjection.kt")
        public void testCannotCaptureInProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/cannotCaptureInProjection.kt");
        }

        @Test
        @TestMetadata("captureForNullableTypes.kt")
        public void testCaptureForNullableTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/captureForNullableTypes.kt");
        }

        @Test
        @TestMetadata("captureForPlatformTypes.kt")
        public void testCaptureForPlatformTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/captureForPlatformTypes.kt");
        }

        @Test
        @TestMetadata("captureFromNullableTypeVariable.kt")
        public void testCaptureFromNullableTypeVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/captureFromNullableTypeVariable.kt");
        }

        @Test
        @TestMetadata("captureTypeOnlyOnTopLevel.kt")
        public void testCaptureTypeOnlyOnTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/captureTypeOnlyOnTopLevel.kt");
        }

        @Test
        @TestMetadata("capturedAssignment.kt")
        public void testCapturedAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedAssignment.kt");
        }

        @Test
        @TestMetadata("capturedFunctionalType.kt")
        public void testCapturedFunctionalType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedFunctionalType.kt");
        }

        @Test
        @TestMetadata("capturedType.kt")
        public void testCapturedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedType.kt");
        }

        @Test
        @TestMetadata("capturedTypeAndApproximation.kt")
        public void testCapturedTypeAndApproximation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeAndApproximation.kt");
        }

        @Test
        @TestMetadata("capturedTypeSubstitutedIntoOppositeProjection.kt")
        public void testCapturedTypeSubstitutedIntoOppositeProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedTypeSubstitutedIntoOppositeProjection.kt");
        }

        @Test
        @TestMetadata("capturedUpperBound.kt")
        public void testCapturedUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/capturedUpperBound.kt");
        }

        @Test
        @TestMetadata("expectedTypeMismatchWithInVariance.kt")
        public void testExpectedTypeMismatchWithInVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/expectedTypeMismatchWithInVariance.kt");
        }

        @Test
        @TestMetadata("kt2570.kt")
        public void testKt2570() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/kt2570.kt");
        }

        @Test
        @TestMetadata("kt2872.kt")
        public void testKt2872() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/kt2872.kt");
        }

        @Test
        @TestMetadata("kt46727.kt")
        public void testKt46727() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/kt46727.kt");
        }

        @Test
        @TestMetadata("kt46727Warnings.kt")
        public void testKt46727Warnings() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/kt46727Warnings.kt");
        }

        @Test
        @TestMetadata("kt49101.kt")
        public void testKt49101() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/kt49101.kt");
        }

        @Test
        @TestMetadata("memberScopeOfCaptured.kt")
        public void testMemberScopeOfCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/memberScopeOfCaptured.kt");
        }

        @Test
        @TestMetadata("noCaptureTypeErrorForNonTopLevel.kt")
        public void testNoCaptureTypeErrorForNonTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/noCaptureTypeErrorForNonTopLevel.kt");
        }

        @Test
        @TestMetadata("nullableCaptruredTypeAgainstNullableVariable.kt")
        public void testNullableCaptruredTypeAgainstNullableVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/nullableCaptruredTypeAgainstNullableVariable.kt");
        }

        @Test
        @TestMetadata("overApproximationForInCaptured.kt")
        public void testOverApproximationForInCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForInCaptured.kt");
        }

        @Test
        @TestMetadata("overApproximationForOutCaptured.kt")
        public void testOverApproximationForOutCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/overApproximationForOutCaptured.kt");
        }

        @Test
        @TestMetadata("projectedOutTypeMismatch.kt")
        public void testProjectedOutTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/projectedOutTypeMismatch.kt");
        }

        @Test
        @TestMetadata("selfTypeTypeHole.kt")
        public void testSelfTypeTypeHole() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/capturedTypes/selfTypeTypeHole.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/coercionToUnit")
      @TestDataPath("$PROJECT_ROOT")
      public class CoercionToUnit {
        @Test
        @TestMetadata("coercionToUnitForIfAsLastExpressionInLambda.kt")
        public void testCoercionToUnitForIfAsLastExpressionInLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionToUnitForIfAsLastExpressionInLambda.kt");
        }

        @Test
        @TestMetadata("coercionWithExpectedType.kt")
        public void testCoercionWithExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedType.kt");
        }

        @Test
        @TestMetadata("coercionWithExpectedTypeAndBound.kt")
        public void testCoercionWithExpectedTypeAndBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithExpectedTypeAndBound.kt");
        }

        @Test
        @TestMetadata("coercionWithoutExpectedType.kt")
        public void testCoercionWithoutExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/coercionWithoutExpectedType.kt");
        }

        @Test
        @TestMetadata("coersionWithAnonymousFunctionsAndUnresolved.kt")
        public void testCoersionWithAnonymousFunctionsAndUnresolved() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/coersionWithAnonymousFunctionsAndUnresolved.kt");
        }

        @Test
        @TestMetadata("kt30242.kt")
        public void testKt30242() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/kt30242.kt");
        }

        @Test
        @TestMetadata("noCoercion.kt")
        public void testNoCoercion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/coercionToUnit/noCoercion.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/commonSystem")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSystem {
        @Test
        @TestMetadata("cstFromNullableChildAndNonParameterizedType.kt")
        public void testCstFromNullableChildAndNonParameterizedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSystem/cstFromNullableChildAndNonParameterizedType.kt");
        }

        @Test
        @TestMetadata("cstWithTypeContainingNonFixedVariable.kt")
        public void testCstWithTypeContainingNonFixedVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSystem/cstWithTypeContainingNonFixedVariable.kt");
        }

        @Test
        @TestMetadata("kt3372toCollection.kt")
        public void testKt3372toCollection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSystem/kt3372toCollection.kt");
        }

        @Test
        @TestMetadata("nestedLambdas.kt")
        public void testNestedLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSystem/nestedLambdas.kt");
        }

        @Test
        @TestMetadata("theSameFunctionInArgs.kt")
        public void testTheSameFunctionInArgs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/commonSystem/theSameFunctionInArgs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @Test
        @TestMetadata("anonymousFunction.kt")
        public void testAnonymousFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/anonymousFunction.kt");
        }

        @Test
        @TestMetadata("errorAfterCompletion.kt")
        public void testErrorAfterCompletion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/errorAfterCompletion.kt");
        }

        @Test
        @TestMetadata("kt33166.kt")
        public void testKt33166() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/kt33166.kt");
        }

        @Test
        @TestMetadata("lambdaWithVariableAndNothing.kt")
        public void testLambdaWithVariableAndNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/lambdaWithVariableAndNothing.kt");
        }

        @Test
        @TestMetadata("nothingFromNestedCall.kt")
        public void testNothingFromNestedCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/nothingFromNestedCall.kt");
        }

        @Test
        @TestMetadata("withExact.kt")
        public void testWithExact() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/withExact.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @Test
          @TestMetadata("basic.kt")
          public void testBasic() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/basic.kt");
          }

          @Test
          @TestMetadata("notInferableParameterOfAnonymousFunction.kt")
          public void testNotInferableParameterOfAnonymousFunction() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/completion/postponedArgumentsAnalysis/notInferableParameterOfAnonymousFunction.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/constraints")
      @TestDataPath("$PROJECT_ROOT")
      public class Constraints {
        @Test
        @TestMetadata("constraintFromVariantTypeWithNestedProjection.kt")
        public void testConstraintFromVariantTypeWithNestedProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/constraintFromVariantTypeWithNestedProjection.kt");
        }

        @Test
        @TestMetadata("constraintOnFunctionLiteral.kt")
        public void testConstraintOnFunctionLiteral() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/constraintOnFunctionLiteral.kt");
        }

        @Test
        @TestMetadata("definitelyNotNullTypeInArguments.kt")
        public void testDefinitelyNotNullTypeInArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInArguments.kt");
        }

        @Test
        @TestMetadata("definitelyNotNullTypeInArgumentsDisabled.kt")
        public void testDefinitelyNotNullTypeInArgumentsDisabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInArgumentsDisabled.kt");
        }

        @Test
        @TestMetadata("definitelyNotNullTypeInReturnPosition.kt")
        public void testDefinitelyNotNullTypeInReturnPosition() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/definitelyNotNullTypeInReturnPosition.kt");
        }

        @Test
        @TestMetadata("equalityConstraintOnNullableType.kt")
        public void testEqualityConstraintOnNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/equalityConstraintOnNullableType.kt");
        }

        @Test
        @TestMetadata("errorUpperBoundConstraint.kt")
        public void testErrorUpperBoundConstraint() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/errorUpperBoundConstraint.kt");
        }

        @Test
        @TestMetadata("ignoreConstraintFromImplicitInNothing.kt")
        public void testIgnoreConstraintFromImplicitInNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/ignoreConstraintFromImplicitInNothing.kt");
        }

        @Test
        @TestMetadata("kt6320.kt")
        public void testKt6320() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/kt6320.kt");
        }

        @Test
        @TestMetadata("kt8879.kt")
        public void testKt8879() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/kt8879.kt");
        }

        @Test
        @TestMetadata("notNullConstraintOnNullableType.kt")
        public void testNotNullConstraintOnNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/notNullConstraintOnNullableType.kt");
        }

        @Test
        @TestMetadata("subtypeConstraintOnNullableType.kt")
        public void testSubtypeConstraintOnNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/subtypeConstraintOnNullableType.kt");
        }

        @Test
        @TestMetadata("supertypeConstraintOnNullableType.kt")
        public void testSupertypeConstraintOnNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/supertypeConstraintOnNullableType.kt");
        }

        @Test
        @TestMetadata("wrongExpectedTypeForWhen.kt")
        public void testWrongExpectedTypeForWhen() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/constraints/wrongExpectedTypeForWhen.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class EmptyIntersectionTypes {
        @Test
        @TestMetadata("kt45461_25.kt")
        public void testKt45461_25() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt45461_25.kt");
        }

        @Test
        @TestMetadata("kt52393.kt")
        public void testKt52393() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52393.kt");
        }

        @Test
        @TestMetadata("kt52431.kt")
        public void testKt52431() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/emptyIntersectionTypes/kt52431.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/forks")
      @TestDataPath("$PROJECT_ROOT")
      public class Forks {
        @Test
        @TestMetadata("overloadResolutionByLambdaReturnTypeAndExpectedType.kt")
        public void testOverloadResolutionByLambdaReturnTypeAndExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/forks/overloadResolutionByLambdaReturnTypeAndExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @Test
        @TestMetadata("binaryExpressions.kt")
        public void testBinaryExpressions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nestedCalls/binaryExpressions.kt");
        }

        @Test
        @TestMetadata("checkTypesForQualifiedProperties.kt")
        public void testCheckTypesForQualifiedProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nestedCalls/checkTypesForQualifiedProperties.kt");
        }

        @Test
        @TestMetadata("inferenceForNestedBinaryCall.kt")
        public void testInferenceForNestedBinaryCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nestedCalls/inferenceForNestedBinaryCall.kt");
        }

        @Test
        @TestMetadata("kt3461checkTypes.kt")
        public void testKt3461checkTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nestedCalls/kt3461checkTypes.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/nothingType")
      @TestDataPath("$PROJECT_ROOT")
      public class NothingType {
        @Test
        @TestMetadata("discriminateNothingForReifiedParameter.kt")
        public void testDiscriminateNothingForReifiedParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/discriminateNothingForReifiedParameter.kt");
        }

        @Test
        @TestMetadata("implicitInferenceTToFlexibleNothing.kt")
        public void testImplicitInferenceTToFlexibleNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/implicitInferenceTToFlexibleNothing.kt");
        }

        @Test
        @TestMetadata("kt34335.kt")
        public void testKt34335() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/kt34335.kt");
        }

        @Test
        @TestMetadata("notEnoughInformationAndNothing.kt")
        public void testNotEnoughInformationAndNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/notEnoughInformationAndNothing.kt");
        }

        @Test
        @TestMetadata("notEnoughInformationFromNullabilityConstraint.kt")
        public void testNotEnoughInformationFromNullabilityConstraint() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/notEnoughInformationFromNullabilityConstraint.kt");
        }

        @Test
        @TestMetadata("returnAsLastStatementInLambda.kt")
        public void testReturnAsLastStatementInLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/nothingType/returnAsLastStatementInLambda.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/operators")
      @TestDataPath("$PROJECT_ROOT")
      public class Operators {
        @Test
        @TestMetadata("elvisWithExpectedTypeComplex.kt")
        public void testElvisWithExpectedTypeComplex() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/operators/elvisWithExpectedTypeComplex.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla")
      @TestDataPath("$PROJECT_ROOT")
      public class Pcla {
        @Test
        @TestMetadata("assignmentOperatorAmbiguity.kt")
        public void testAssignmentOperatorAmbiguity() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/assignmentOperatorAmbiguity.kt");
        }

        @Test
        @TestMetadata("assignmentPlusOperator.kt")
        public void testAssignmentPlusOperator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/assignmentPlusOperator.kt");
        }

        @Test
        @TestMetadata("bothReceiverAndValueParameterNotFixed.kt")
        public void testBothReceiverAndValueParameterNotFixed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/bothReceiverAndValueParameterNotFixed.kt");
        }

        @Test
        @TestMetadata("builderInferenceAnnotationInLambdaWithTVExpectedType.kt")
        public void testBuilderInferenceAnnotationInLambdaWithTVExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/builderInferenceAnnotationInLambdaWithTVExpectedType.kt");
        }

        @Test
        @TestMetadata("changingResolveIfDontUseBuilderInference.kt")
        public void testChangingResolveIfDontUseBuilderInference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/changingResolveIfDontUseBuilderInference.kt");
        }

        @Test
        @TestMetadata("equalityChecksOnIntegerTypes.kt")
        public void testEqualityChecksOnIntegerTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/equalityChecksOnIntegerTypes.kt");
        }

        @Test
        @TestMetadata("equalityChecksOnIntegerTypesProgressive.kt")
        public void testEqualityChecksOnIntegerTypesProgressive() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/equalityChecksOnIntegerTypesProgressive.kt");
        }

        @Test
        @TestMetadata("fixingDependentVariablesForReceivers.kt")
        public void testFixingDependentVariablesForReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixingDependentVariablesForReceivers.kt");
        }

        @Test
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixingTVForLambadaWithShallowDependencyToOuter.kt");
        }

        @Test
        @TestMetadata("fixingTVForLambadaWithShallowDependencyToOuter2.kt")
        public void testFixingTVForLambadaWithShallowDependencyToOuter2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixingTVForLambadaWithShallowDependencyToOuter2.kt");
        }

        @Test
        @TestMetadata("innerTvFixationFromLowerConstraints.kt")
        public void testInnerTvFixationFromLowerConstraints() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/innerTvFixationFromLowerConstraints.kt");
        }

        @Test
        @TestMetadata("invalidateKeys.kt")
        public void testInvalidateKeys() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/invalidateKeys.kt");
        }

        @Test
        @TestMetadata("lambdaParameterForBareTypeEarlyFixationAffectsBehavior.kt")
        public void testLambdaParameterForBareTypeEarlyFixationAffectsBehavior() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/lambdaParameterForBareTypeEarlyFixationAffectsBehavior.kt");
        }

        @Test
        @TestMetadata("multiLambdaRestriction.kt")
        public void testMultiLambdaRestriction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/multiLambdaRestriction.kt");
        }

        @Test
        @TestMetadata("multiLambdaRestrictionDisabled.kt")
        public void testMultiLambdaRestrictionDisabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/multiLambdaRestrictionDisabled.kt");
        }

        @Test
        @TestMetadata("overloadResolutionByLambdaReturnType.kt")
        public void testOverloadResolutionByLambdaReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/overloadResolutionByLambdaReturnType.kt");
        }

        @Test
        @TestMetadata("overloadResolutionWithTypeVariables.kt")
        public void testOverloadResolutionWithTypeVariables() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/overloadResolutionWithTypeVariables.kt");
        }

        @Test
        @TestMetadata("semifixOuterVariable.kt")
        public void testSemifixOuterVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/semifixOuterVariable.kt");
        }

        @Test
        @TestMetadata("semifixOuterVariableFeatureDisabled.kt")
        public void testSemifixOuterVariableFeatureDisabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/semifixOuterVariableFeatureDisabled.kt");
        }

        @Test
        @TestMetadata("skipedUnresolvedInBuilderInferenceWithStubReceiverType.kt")
        public void testSkipedUnresolvedInBuilderInferenceWithStubReceiverType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/skipedUnresolvedInBuilderInferenceWithStubReceiverType.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferences.kt")
        public void testSpecialCallsWithCallableReferences() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferences.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesDontCareTypeInBlockExression.kt")
        public void testSpecialCallsWithCallableReferencesDontCareTypeInBlockExression() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesDontCareTypeInBlockExression.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesDontRewriteAtSlice.kt")
        public void testSpecialCallsWithCallableReferencesDontRewriteAtSlice() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesDontRewriteAtSlice.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesErrorType.kt")
        public void testSpecialCallsWithCallableReferencesErrorType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesErrorType.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesErrorTypeUnrestricted.kt")
        public void testSpecialCallsWithCallableReferencesErrorTypeUnrestricted() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesErrorTypeUnrestricted.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt")
        public void testSpecialCallsWithCallableReferencesNonStrictOnlyInputTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesNonStrictOnlyInputTypes.kt");
        }

        @Test
        @TestMetadata("specialCallsWithCallableReferencesUnrestricted.kt")
        public void testSpecialCallsWithCallableReferencesUnrestricted() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithCallableReferencesUnrestricted.kt");
        }

        @Test
        @TestMetadata("specialCallsWithLambdas.kt")
        public void testSpecialCallsWithLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/specialCallsWithLambdas.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/constraints")
        @TestDataPath("$PROJECT_ROOT")
        public class Constraints {
          @Test
          @TestMetadata("violating.kt")
          public void testViolating() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/constraints/violating.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/csForks")
        @TestDataPath("$PROJECT_ROOT")
        public class CsForks {
          @Test
          @TestMetadata("relatedToOuter.kt")
          public void testRelatedToOuter() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/csForks/relatedToOuter.kt");
          }

          @Test
          @TestMetadata("simple.kt")
          public void testSimple() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/csForks/simple.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand")
        @TestDataPath("$PROJECT_ROOT")
        public class FixationOnDemand {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables")
          @TestDataPath("$PROJECT_ROOT")
          public class DerivativeTypeVariables {
            @Test
            @TestMetadata("ArgumentForSubtypeOfPCLALambdaTV.kt")
            public void testArgumentForSubtypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/ArgumentForSubtypeOfPCLALambdaTV.kt");
            }

            @Test
            @TestMetadata("ArgumentForSupertypeOfPCLALambdaTV.kt")
            public void testArgumentForSupertypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/ArgumentForSupertypeOfPCLALambdaTV.kt");
            }

            @Test
            @TestMetadata("DeepEquivalent.kt")
            public void testDeepEquivalent() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/DeepEquivalent.kt");
            }

            @Test
            @TestMetadata("DeepSubtypeOfPCLALambdaTV.kt")
            public void testDeepSubtypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/DeepSubtypeOfPCLALambdaTV.kt");
            }

            @Test
            @TestMetadata("DeepSupertypeOfPCLALambdaTV.kt")
            public void testDeepSupertypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/DeepSupertypeOfPCLALambdaTV.kt");
            }

            @Test
            @TestMetadata("PCLALambdaTVAsArgumentForSubtype.kt")
            public void testPCLALambdaTVAsArgumentForSubtype() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/PCLALambdaTVAsArgumentForSubtype.kt");
            }

            @Test
            @TestMetadata("PCLALambdaTVAsArgumentForSupertype.kt")
            public void testPCLALambdaTVAsArgumentForSupertype() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/PCLALambdaTVAsArgumentForSupertype.kt");
            }

            @Test
            @TestMetadata("ShallowEquivalent.kt")
            public void testShallowEquivalent() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/ShallowEquivalent.kt");
            }

            @Test
            @TestMetadata("ShallowSubtypeOfPCLALambdaTV.kt")
            public void testShallowSubtypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/ShallowSubtypeOfPCLALambdaTV.kt");
            }

            @Test
            @TestMetadata("ShallowSupertypeOfPCLALambdaTV.kt")
            public void testShallowSupertypeOfPCLALambdaTV() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/derivativeTypeVariables/ShallowSupertypeOfPCLALambdaTV.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous")
          @TestDataPath("$PROJECT_ROOT")
          public class Miscellaneous {
            @Test
            @TestMetadata("BasicErrors.kt")
            public void testBasicErrors() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/BasicErrors.kt");
            }

            @Test
            @TestMetadata("InnerDeclarationScope.kt")
            public void testInnerDeclarationScope() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/InnerDeclarationScope.kt");
            }

            @Test
            @TestMetadata("NestedDependentPCLACall.kt")
            public void testNestedDependentPCLACall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/NestedDependentPCLACall.kt");
            }

            @Test
            @TestMetadata("NestedIndependentPCLACall.kt")
            public void testNestedIndependentPCLACall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/NestedIndependentPCLACall.kt");
            }

            @Test
            @TestMetadata("PCLACandidateShape.kt")
            public void testPCLACandidateShape() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/miscellaneous/PCLACandidateShape.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation")
          @TestDataPath("$PROJECT_ROOT")
          public class ScopeNavigation {
            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes")
            @TestDataPath("$PROJECT_ROOT")
            public class CompositeTypes {
              @Test
              @TestMetadata("ContravariantTypeVariableCapture.kt")
              public void testContravariantTypeVariableCapture() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/ContravariantTypeVariableCapture.kt");
              }

              @Test
              @TestMetadata("CovariantTypeVariableCapture.kt")
              public void testCovariantTypeVariableCapture() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/CovariantTypeVariableCapture.kt");
              }

              @Test
              @TestMetadata("DefinitelyNonNullTypeVariable.kt")
              public void testDefinitelyNonNullTypeVariable() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/DefinitelyNonNullTypeVariable.kt");
              }

              @Test
              @TestMetadata("FlexibleTypeVariable.kt")
              public void testFlexibleTypeVariable() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/FlexibleTypeVariable.kt");
              }

              @Test
              @TestMetadata("IntersectedTypeVariable.kt")
              public void testIntersectedTypeVariable() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/IntersectedTypeVariable.kt");
              }

              @Test
              @TestMetadata("NullableTypeVariable.kt")
              public void testNullableTypeVariable() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/NullableTypeVariable.kt");
              }

              @Test
              @TestMetadata("TypeVariableStarCapture.kt")
              public void testTypeVariableStarCapture() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/compositeTypes/TypeVariableStarCapture.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner")
            @TestDataPath("$PROJECT_ROOT")
            public class ConcreteScopeOwner {
              @Test
              @TestMetadata("AnyReceiverFunctionCall.kt")
              public void testAnyReceiverFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/AnyReceiverFunctionCall.kt");
              }

              @Test
              @TestMetadata("BasicCallableReference.kt")
              public void testBasicCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/BasicCallableReference.kt");
              }

              @Test
              @TestMetadata("BasicPropertyAccess.kt")
              public void testBasicPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/BasicPropertyAccess.kt");
              }

              @Test
              @TestMetadata("BasicPropertyAssignment.kt")
              public void testBasicPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/BasicPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("ComplexCallableReference.kt")
              public void testComplexCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/ComplexCallableReference.kt");
              }

              @Test
              @TestMetadata("ComplexPropertyAccess.kt")
              public void testComplexPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/ComplexPropertyAccess.kt");
              }

              @Test
              @TestMetadata("ComplexPropertyAssignment.kt")
              public void testComplexPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/ComplexPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("FunctionCall.kt")
              public void testFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/FunctionCall.kt");
              }

              @Test
              @TestMetadata("GenericCallableReference.kt")
              public void testGenericCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/GenericCallableReference.kt");
              }

              @Test
              @TestMetadata("GenericFunctionCall.kt")
              public void testGenericFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/GenericFunctionCall.kt");
              }

              @Test
              @TestMetadata("GenericInnerClassConstructorCall.kt")
              public void testGenericInnerClassConstructorCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/GenericInnerClassConstructorCall.kt");
              }

              @Test
              @TestMetadata("GenericPropertyAccess.kt")
              public void testGenericPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/GenericPropertyAccess.kt");
              }

              @Test
              @TestMetadata("GenericPropertyAssignment.kt")
              public void testGenericPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/GenericPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("InnerClassConstructorCall.kt")
              public void testInnerClassConstructorCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/concreteScopeOwner/InnerClassConstructorCall.kt");
              }
            }

            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner")
            @TestDataPath("$PROJECT_ROOT")
            public class GenericScopeOwner {
              @Test
              @TestMetadata("AnyReceiverFunctionCall.kt")
              public void testAnyReceiverFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/AnyReceiverFunctionCall.kt");
              }

              @Test
              @TestMetadata("BasicCallableReference.kt")
              public void testBasicCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/BasicCallableReference.kt");
              }

              @Test
              @TestMetadata("BasicPropertyAccess.kt")
              public void testBasicPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/BasicPropertyAccess.kt");
              }

              @Test
              @TestMetadata("BasicPropertyAssignment.kt")
              public void testBasicPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/BasicPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("ComplexCallableReference.kt")
              public void testComplexCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/ComplexCallableReference.kt");
              }

              @Test
              @TestMetadata("ComplexPropertyAccess.kt")
              public void testComplexPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/ComplexPropertyAccess.kt");
              }

              @Test
              @TestMetadata("ComplexPropertyAssignment.kt")
              public void testComplexPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/ComplexPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("FunctionCall.kt")
              public void testFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/FunctionCall.kt");
              }

              @Test
              @TestMetadata("GenericCallableReference.kt")
              public void testGenericCallableReference() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/GenericCallableReference.kt");
              }

              @Test
              @TestMetadata("GenericFunctionCall.kt")
              public void testGenericFunctionCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/GenericFunctionCall.kt");
              }

              @Test
              @TestMetadata("GenericInnerClassConstructorCall.kt")
              public void testGenericInnerClassConstructorCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/GenericInnerClassConstructorCall.kt");
              }

              @Test
              @TestMetadata("GenericPropertyAccess.kt")
              public void testGenericPropertyAccess() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/GenericPropertyAccess.kt");
              }

              @Test
              @TestMetadata("GenericPropertyAssignment.kt")
              public void testGenericPropertyAssignment() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/GenericPropertyAssignment.kt");
              }

              @Test
              @TestMetadata("InnerClassConstructorCall.kt")
              public void testInnerClassConstructorCall() {
                runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/scopeNavigation/genericScopeOwner/InnerClassConstructorCall.kt");
              }
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms")
          @TestDataPath("$PROJECT_ROOT")
          public class SyntaxForms {
            @Test
            @TestMetadata("CompareToOperatorCall.kt")
            public void testCompareToOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/CompareToOperatorCall.kt");
            }

            @Test
            @TestMetadata("ContainsOperatorCall.kt")
            public void testContainsOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/ContainsOperatorCall.kt");
            }

            @Test
            @TestMetadata("DestructuringDeclaration.kt")
            public void testDestructuringDeclaration() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/DestructuringDeclaration.kt");
            }

            @Test
            @TestMetadata("ForLoopContainerExpression.kt")
            public void testForLoopContainerExpression() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/ForLoopContainerExpression.kt");
            }

            @Test
            @TestMetadata("IndexingAssignment.kt")
            public void testIndexingAssignment() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/IndexingAssignment.kt");
            }

            @Test
            @TestMetadata("IndexingOperatorCall.kt")
            public void testIndexingOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/IndexingOperatorCall.kt");
            }

            @Test
            @TestMetadata("IndexingPlusAssignOperatorCall.kt")
            public void testIndexingPlusAssignOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/IndexingPlusAssignOperatorCall.kt");
            }

            @Test
            @TestMetadata("IndexingPlusOperatorAssignment.kt")
            public void testIndexingPlusOperatorAssignment() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/IndexingPlusOperatorAssignment.kt");
            }

            @Test
            @TestMetadata("InfixFunctionCall.kt")
            public void testInfixFunctionCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/InfixFunctionCall.kt");
            }

            @Test
            @TestMetadata("InvokeOperatorCall.kt")
            public void testInvokeOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/InvokeOperatorCall.kt");
            }

            @Test
            @TestMetadata("LogicalNotOperatorCall.kt")
            public void testLogicalNotOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/LogicalNotOperatorCall.kt");
            }

            @Test
            @TestMetadata("PlusAssignOperatorCall.kt")
            public void testPlusAssignOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/PlusAssignOperatorCall.kt");
            }

            @Test
            @TestMetadata("PlusOperatorAssignment.kt")
            public void testPlusOperatorAssignment() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/PlusOperatorAssignment.kt");
            }

            @Test
            @TestMetadata("PlusOperatorCall.kt")
            public void testPlusOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/PlusOperatorCall.kt");
            }

            @Test
            @TestMetadata("PostfixIncrementOperatorCall.kt")
            public void testPostfixIncrementOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/PostfixIncrementOperatorCall.kt");
            }

            @Test
            @TestMetadata("PrefixIncrementOperatorCall.kt")
            public void testPrefixIncrementOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/PrefixIncrementOperatorCall.kt");
            }

            @Test
            @TestMetadata("RangeOperatorCall.kt")
            public void testRangeOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/RangeOperatorCall.kt");
            }

            @Test
            @TestMetadata("TypeCastExpression.kt")
            public void testTypeCastExpression() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/TypeCastExpression.kt");
            }

            @Test
            @TestMetadata("TypeCheckExpression.kt")
            public void testTypeCheckExpression() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/TypeCheckExpression.kt");
            }

            @Test
            @TestMetadata("UnarySignOperatorCall.kt")
            public void testUnarySignOperatorCall() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/UnarySignOperatorCall.kt");
            }

            @Test
            @TestMetadata("WhenExpression.kt")
            public void testWhenExpression() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/fixationOnDemand/syntaxForms/WhenExpression.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement")
        @TestDataPath("$PROJECT_ROOT")
        public class ForceLambdaCompletionFromReturnStatement {
          @Test
          @TestMetadata("differentBehaviorWhenSpecifiedArgument.kt")
          public void testDifferentBehaviorWhenSpecifiedArgument() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/differentBehaviorWhenSpecifiedArgument.kt");
          }

          @Test
          @TestMetadata("differentBehaviorWhenSpecifiedArgument20.kt")
          public void testDifferentBehaviorWhenSpecifiedArgument20() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/differentBehaviorWhenSpecifiedArgument20.kt");
          }

          @Test
          @TestMetadata("earlyReturn.kt")
          public void testEarlyReturn() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/earlyReturn.kt");
          }

          @Test
          @TestMetadata("multiLambdas.kt")
          public void testMultiLambdas() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/forceLambdaCompletionFromReturnStatement/multiLambdas.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/issues")
        @TestDataPath("$PROJECT_ROOT")
        public class Issues {
          @Test
          @TestMetadata("kt43710b.kt")
          public void testKt43710b() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt43710b.kt");
          }

          @Test
          @TestMetadata("kt47986Default.kt")
          public void testKt47986Default() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986Default.kt");
          }

          @Test
          @TestMetadata("kt47986Disabled.kt")
          public void testKt47986Disabled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986Disabled.kt");
          }

          @Test
          @TestMetadata("kt47986Enabled.kt")
          public void testKt47986Enabled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986Enabled.kt");
          }

          @Test
          @TestMetadata("kt47986_2.kt")
          public void testKt47986_2() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986_2.kt");
          }

          @Test
          @TestMetadata("kt47986_3.kt")
          public void testKt47986_3() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986_3.kt");
          }

          @Test
          @TestMetadata("kt47986_4.kt")
          public void testKt47986_4() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47986_4.kt");
          }

          @Test
          @TestMetadata("kt47989a.kt")
          public void testKt47989a() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47989a.kt");
          }

          @Test
          @TestMetadata("kt47989b.kt")
          public void testKt47989b() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt47989b.kt");
          }

          @Test
          @TestMetadata("kt49263.kt")
          public void testKt49263() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt49263.kt");
          }

          @Test
          @TestMetadata("kt49828.kt")
          public void testKt49828() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt49828.kt");
          }

          @Test
          @TestMetadata("kt50498.kt")
          public void testKt50498() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt50498.kt");
          }

          @Test
          @TestMetadata("kt50827.kt")
          public void testKt50827() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt50827.kt");
          }

          @Test
          @TestMetadata("kt50989.kt")
          public void testKt50989() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt50989.kt");
          }

          @Test
          @TestMetadata("kt51148.kt")
          public void testKt51148() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt51148.kt");
          }

          @Test
          @TestMetadata("kt51464.kt")
          public void testKt51464() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt51464.kt");
          }

          @Test
          @TestMetadata("kt52838a.kt")
          public void testKt52838a() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt52838a.kt");
          }

          @Test
          @TestMetadata("kt52838b.kt")
          public void testKt52838b() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt52838b.kt");
          }

          @Test
          @TestMetadata("kt52838c.kt")
          public void testKt52838c() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt52838c.kt");
          }

          @Test
          @TestMetadata("kt53422.kt")
          public void testKt53422() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt53422.kt");
          }

          @Test
          @TestMetadata("kt53422b.kt")
          public void testKt53422b() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt53422b.kt");
          }

          @Test
          @TestMetadata("kt53740a.kt")
          public void testKt53740a() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt53740a.kt");
          }

          @Test
          @TestMetadata("kt53740b.kt")
          public void testKt53740b() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt53740b.kt");
          }

          @Test
          @TestMetadata("kt54664.kt")
          public void testKt54664() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt54664.kt");
          }

          @Test
          @TestMetadata("kt55056.kt")
          public void testKt55056() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt55056.kt");
          }

          @Test
          @TestMetadata("kt55281.kt")
          public void testKt55281() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt55281.kt");
          }

          @Test
          @TestMetadata("kt56949.kt")
          public void testKt56949() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt56949.kt");
          }

          @Test
          @TestMetadata("kt59426.kt")
          public void testKt59426() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt59426.kt");
          }

          @Test
          @TestMetadata("kt63648.kt")
          public void testKt63648() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt63648.kt");
          }

          @Test
          @TestMetadata("kt63841.kt")
          public void testKt63841() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt63841.kt");
          }

          @Test
          @TestMetadata("kt64077.kt")
          public void testKt64077() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/issues/kt64077.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter")
        @TestDataPath("$PROJECT_ROOT")
        public class OneParameter {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable")
          @TestDataPath("$PROJECT_ROOT")
          public class OneTypeVariable {
            @Nested
            @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin")
            @TestDataPath("$PROJECT_ROOT")
            public class OneTypeInfoOrigin {
              @Nested
              @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes")
              @TestDataPath("$PROJECT_ROOT")
              public class TargetTypes {
                @Test
                @TestMetadata("FunctionWithParameterToUnitImplicitLiteralsCase.kt")
                public void testFunctionWithParameterToUnitImplicitLiteralsCase() {
                  runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithParameterToUnitImplicitLiteralsCase.kt");
                }

                @Test
                @TestMetadata("FunctionWithReceiverToUnitImplicitLiteralsCase.kt")
                public void testFunctionWithReceiverToUnitImplicitLiteralsCase() {
                  runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/oneParameter/oneTypeVariable/oneTypeInfoOrigin/targetTypes/FunctionWithReceiverToUnitImplicitLiteralsCase.kt");
                }
              }
            }
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/regresssions")
        @TestDataPath("$PROJECT_ROOT")
        public class Regresssions {
          @Test
          @TestMetadata("exponentialErrorsInCS.kt")
          public void testExponentialErrorsInCS() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/regresssions/exponentialErrorsInCS.kt");
          }

          @Test
          @TestMetadata("exponentialErrorsInCSInitial.kt")
          public void testExponentialErrorsInCSInitial() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/regresssions/exponentialErrorsInCSInitial.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/pcla/stubTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class StubTypes {
          @Test
          @TestMetadata("capturedTypes.kt")
          public void testCapturedTypes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/capturedTypes.kt");
          }

          @Test
          @TestMetadata("capturedTypesId.kt")
          public void testCapturedTypesId() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/capturedTypesId.kt");
          }

          @Test
          @TestMetadata("commonSuperTypeInvariant.kt")
          public void testCommonSuperTypeInvariant() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/commonSuperTypeInvariant.kt");
          }

          @Test
          @TestMetadata("memberScope.kt")
          public void testMemberScope() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/memberScope.kt");
          }

          @Test
          @TestMetadata("stubTypeReceiverRestriction.kt")
          public void testStubTypeReceiverRestriction() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/stubTypeReceiverRestriction.kt");
          }

          @Test
          @TestMetadata("stubTypeReceiverRestrictionDisabled.kt")
          public void testStubTypeReceiverRestrictionDisabled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/pcla/stubTypes/stubTypeReceiverRestrictionDisabled.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/publicApproximation")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicApproximation {
        @Test
        @TestMetadata("chainedLambdas.kt")
        public void testChainedLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/publicApproximation/chainedLambdas.kt");
        }

        @Test
        @TestMetadata("intersectionAfterSmartCastInLambdaReturn.kt")
        public void testIntersectionAfterSmartCastInLambdaReturn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionAfterSmartCastInLambdaReturn.kt");
        }

        @Test
        @TestMetadata("intersectionLocations.kt")
        public void testIntersectionLocations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/publicApproximation/intersectionLocations.kt");
        }

        @Test
        @TestMetadata("smartCastInLambdaReturnAfterIntersection.kt")
        public void testSmartCastInLambdaReturnAfterIntersection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/publicApproximation/smartCastInLambdaReturnAfterIntersection.kt");
        }

        @Test
        @TestMetadata("twoIntersections.kt")
        public void testTwoIntersections() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/publicApproximation/twoIntersections.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveCalls {
        @Test
        @TestMetadata("kt23531.kt")
        public void testKt23531() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveCalls/kt23531.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveLocalFuns")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveLocalFuns {
        @Test
        @TestMetadata("localFactorial.kt")
        public void testLocalFactorial() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/localFactorial.kt");
        }

        @Test
        @TestMetadata("recursiveFun.kt")
        public void testRecursiveFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveFun.kt");
        }

        @Test
        @TestMetadata("recursiveLambda.kt")
        public void testRecursiveLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/recursiveLambda.kt");
        }

        @Test
        @TestMetadata("selfCall.kt")
        public void testSelfCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveLocalFuns/selfCall.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RecursiveTypes {
        @Test
        @TestMetadata("kt61717.kt")
        public void testKt61717() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveTypes/kt61717.kt");
        }

        @Test
        @TestMetadata("starProjectionOfRecursiveTypeParameterAsReifiedTypeArgument.kt")
        public void testStarProjectionOfRecursiveTypeParameterAsReifiedTypeArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveTypes/starProjectionOfRecursiveTypeParameterAsReifiedTypeArgument.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes")
        @TestDataPath("$PROJECT_ROOT")
        public class SelfTypes {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes")
          @TestDataPath("$PROJECT_ROOT")
          public class DisabledInferenceOnSelfTypes {
            @Test
            @TestMetadata("basicInferenceForImplicitSelfType.kt")
            public void testBasicInferenceForImplicitSelfType() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/basicInferenceForImplicitSelfType.kt");
            }

            @Test
            @TestMetadata("recursiveTypeWithTwoTypeParams.kt")
            public void testRecursiveTypeWithTwoTypeParams() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/recursiveTypeWithTwoTypeParams.kt");
            }

            @Test
            @TestMetadata("writerAppenderExampleRecursive.kt")
            public void testWriterAppenderExampleRecursive() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/recursiveTypes/selfTypes/disabledInferenceOnSelfTypes/writerAppenderExampleRecursive.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/regressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Regressions {
        @Test
        @TestMetadata("classSubstitutedWithOwnFunctionTypeParameter.kt")
        public void testClassSubstitutedWithOwnFunctionTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/classSubstitutedWithOwnFunctionTypeParameter.kt");
        }

        @Test
        @TestMetadata("functionalSuperTypeOfIntersectionType.kt")
        public void testFunctionalSuperTypeOfIntersectionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/functionalSuperTypeOfIntersectionType.kt");
        }

        @Test
        @TestMetadata("kt1029.kt")
        public void testKt1029() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1029.kt");
        }

        @Test
        @TestMetadata("kt1031.kt")
        public void testKt1031() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1031.kt");
        }

        @Test
        @TestMetadata("kt1127.kt")
        public void testKt1127() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1127.kt");
        }

        @Test
        @TestMetadata("kt1145.kt")
        public void testKt1145() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1145.kt");
        }

        @Test
        @TestMetadata("kt1410.kt")
        public void testKt1410() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1410.kt");
        }

        @Test
        @TestMetadata("kt1718.kt")
        public void testKt1718() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1718.kt");
        }

        @Test
        @TestMetadata("kt1944.kt")
        public void testKt1944() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt1944.kt");
        }

        @Test
        @TestMetadata("kt2057.kt")
        public void testKt2057() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2057.kt");
        }

        @Test
        @TestMetadata("kt2179.kt")
        public void testKt2179() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2179.kt");
        }

        @Test
        @TestMetadata("kt2200.kt")
        public void testKt2200() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2200.kt");
        }

        @Test
        @TestMetadata("kt2283.kt")
        public void testKt2283() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2283.kt");
        }

        @Test
        @TestMetadata("kt2286.kt")
        public void testKt2286() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2286.kt");
        }

        @Test
        @TestMetadata("kt2294.kt")
        public void testKt2294() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2294.kt");
        }

        @Test
        @TestMetadata("kt2324.kt")
        public void testKt2324() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2324.kt");
        }

        @Test
        @TestMetadata("kt2407.kt")
        public void testKt2407() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2407.kt");
        }

        @Test
        @TestMetadata("kt2445.kt")
        public void testKt2445() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2445.kt");
        }

        @Test
        @TestMetadata("kt2459.kt")
        public void testKt2459() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2459.kt");
        }

        @Test
        @TestMetadata("kt2505.kt")
        public void testKt2505() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2505.kt");
        }

        @Test
        @TestMetadata("kt2741.kt")
        public void testKt2741() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2741.kt");
        }

        @Test
        @TestMetadata("kt2754.kt")
        public void testKt2754() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2754.kt");
        }

        @Test
        @TestMetadata("kt2838.kt")
        public void testKt2838() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2838.kt");
        }

        @Test
        @TestMetadata("kt2841.kt")
        public void testKt2841() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2841.kt");
        }

        @Test
        @TestMetadata("kt2841_it.kt")
        public void testKt2841_it() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2841_it.kt");
        }

        @Test
        @TestMetadata("kt2841_it_this.kt")
        public void testKt2841_it_this() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2841_it_this.kt");
        }

        @Test
        @TestMetadata("kt2841_this.kt")
        public void testKt2841_this() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2841_this.kt");
        }

        @Test
        @TestMetadata("kt2842.kt")
        public void testKt2842() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2842.kt");
        }

        @Test
        @TestMetadata("kt2883.kt")
        public void testKt2883() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt2883.kt");
        }

        @Test
        @TestMetadata("kt3007.kt")
        public void testKt3007() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt3007.kt");
        }

        @Test
        @TestMetadata("kt32862_both.kt")
        public void testKt32862_both() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt32862_both.kt");
        }

        @Test
        @TestMetadata("kt32862_none.kt")
        public void testKt32862_none() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt32862_none.kt");
        }

        @Test
        @TestMetadata("kt3301.kt")
        public void testKt3301() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt3301.kt");
        }

        @Test
        @TestMetadata("kt33629.kt")
        public void testKt33629() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt33629.kt");
        }

        @Test
        @TestMetadata("kt34029.kt")
        public void testKt34029() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt34029.kt");
        }

        @Test
        @TestMetadata("kt34282.kt")
        public void testKt34282() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt34282.kt");
        }

        @Test
        @TestMetadata("kt3496_2.kt")
        public void testKt3496_2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt3496_2.kt");
        }

        @Test
        @TestMetadata("kt35943.kt")
        public void testKt35943() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt35943.kt");
        }

        @Test
        @TestMetadata("kt36342.kt")
        public void testKt36342() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt36342.kt");
        }

        @Test
        @TestMetadata("kt36342_2.kt")
        public void testKt36342_2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt36342_2.kt");
        }

        @Test
        @TestMetadata("kt4420.kt")
        public void testKt4420() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt4420.kt");
        }

        @Test
        @TestMetadata("kt702.kt")
        public void testKt702() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt702.kt");
        }

        @Test
        @TestMetadata("kt731.kt")
        public void testKt731() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt731.kt");
        }

        @Test
        @TestMetadata("kt742.kt")
        public void testKt742() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt742.kt");
        }

        @Test
        @TestMetadata("kt832.kt")
        public void testKt832() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt832.kt");
        }

        @Test
        @TestMetadata("kt943.kt")
        public void testKt943() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt943.kt");
        }

        @Test
        @TestMetadata("kt948.kt")
        public void testKt948() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/kt948.kt");
        }

        @Test
        @TestMetadata("noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt")
        public void testNoRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/regressions/noRecursionOnCallingPureKotlinFunctionAsSyntheticJavaAccessor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/reified")
      @TestDataPath("$PROJECT_ROOT")
      public class Reified {
        @Test
        @TestMetadata("ReifiedIntersectionError.kt")
        public void testReifiedIntersectionError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reified/ReifiedIntersectionError.kt");
        }

        @Test
        @TestMetadata("ReifiedIntersectionWarning.kt")
        public void testReifiedIntersectionWarning() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reified/ReifiedIntersectionWarning.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/reportingImprovements")
      @TestDataPath("$PROJECT_ROOT")
      public class ReportingImprovements {
        @Test
        @TestMetadata("cannotInferParameterTypeWithInference.kt")
        public void testCannotInferParameterTypeWithInference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/cannotInferParameterTypeWithInference.kt");
        }

        @Test
        @TestMetadata("ErrorTypeAsGenericParameter.kt")
        public void testErrorTypeAsGenericParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/ErrorTypeAsGenericParameter.kt");
        }

        @Test
        @TestMetadata("FunctionPlaceholder.kt")
        public void testFunctionPlaceholder() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/FunctionPlaceholder.kt");
        }

        @Test
        @TestMetadata("inferTypeFromUnresolvedArgument.kt")
        public void testInferTypeFromUnresolvedArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/inferTypeFromUnresolvedArgument.kt");
        }

        @Test
        @TestMetadata("kt42620.kt")
        public void testKt42620() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/kt42620.kt");
        }

        @Test
        @TestMetadata("multipleDiagnosticsInOneCallChain.kt")
        public void testMultipleDiagnosticsInOneCallChain() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/multipleDiagnosticsInOneCallChain.kt");
        }

        @Test
        @TestMetadata("NoAmbiguityForDifferentFunctionTypes.kt")
        public void testNoAmbiguityForDifferentFunctionTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/NoAmbiguityForDifferentFunctionTypes.kt");
        }

        @Test
        @TestMetadata("reportUnresolvedReferenceWrongReceiverForManyCandidates.kt")
        public void testReportUnresolvedReferenceWrongReceiverForManyCandidates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/reportUnresolvedReferenceWrongReceiverForManyCandidates.kt");
        }

        @Test
        @TestMetadata("subtypeForInvariantWithErrorGenerics.kt")
        public void testSubtypeForInvariantWithErrorGenerics() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/subtypeForInvariantWithErrorGenerics.kt");
        }

        @Test
        @TestMetadata("typeInferenceFailedOnComponentN.kt")
        public void testTypeInferenceFailedOnComponentN() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnComponentN.kt");
        }

        @Test
        @TestMetadata("typeInferenceFailedOnIteratorCall.kt")
        public void testTypeInferenceFailedOnIteratorCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/typeInferenceFailedOnIteratorCall.kt");
        }

        @Test
        @TestMetadata("wrongArgumentExtensionFunction.kt")
        public void testWrongArgumentExtensionFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentExtensionFunction.kt");
        }

        @Test
        @TestMetadata("wrongArgumentPassedToLocalExtensionFunction.kt")
        public void testWrongArgumentPassedToLocalExtensionFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/reportingImprovements/wrongArgumentPassedToLocalExtensionFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/substitutions")
      @TestDataPath("$PROJECT_ROOT")
      public class Substitutions {
        @Test
        @TestMetadata("hideFlexibleLocalTypeInPublicPosition.kt")
        public void testHideFlexibleLocalTypeInPublicPosition() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/hideFlexibleLocalTypeInPublicPosition.kt");
        }

        @Test
        @TestMetadata("hideFlexibleLocalTypeInPublicPosition_before.kt")
        public void testHideFlexibleLocalTypeInPublicPosition_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/hideFlexibleLocalTypeInPublicPosition_before.kt");
        }

        @Test
        @TestMetadata("hideLocalTypeForReturnTypeOfSingleExpressionFunction.kt")
        public void testHideLocalTypeForReturnTypeOfSingleExpressionFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/hideLocalTypeForReturnTypeOfSingleExpressionFunction.kt");
        }

        @Test
        @TestMetadata("hideNullableLocalTypeInPublicPosition.kt")
        public void testHideNullableLocalTypeInPublicPosition() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/hideNullableLocalTypeInPublicPosition.kt");
        }

        @Test
        @TestMetadata("hideNullableLocalTypeInPublicPosition_before.kt")
        public void testHideNullableLocalTypeInPublicPosition_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/hideNullableLocalTypeInPublicPosition_before.kt");
        }

        @Test
        @TestMetadata("simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt")
        public void testSimpleSubstitutionCheckTypeArgumentsNotTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/simpleSubstitutionCheckTypeArgumentsNotTypeParameters.kt");
        }

        @Test
        @TestMetadata("substitutionIntoAnonymousClass.kt")
        public void testSubstitutionIntoAnonymousClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoAnonymousClass.kt");
        }

        @Test
        @TestMetadata("substitutionIntoInnerClass.kt")
        public void testSubstitutionIntoInnerClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/substitutions/substitutionIntoInnerClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inference/upperBounds")
      @TestDataPath("$PROJECT_ROOT")
      public class UpperBounds {
        @Test
        @TestMetadata("conflictingSubstitutionsFromUpperBound.kt")
        public void testConflictingSubstitutionsFromUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/conflictingSubstitutionsFromUpperBound.kt");
        }

        @Test
        @TestMetadata("doNotInferFromBoundsOnly.kt")
        public void testDoNotInferFromBoundsOnly() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/doNotInferFromBoundsOnly.kt");
        }

        @Test
        @TestMetadata("flexibilityInCommonSuperTypeCalculation.kt")
        public void testFlexibilityInCommonSuperTypeCalculation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/flexibilityInCommonSuperTypeCalculation.kt");
        }

        @Test
        @TestMetadata("flexibilityInCommonSuperTypeCalculation.ni.kt")
        public void testFlexibilityInCommonSuperTypeCalculation_ni() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/flexibilityInCommonSuperTypeCalculation.ni.kt");
        }

        @Test
        @TestMetadata("inferringVariableByMaterializeAndUpperBound.kt")
        public void testInferringVariableByMaterializeAndUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/inferringVariableByMaterializeAndUpperBound.kt");
        }

        @Test
        @TestMetadata("intersectUpperBounds.kt")
        public void testIntersectUpperBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/intersectUpperBounds.kt");
        }

        @Test
        @TestMetadata("typeParameterAsUpperBound.kt")
        public void testTypeParameterAsUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/typeParameterAsUpperBound.kt");
        }

        @Test
        @TestMetadata("useBoundsIfUnknownParameters.kt")
        public void testUseBoundsIfUnknownParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsIfUnknownParameters.kt");
        }

        @Test
        @TestMetadata("useBoundsToInferTypeParamsSimple.kt")
        public void testUseBoundsToInferTypeParamsSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inference/upperBounds/useBoundsToInferTypeParamsSimple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/infos")
    @TestDataPath("$PROJECT_ROOT")
    public class Infos {
      @Test
      @TestMetadata("PropertiesWithBackingFields.kt")
      public void testPropertiesWithBackingFields() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/infos/PropertiesWithBackingFields.kt");
      }

      @Test
      @TestMetadata("SmartCasts.kt")
      public void testSmartCasts() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/infos/SmartCasts.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @Test
      @TestMetadata("anonymousObjects.kt")
      public void testAnonymousObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/anonymousObjects.kt");
      }

      @Test
      @TestMetadata("approximateReturnedAnonymousObjects.kt")
      public void testApproximateReturnedAnonymousObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/approximateReturnedAnonymousObjects.kt");
      }

      @Test
      @TestMetadata("assignment.kt")
      public void testAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/assignment.kt");
      }

      @Test
      @TestMetadata("capture.kt")
      public void testCapture() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/capture.kt");
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/constructor.kt");
      }

      @Test
      @TestMetadata("defaultLambdaInlineSuspend.kt")
      public void testDefaultLambdaInlineSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/defaultLambdaInlineSuspend.kt");
      }

      @Test
      @TestMetadata("defaultLambdaInlining.kt")
      public void testDefaultLambdaInlining() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/defaultLambdaInlining.kt");
      }

      @Test
      @TestMetadata("extensionOnFunction.kt")
      public void testExtensionOnFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/extensionOnFunction.kt");
      }

      @Test
      @TestMetadata("forbidExtensionCallsOnInlineFunctionalParameters_after.kt")
      public void testForbidExtensionCallsOnInlineFunctionalParameters_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/forbidExtensionCallsOnInlineFunctionalParameters_after.kt");
      }

      @Test
      @TestMetadata("forbidExtensionCallsOnInlineFunctionalParameters_before.kt")
      public void testForbidExtensionCallsOnInlineFunctionalParameters_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/forbidExtensionCallsOnInlineFunctionalParameters_before.kt");
      }

      @Test
      @TestMetadata("fromInlineToNoInline.kt")
      public void testFromInlineToNoInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/fromInlineToNoInline.kt");
      }

      @Test
      @TestMetadata("functions.kt")
      public void testFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/functions.kt");
      }

      @Test
      @TestMetadata("inlineCallsPrivateInline.kt")
      public void testInlineCallsPrivateInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/inlineCallsPrivateInline.kt");
      }

      @Test
      @TestMetadata("inlineCallsStaticMethod.kt")
      public void testInlineCallsStaticMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/inlineCallsStaticMethod.kt");
      }

      @Test
      @TestMetadata("inlineCallsStaticMethodFromOtherPackage.kt")
      public void testInlineCallsStaticMethodFromOtherPackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/inlineCallsStaticMethodFromOtherPackage.kt");
      }

      @Test
      @TestMetadata("inlineLambdaInDefaultInlineParameter.kt")
      public void testInlineLambdaInDefaultInlineParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/inlineLambdaInDefaultInlineParameter.kt");
      }

      @Test
      @TestMetadata("invoke.kt")
      public void testInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/invoke.kt");
      }

      @Test
      @TestMetadata("isCheck.kt")
      public void testIsCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/isCheck.kt");
      }

      @Test
      @TestMetadata("kt15410.kt")
      public void testKt15410() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/kt15410.kt");
      }

      @Test
      @TestMetadata("kt19679.kt")
      public void testKt19679() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/kt19679.kt");
      }

      @Test
      @TestMetadata("kt21177.kt")
      public void testKt21177() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/kt21177.kt");
      }

      @Test
      @TestMetadata("kt21177Warning.kt")
      public void testKt21177Warning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/kt21177Warning.kt");
      }

      @Test
      @TestMetadata("kt4869.kt")
      public void testKt4869() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/kt4869.kt");
      }

      @Test
      @TestMetadata("labeled.kt")
      public void testLabeled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/labeled.kt");
      }

      @Test
      @TestMetadata("labelsAndNonInlineUsage.kt")
      public void testLabelsAndNonInlineUsage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/labelsAndNonInlineUsage.kt");
      }

      @Test
      @TestMetadata("lambdaCast.kt")
      public void testLambdaCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/lambdaCast.kt");
      }

      @Test
      @TestMetadata("localFun.kt")
      public void testLocalFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/localFun.kt");
      }

      @Test
      @TestMetadata("messagesForUnsupportedInInline.kt")
      public void testMessagesForUnsupportedInInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/messagesForUnsupportedInInline.kt");
      }

      @Test
      @TestMetadata("nonVirtualMembersWithInline.kt")
      public void testNonVirtualMembersWithInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonVirtualMembersWithInline.kt");
      }

      @Test
      @TestMetadata("notInlinableWithLabel.kt")
      public void testNotInlinableWithLabel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/notInlinableWithLabel.kt");
      }

      @Test
      @TestMetadata("nothingToInline.kt")
      public void testNothingToInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nothingToInline.kt");
      }

      @Test
      @TestMetadata("nullabilityOperations.kt")
      public void testNullabilityOperations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nullabilityOperations.kt");
      }

      @Test
      @TestMetadata("nullableFunction.kt")
      public void testNullableFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nullableFunction.kt");
      }

      @Test
      @TestMetadata("overrideWithInline.kt")
      public void testOverrideWithInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/overrideWithInline.kt");
      }

      @Test
      @TestMetadata("parenthesized.kt")
      public void testParenthesized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/parenthesized.kt");
      }

      @Test
      @TestMetadata("privateClass.kt")
      public void testPrivateClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/privateClass.kt");
      }

      @Test
      @TestMetadata("privateOperatorsInInlineAfter.kt")
      public void testPrivateOperatorsInInlineAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/privateOperatorsInInlineAfter.kt");
      }

      @Test
      @TestMetadata("privateOperatorsInInlineBefore.kt")
      public void testPrivateOperatorsInInlineBefore() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/privateOperatorsInInlineBefore.kt");
      }

      @Test
      @TestMetadata("propagation.kt")
      public void testPropagation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/propagation.kt");
      }

      @Test
      @TestMetadata("protectedCallError.kt")
      public void testProtectedCallError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/protectedCallError.kt");
      }

      @Test
      @TestMetadata("protectedJavaFieldInInline.kt")
      public void testProtectedJavaFieldInInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/protectedJavaFieldInInline.kt");
      }

      @Test
      @TestMetadata("protectedMembers.kt")
      public void testProtectedMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/protectedMembers.kt");
      }

      @Test
      @TestMetadata("protectedMembersFromSuper.kt")
      public void testProtectedMembersFromSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/protectedMembersFromSuper.kt");
      }

      @Test
      @TestMetadata("protectedStaticAndInline.kt")
      public void testProtectedStaticAndInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/protectedStaticAndInline.kt");
      }

      @Test
      @TestMetadata("publishedApi.kt")
      public void testPublishedApi() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/publishedApi.kt");
      }

      @Test
      @TestMetadata("recursion.kt")
      public void testRecursion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/recursion.kt");
      }

      @Test
      @TestMetadata("returnedAnonymousObjects_2.kt")
      public void testReturnedAnonymousObjects_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/returnedAnonymousObjects_2.kt");
      }

      @Test
      @TestMetadata("returns.kt")
      public void testReturns() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/returns.kt");
      }

      @Test
      @TestMetadata("sam.kt")
      public void testSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/sam.kt");
      }

      @Test
      @TestMetadata("stringTemplate.kt")
      public void testStringTemplate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/stringTemplate.kt");
      }

      @Test
      @TestMetadata("superCall.kt")
      public void testSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/superCall.kt");
      }

      @Test
      @TestMetadata("superCallDepecation.kt")
      public void testSuperCallDepecation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/superCallDepecation.kt");
      }

      @Test
      @TestMetadata("superCallDepecationWarning.kt")
      public void testSuperCallDepecationWarning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/superCallDepecationWarning.kt");
      }

      @Test
      @TestMetadata("superCallFromMultipleSubclasses.kt")
      public void testSuperCallFromMultipleSubclasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/superCallFromMultipleSubclasses.kt");
      }

      @Test
      @TestMetadata("superProperty.kt")
      public void testSuperProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/superProperty.kt");
      }

      @Test
      @TestMetadata("usageIsNotInlinable.kt")
      public void testUsageIsNotInlinable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/usageIsNotInlinable.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/vararg.kt");
      }

      @Test
      @TestMetadata("virtualMemberInEnum.kt")
      public void testVirtualMemberInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/virtualMemberInEnum.kt");
      }

      @Test
      @TestMetadata("virtualValInEnum.kt")
      public void testVirtualValInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/virtualValInEnum.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/when.kt");
      }

      @Test
      @TestMetadata("wrongUsage.kt")
      public void testWrongUsage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/wrongUsage.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/binaryExpressions")
      @TestDataPath("$PROJECT_ROOT")
      public class BinaryExpressions {
        @Test
        @TestMetadata("andOr.kt")
        public void testAndOr() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/andOr.kt");
        }

        @Test
        @TestMetadata("arrayAccess.kt")
        public void testArrayAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/arrayAccess.kt");
        }

        @Test
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/assignment.kt");
        }

        @Test
        @TestMetadata("comparison.kt")
        public void testComparison() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/comparison.kt");
        }

        @Test
        @TestMetadata("componentAccess.kt")
        public void testComponentAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/componentAccess.kt");
        }

        @Test
        @TestMetadata("contains.kt")
        public void testContains() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/contains.kt");
        }

        @Test
        @TestMetadata("mathOperations.kt")
        public void testMathOperations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/mathOperations.kt");
        }

        @Test
        @TestMetadata("rangeTo.kt")
        public void testRangeTo() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/binaryExpressions/rangeTo.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue")
      @TestDataPath("$PROJECT_ROOT")
      public class NonLocalBreakContinue {
        @Test
        @TestMetadata("baseFeatureInteractions.kt")
        public void testBaseFeatureInteractions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/baseFeatureInteractions.kt");
        }

        @Test
        @TestMetadata("defaultLambdaInline.kt")
        public void testDefaultLambdaInline() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/defaultLambdaInline.kt");
        }

        @Test
        @TestMetadata("lambdaAsGeneric.kt")
        public void testLambdaAsGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/lambdaAsGeneric.kt");
        }

        @Test
        @TestMetadata("lambdaAsNonFunction.kt")
        public void testLambdaAsNonFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/lambdaAsNonFunction.kt");
        }

        @Test
        @TestMetadata("lambdaCallWithSuper.kt")
        public void testLambdaCallWithSuper() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/lambdaCallWithSuper.kt");
        }

        @Test
        @TestMetadata("nestedLambdas.kt")
        public void testNestedLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/nestedLambdas.kt");
        }

        @Test
        @TestMetadata("withGuards.kt")
        public void testWithGuards() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/withGuards.kt");
        }

        @Test
        @TestMetadata("withOverrideByInline.kt")
        public void testWithOverrideByInline() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalBreakContinue/withOverrideByInline.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonLocalReturns")
      @TestDataPath("$PROJECT_ROOT")
      public class NonLocalReturns {
        @Test
        @TestMetadata("anonymousObjects.kt")
        public void testAnonymousObjects() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjects.kt");
        }

        @Test
        @TestMetadata("anonymousObjectsNested.kt")
        public void testAnonymousObjectsNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/anonymousObjectsNested.kt");
        }

        @Test
        @TestMetadata("labeledReturn.kt")
        public void testLabeledReturn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/labeledReturn.kt");
        }

        @Test
        @TestMetadata("lambdaAsGeneric.kt")
        public void testLambdaAsGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsGeneric.kt");
        }

        @Test
        @TestMetadata("lambdaAsNonFunction.kt")
        public void testLambdaAsNonFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaAsNonFunction.kt");
        }

        @Test
        @TestMetadata("lambdaWithGlobalReturnsInsideOnlyLocalOne.kt")
        public void testLambdaWithGlobalReturnsInsideOnlyLocalOne() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/lambdaWithGlobalReturnsInsideOnlyLocalOne.kt");
        }

        @Test
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/localFun.kt");
        }

        @Test
        @TestMetadata("noInlineAnnotation.kt")
        public void testNoInlineAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineAnnotation.kt");
        }

        @Test
        @TestMetadata("noInlineLambda.kt")
        public void testNoInlineLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/noInlineLambda.kt");
        }

        @Test
        @TestMetadata("nonInlinedClass.kt")
        public void testNonInlinedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/nonInlinedClass.kt");
        }

        @Test
        @TestMetadata("onlyLocalReturnLambda.kt")
        public void testOnlyLocalReturnLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambda.kt");
        }

        @Test
        @TestMetadata("onlyLocalReturnLambdaBinaryExpr.kt")
        public void testOnlyLocalReturnLambdaBinaryExpr() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/onlyLocalReturnLambdaBinaryExpr.kt");
        }

        @Test
        @TestMetadata("propertyAccessorsAndConstructor.kt")
        public void testPropertyAccessorsAndConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/propertyAccessorsAndConstructor.kt");
        }

        @Test
        @TestMetadata("toOnlyLocal.kt")
        public void testToOnlyLocal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonLocalReturns/toOnlyLocal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/nonPublicMember")
      @TestDataPath("$PROJECT_ROOT")
      public class NonPublicMember {
        @Test
        @TestMetadata("inNonPublicClass.kt")
        public void testInNonPublicClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/inNonPublicClass.kt");
        }

        @Test
        @TestMetadata("inPackage.kt")
        public void testInPackage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/inPackage.kt");
        }

        @Test
        @TestMetadata("inPublicClass.kt")
        public void testInPublicClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/inPublicClass.kt");
        }

        @Test
        @TestMetadata("kt14887.kt")
        public void testKt14887() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/kt14887.kt");
        }

        @Test
        @TestMetadata("kt55179.kt")
        public void testKt55179() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/kt55179.kt");
        }

        @Test
        @TestMetadata("localClass2.kt")
        public void testLocalClass2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/localClass2.kt");
        }

        @Test
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/localFun.kt");
        }

        @Test
        @TestMetadata("publishedApi.kt")
        public void testPublishedApi() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/nonPublicMember/publishedApi.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/property")
      @TestDataPath("$PROJECT_ROOT")
      public class Property {
        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/property/invoke.kt");
        }

        @Test
        @TestMetadata("propertyWithBackingField.kt")
        public void testPropertyWithBackingField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/property/propertyWithBackingField.kt");
        }

        @Test
        @TestMetadata("unsupportedConstruction.kt")
        public void testUnsupportedConstruction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/property/unsupportedConstruction.kt");
        }

        @Test
        @TestMetadata("virtualProperty.kt")
        public void testVirtualProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/property/virtualProperty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/regressions")
      @TestDataPath("$PROJECT_ROOT")
      public class Regressions {
        @Test
        @TestMetadata("kt4341.kt")
        public void testKt4341() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/regressions/kt4341.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inline/unaryExpressions")
      @TestDataPath("$PROJECT_ROOT")
      public class UnaryExpressions {
        @Test
        @TestMetadata("mathOperation.kt")
        public void testMathOperation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/unaryExpressions/mathOperation.kt");
        }

        @Test
        @TestMetadata("notOperation.kt")
        public void testNotOperation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inline/unaryExpressions/notOperation.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      @TestMetadata("basicInlineClassDeclaration.kt")
      public void testBasicInlineClassDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/basicInlineClassDeclaration.kt");
      }

      @Test
      @TestMetadata("delegatedPropertyInInlineClass.kt")
      public void testDelegatedPropertyInInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/delegatedPropertyInInlineClass.kt");
      }

      @Test
      @TestMetadata("identityComparisonWithInlineClasses.kt")
      public void testIdentityComparisonWithInlineClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/identityComparisonWithInlineClasses.kt");
      }

      @Test
      @TestMetadata("inefficientEqualsOverridingInInlineClass.kt")
      public void testInefficientEqualsOverridingInInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inefficientEqualsOverridingInInlineClass.kt");
      }

      @Test
      @TestMetadata("inlineClassCanImplementInterfaceByDelegation.kt")
      public void testInlineClassCanImplementInterfaceByDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassCanImplementInterfaceByDelegation.kt");
      }

      @Test
      @TestMetadata("inlineClassCanOnlyImplementInterfaces.kt")
      public void testInlineClassCanOnlyImplementInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassCanOnlyImplementInterfaces.kt");
      }

      @Test
      @TestMetadata("inlineClassCannotImplementInterfaceByDelegation.kt")
      public void testInlineClassCannotImplementInterfaceByDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassCannotImplementInterfaceByDelegation.kt");
      }

      @Test
      @TestMetadata("inlineClassDeclarationCheck.kt")
      public void testInlineClassDeclarationCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassDeclarationCheck.kt");
      }

      @Test
      @TestMetadata("inlineClassWithForbiddenUnderlyingType.kt")
      public void testInlineClassWithForbiddenUnderlyingType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassWithForbiddenUnderlyingType.kt");
      }

      @Test
      @TestMetadata("inlineClassesInsideAnnotations.kt")
      public void testInlineClassesInsideAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/inlineClassesInsideAnnotations.kt");
      }

      @Test
      @TestMetadata("innerClassInsideInlineClass.kt")
      public void testInnerClassInsideInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/innerClassInsideInlineClass.kt");
      }

      @Test
      @TestMetadata("kt51366.kt")
      public void testKt51366() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/kt51366.kt");
      }

      @Test
      @TestMetadata("lateinitInlineClassesOff.kt")
      public void testLateinitInlineClassesOff() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/lateinitInlineClassesOff.kt");
      }

      @Test
      @TestMetadata("lateinitInlineClassesOn.kt")
      public void testLateinitInlineClassesOn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/lateinitInlineClassesOn.kt");
      }

      @Test
      @TestMetadata("propertiesWithBackingFieldsInsideInlineClass.kt")
      public void testPropertiesWithBackingFieldsInsideInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/propertiesWithBackingFieldsInsideInlineClass.kt");
      }

      @Test
      @TestMetadata("recursiveInlineClasses.kt")
      public void testRecursiveInlineClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/recursiveInlineClasses.kt");
      }

      @Test
      @TestMetadata("reifiedGenericUnderlyingType.kt")
      public void testReifiedGenericUnderlyingType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/reifiedGenericUnderlyingType.kt");
      }

      @Test
      @TestMetadata("reservedConstructorsBodyInKotlinPre19.kt")
      public void testReservedConstructorsBodyInKotlinPre19() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/reservedConstructorsBodyInKotlinPre19.kt");
      }

      @Test
      @TestMetadata("reservedMembersAndConstructsInsideInlineClass.kt")
      public void testReservedMembersAndConstructsInsideInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/reservedMembersAndConstructsInsideInlineClass.kt");
      }

      @Test
      @TestMetadata("synchronizedForbidden.kt")
      public void testSynchronizedForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/synchronizedForbidden.kt");
      }

      @Test
      @TestMetadata("typedEqualsOperatorDeclarationCheck.kt")
      public void testTypedEqualsOperatorDeclarationCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/typedEqualsOperatorDeclarationCheck.kt");
      }

      @Test
      @TestMetadata("typedEqualsOperatorModifierInInlineClass.kt")
      public void testTypedEqualsOperatorModifierInInlineClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/typedEqualsOperatorModifierInInlineClass.kt");
      }

      @Test
      @TestMetadata("unsignedLiteralsWithoutArtifactOnClasspath.kt")
      public void testUnsignedLiteralsWithoutArtifactOnClasspath() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/unsignedLiteralsWithoutArtifactOnClasspath.kt");
      }

      @Test
      @TestMetadata("varargsOnParametersOfInlineClassType.kt")
      public void testVarargsOnParametersOfInlineClassType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inlineClasses/varargsOnParametersOfInlineClassType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/inner")
    @TestDataPath("$PROJECT_ROOT")
    public class Inner {
      @Test
      @TestMetadata("accessingToJavaNestedClass.kt")
      public void testAccessingToJavaNestedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/accessingToJavaNestedClass.kt");
      }

      @Test
      @TestMetadata("accessingToKotlinNestedClass.kt")
      public void testAccessingToKotlinNestedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/accessingToKotlinNestedClass.kt");
      }

      @Test
      @TestMetadata("annotationInInnerClass.kt")
      public void testAnnotationInInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/annotationInInnerClass.kt");
      }

      @Test
      @TestMetadata("classesInClassObjectHeader.kt")
      public void testClassesInClassObjectHeader() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/classesInClassObjectHeader.kt");
      }

      @Test
      @TestMetadata("constructorAccess.kt")
      public void testConstructorAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/constructorAccess.kt");
      }

      @Test
      @TestMetadata("deepInnerClass.kt")
      public void testDeepInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/deepInnerClass.kt");
      }

      @Test
      @TestMetadata("enumInInnerClass.kt")
      public void testEnumInInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/enumInInnerClass.kt");
      }

      @Test
      @TestMetadata("extensionFun.kt")
      public void testExtensionFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/extensionFun.kt");
      }

      @Test
      @TestMetadata("illegalModifier_lv12.kt")
      public void testIllegalModifier_lv12() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/illegalModifier_lv12.kt");
      }

      @Test
      @TestMetadata("inheritedInnerAndNested.kt")
      public void testInheritedInnerAndNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/inheritedInnerAndNested.kt");
      }

      @Test
      @TestMetadata("innerClassInEnumEntryClass_lv12.kt")
      public void testInnerClassInEnumEntryClass_lv12() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv12.kt");
      }

      @Test
      @TestMetadata("innerClassInEnumEntryClass_lv13.kt")
      public void testInnerClassInEnumEntryClass_lv13() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerClassInEnumEntryClass_lv13.kt");
      }

      @Test
      @TestMetadata("innerConstructorsFromQualifiers.kt")
      public void testInnerConstructorsFromQualifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiers.kt");
      }

      @Test
      @TestMetadata("innerConstructorsFromQualifiersWithIrrelevantCandidate.kt")
      public void testInnerConstructorsFromQualifiersWithIrrelevantCandidate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerConstructorsFromQualifiersWithIrrelevantCandidate.kt");
      }

      @Test
      @TestMetadata("innerErrorForClassObjects.kt")
      public void testInnerErrorForClassObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerErrorForClassObjects.kt");
      }

      @Test
      @TestMetadata("innerErrorForObjects.kt")
      public void testInnerErrorForObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerErrorForObjects.kt");
      }

      @Test
      @TestMetadata("innerThisSuper.kt")
      public void testInnerThisSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/innerThisSuper.kt");
      }

      @Test
      @TestMetadata("interfaceInInnerClass.kt")
      public void testInterfaceInInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/interfaceInInnerClass.kt");
      }

      @Test
      @TestMetadata("kt5854.kt")
      public void testKt5854() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/kt5854.kt");
      }

      @Test
      @TestMetadata("kt6026.kt")
      public void testKt6026() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/kt6026.kt");
      }

      @Test
      @TestMetadata("localClassInsideNested.kt")
      public void testLocalClassInsideNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/localClassInsideNested.kt");
      }

      @Test
      @TestMetadata("modality.kt")
      public void testModality() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/modality.kt");
      }

      @Test
      @TestMetadata("nestedClassAccessedViaInstanceReference.kt")
      public void testNestedClassAccessedViaInstanceReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/nestedClassAccessedViaInstanceReference.kt");
      }

      @Test
      @TestMetadata("nestedClassNotAllowed_after.kt")
      public void testNestedClassNotAllowed_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed_after.kt");
      }

      @Test
      @TestMetadata("nestedClassNotAllowed_before.kt")
      public void testNestedClassNotAllowed_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/nestedClassNotAllowed_before.kt");
      }

      @Test
      @TestMetadata("nestedObject.kt")
      public void testNestedObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/nestedObject.kt");
      }

      @Test
      @TestMetadata("nestedVsInnerAccessOuterMember.kt")
      public void testNestedVsInnerAccessOuterMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/nestedVsInnerAccessOuterMember.kt");
      }

      @Test
      @TestMetadata("outerGenericParam.kt")
      public void testOuterGenericParam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/outerGenericParam.kt");
      }

      @Test
      @TestMetadata("outerSuperClassMember.kt")
      public void testOuterSuperClassMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/outerSuperClassMember.kt");
      }

      @Test
      @TestMetadata("referenceToSelfInLocal.kt")
      public void testReferenceToSelfInLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/referenceToSelfInLocal.kt");
      }

      @Test
      @TestMetadata("typeVarianceConflict.kt")
      public void testTypeVarianceConflict() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/typeVarianceConflict.kt");
      }

      @Test
      @TestMetadata("typeVarianceConflictFeatureOn.kt")
      public void testTypeVarianceConflictFeatureOn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/typeVarianceConflictFeatureOn.kt");
      }

      @Test
      @TestMetadata("uninitializedSuperType.kt")
      public void testUninitializedSuperType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/uninitializedSuperType.kt");
      }

      @Test
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/visibility.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/inner/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @Test
        @TestMetadata("constructNestedClass.kt")
        public void testConstructNestedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/qualifiedExpression/constructNestedClass.kt");
        }

        @Test
        @TestMetadata("genericNestedClass.kt")
        public void testGenericNestedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/inner/qualifiedExpression/genericNestedClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/integerLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class IntegerLiterals {
      @Test
      @TestMetadata("constantUnaryOperators.kt")
      public void testConstantUnaryOperators() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/integerLiterals/constantUnaryOperators.kt");
      }

      @Test
      @TestMetadata("IltAsExtensionReceiver.kt")
      public void testIltAsExtensionReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/integerLiterals/IltAsExtensionReceiver.kt");
      }

      @Test
      @TestMetadata("intToLongConversion.kt")
      public void testIntToLongConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/integerLiterals/intToLongConversion.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @Test
      @TestMetadata("accessClassObjectFromJava.kt")
      public void testAccessClassObjectFromJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/accessClassObjectFromJava.kt");
      }

      @Test
      @TestMetadata("ambiguousSamAdapters.kt")
      public void testAmbiguousSamAdapters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/ambiguousSamAdapters.kt");
      }

      @Test
      @TestMetadata("arrayAnnotationConstructorReference.kt")
      public void testArrayAnnotationConstructorReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/arrayAnnotationConstructorReference.kt");
      }

      @Test
      @TestMetadata("arrayOfStarParametrized.kt")
      public void testArrayOfStarParametrized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/arrayOfStarParametrized.kt");
      }

      @Test
      @TestMetadata("collectionsInKJKcall.kt")
      public void testCollectionsInKJKcall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionsInKJKcall.kt");
      }

      @Test
      @TestMetadata("collectorInference.kt")
      public void testCollectorInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectorInference.kt");
      }

      @Test
      @TestMetadata("defaultMethodsIndirectInheritance_before.kt")
      public void testDefaultMethodsIndirectInheritance_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/defaultMethodsIndirectInheritance_before.kt");
      }

      @Test
      @TestMetadata("defaultMethods_before.kt")
      public void testDefaultMethods_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/defaultMethods_before.kt");
      }

      @Test
      @TestMetadata("differentFilename.kt")
      public void testDifferentFilename() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/differentFilename.kt");
      }

      @Test
      @TestMetadata("fieldOverridesFieldOfDifferentType.kt")
      public void testFieldOverridesFieldOfDifferentType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/fieldOverridesFieldOfDifferentType.kt");
      }

      @Test
      @TestMetadata("finalCollectionSize.kt")
      public void testFinalCollectionSize() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/finalCollectionSize.kt");
      }

      @Test
      @TestMetadata("flexibleTypeVariablePosition.kt")
      public void testFlexibleTypeVariablePosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/flexibleTypeVariablePosition.kt");
      }

      @Test
      @TestMetadata("flexibleTypeVariablePositionDnnRepresentation.kt")
      public void testFlexibleTypeVariablePositionDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/flexibleTypeVariablePositionDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("futureGet.kt")
      public void testFutureGet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/futureGet.kt");
      }

      @Test
      @TestMetadata("genericConstructorWithMultipleBounds.kt")
      public void testGenericConstructorWithMultipleBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructorWithMultipleBounds.kt");
      }

      @Test
      @TestMetadata("inheritanceStaticMethodFromInterface.kt")
      public void testInheritanceStaticMethodFromInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/inheritanceStaticMethodFromInterface.kt");
      }

      @Test
      @TestMetadata("innerNestedClassFromJava.kt")
      public void testInnerNestedClassFromJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/innerNestedClassFromJava.kt");
      }

      @Test
      @TestMetadata("internalClash.kt")
      public void testInternalClash() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/internalClash.kt");
      }

      @Test
      @TestMetadata("invisibleFake.kt")
      public void testInvisibleFake() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/invisibleFake.kt");
      }

      @Test
      @TestMetadata("invisibleFake2.kt")
      public void testInvisibleFake2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/invisibleFake2.kt");
      }

      @Test
      @TestMetadata("invisiblePackagePrivateInheritedMember.kt")
      public void testInvisiblePackagePrivateInheritedMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/invisiblePackagePrivateInheritedMember.kt");
      }

      @Test
      @TestMetadata("javaLangStringCtr.kt")
      public void testJavaLangStringCtr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/javaLangStringCtr.kt");
      }

      @Test
      @TestMetadata("javaLikeCallOnTypeParameter.kt")
      public void testJavaLikeCallOnTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/javaLikeCallOnTypeParameter.kt");
      }

      @Test
      @TestMetadata("kjkImplicitReturnType.kt")
      public void testKjkImplicitReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kjkImplicitReturnType.kt");
      }

      @Test
      @TestMetadata("kjkRawTypeWithKotlinUpperBound.kt")
      public void testKjkRawTypeWithKotlinUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kjkRawTypeWithKotlinUpperBound.kt");
      }

      @Test
      @TestMetadata("kt2394.kt")
      public void testKt2394() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt2394.kt");
      }

      @Test
      @TestMetadata("kt2619.kt")
      public void testKt2619() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt2619.kt");
      }

      @Test
      @TestMetadata("kt2641.kt")
      public void testKt2641() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt2641.kt");
      }

      @Test
      @TestMetadata("kt36856.kt")
      public void testKt36856() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt36856.kt");
      }

      @Test
      @TestMetadata("kt62118.kt")
      public void testKt62118() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt62118.kt");
      }

      @Test
      @TestMetadata("kt6720_abstractProperty.kt")
      public void testKt6720_abstractProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/kt6720_abstractProperty.kt");
      }

      @Test
      @TestMetadata("nullForOptionalOf.kt")
      public void testNullForOptionalOf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/nullForOptionalOf.kt");
      }

      @Test
      @TestMetadata("nullableLinkedListToQueue.kt")
      public void testNullableLinkedListToQueue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/nullableLinkedListToQueue.kt");
      }

      @Test
      @TestMetadata("nullableLinkedListToQueueDnnRepresentation.kt")
      public void testNullableLinkedListToQueueDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/nullableLinkedListToQueueDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("orderOfSupertypesAndFakeOverrides_1.kt")
      public void testOrderOfSupertypesAndFakeOverrides_1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/orderOfSupertypesAndFakeOverrides_1.kt");
      }

      @Test
      @TestMetadata("orderOfSupertypesAndFakeOverrides_2.kt")
      public void testOrderOfSupertypesAndFakeOverrides_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/orderOfSupertypesAndFakeOverrides_2.kt");
      }

      @Test
      @TestMetadata("overrideForMemberExtensionProp.kt")
      public void testOverrideForMemberExtensionProp() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/overrideForMemberExtensionProp.kt");
      }

      @Test
      @TestMetadata("overrideWithTypeParameter.kt")
      public void testOverrideWithTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/overrideWithTypeParameter.kt");
      }

      @Test
      @TestMetadata("overrideWithTypeParameterAfter.kt")
      public void testOverrideWithTypeParameterAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/overrideWithTypeParameterAfter.kt");
      }

      @Test
      @TestMetadata("packageVisibility.kt")
      public void testPackageVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/packageVisibility.kt");
      }

      @Test
      @TestMetadata("privateNestedClassStaticMember.kt")
      public void testPrivateNestedClassStaticMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/privateNestedClassStaticMember.kt");
      }

      @Test
      @TestMetadata("purelyImplementedSupertype.kt")
      public void testPurelyImplementedSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/purelyImplementedSupertype.kt");
      }

      @Test
      @TestMetadata("rawTypesFromCaptured.kt")
      public void testRawTypesFromCaptured() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/rawTypesFromCaptured.kt");
      }

      @Test
      @TestMetadata("receiverEnhancement.kt")
      public void testReceiverEnhancement() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/receiverEnhancement.kt");
      }

      @Test
      @TestMetadata("recursionWithJavaSyntheticProperty.kt")
      public void testRecursionWithJavaSyntheticProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/recursionWithJavaSyntheticProperty.kt");
      }

      @Test
      @TestMetadata("samWithConsumer.kt")
      public void testSamWithConsumer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samWithConsumer.kt");
      }

      @Test
      @TestMetadata("selectMoreSpecific.kt")
      public void testSelectMoreSpecific() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/selectMoreSpecific.kt");
      }

      @Test
      @TestMetadata("serializable.kt")
      public void testSerializable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/serializable.kt");
      }

      @Test
      @TestMetadata("SupertypeArgumentsNullability-NotNull-SpecialTypes.kt")
      public void testSupertypeArgumentsNullability_NotNull_SpecialTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-SpecialTypes.kt");
      }

      @Test
      @TestMetadata("SupertypeArgumentsNullability-NotNull-UserTypes.kt")
      public void testSupertypeArgumentsNullability_NotNull_UserTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/SupertypeArgumentsNullability-NotNull-UserTypes.kt");
      }

      @Test
      @TestMetadata("syntheticPropertyOverridden2.kt")
      public void testSyntheticPropertyOverridden2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/syntheticPropertyOverridden2.kt");
      }

      @Test
      @TestMetadata("typeFromGenericFunWithAnnotation.kt")
      public void testTypeFromGenericFunWithAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromGenericFunWithAnnotation.kt");
      }

      @Test
      @TestMetadata("typeFromGenericFunWithAnnotationDnnRepresentation.kt")
      public void testTypeFromGenericFunWithAnnotationDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromGenericFunWithAnnotationDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("typeFromGenericWithAnnotation.kt")
      public void testTypeFromGenericWithAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromGenericWithAnnotation.kt");
      }

      @Test
      @TestMetadata("typeFromGenericWithAnnotationDnnRepresentation.kt")
      public void testTypeFromGenericWithAnnotationDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromGenericWithAnnotationDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("typeFromJavaGeneric.kt")
      public void testTypeFromJavaGeneric() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromJavaGeneric.kt");
      }

      @Test
      @TestMetadata("typeFromJavaGenericFun.kt")
      public void testTypeFromJavaGenericFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromJavaGenericFun.kt");
      }

      @Test
      @TestMetadata("typeFromJavaGenericFunDnnRepresentation.kt")
      public void testTypeFromJavaGenericFunDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/typeFromJavaGenericFunDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("wrongVarianceInJava.kt")
      public void testWrongVarianceInJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/wrongVarianceInJava.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/brokenCode")
      @TestDataPath("$PROJECT_ROOT")
      public class BrokenCode {
        @Test
        @TestMetadata("classDuplicates.kt")
        public void testClassDuplicates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/brokenCode/classDuplicates.kt");
        }

        @Test
        @TestMetadata("fieldDuplicates.kt")
        public void testFieldDuplicates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/brokenCode/fieldDuplicates.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/collectionOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class CollectionOverrides {
        @Test
        @TestMetadata("commonCollections.kt")
        public void testCommonCollections() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/commonCollections.kt");
        }

        @Test
        @TestMetadata("contains.kt")
        public void testContains() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/contains.kt");
        }

        @Test
        @TestMetadata("containsAll.kt")
        public void testContainsAll() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAll.kt");
        }

        @Test
        @TestMetadata("containsAndOverload.kt")
        public void testContainsAndOverload() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAndOverload.kt");
        }

        @Test
        @TestMetadata("containsAndOverloadWithoutExplicitOverride.kt")
        public void testContainsAndOverloadWithoutExplicitOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/containsAndOverloadWithoutExplicitOverride.kt");
        }

        @Test
        @TestMetadata("irrelevantImplCharSequenceKotlin.kt")
        public void testIrrelevantImplCharSequenceKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplCharSequenceKotlin.kt");
        }

        @Test
        @TestMetadata("irrelevantImplMutableList.kt")
        public void testIrrelevantImplMutableList() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableList.kt");
        }

        @Test
        @TestMetadata("irrelevantImplMutableListKotlin.kt")
        public void testIrrelevantImplMutableListKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/irrelevantImplMutableListKotlin.kt");
        }

        @Test
        @TestMetadata("nonDirectHiddenOverride.kt")
        public void testNonDirectHiddenOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/nonDirectHiddenOverride.kt");
        }

        @Test
        @TestMetadata("overrideAnClashWithJvmSignatureInMPP.kt")
        public void testOverrideAnClashWithJvmSignatureInMPP() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/collectionOverrides/overrideAnClashWithJvmSignatureInMPP.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/deprecations")
      @TestDataPath("$PROJECT_ROOT")
      public class Deprecations {
        @Test
        @TestMetadata("forSyntheticPropertyOverrides.kt")
        public void testForSyntheticPropertyOverrides() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/deprecations/forSyntheticPropertyOverrides.kt");
        }

        @Test
        @TestMetadata("javaWithHiddenDeprecation.kt")
        public void testJavaWithHiddenDeprecation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/deprecations/javaWithHiddenDeprecation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/genericConstructor")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericConstructor {
        @Test
        @TestMetadata("classTypeParameterInferredFromArgument.kt")
        public void testClassTypeParameterInferredFromArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/classTypeParameterInferredFromArgument.kt");
        }

        @Test
        @TestMetadata("innerClass.kt")
        public void testInnerClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/innerClass.kt");
        }

        @Test
        @TestMetadata("noClassTypeParameters.kt")
        public void testNoClassTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParameters.kt");
        }

        @Test
        @TestMetadata("noClassTypeParametersInvParameter.kt")
        public void testNoClassTypeParametersInvParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/noClassTypeParametersInvParameter.kt");
        }

        @Test
        @TestMetadata("recursive.kt")
        public void testRecursive() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/recursive.kt");
        }

        @Test
        @TestMetadata("superCall.kt")
        public void testSuperCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/superCall.kt");
        }

        @Test
        @TestMetadata("superCallImpossibleToInfer.kt")
        public void testSuperCallImpossibleToInfer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/superCallImpossibleToInfer.kt");
        }

        @Test
        @TestMetadata("withClassTypeParameters.kt")
        public void testWithClassTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/genericConstructor/withClassTypeParameters.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/polymorphicSignature")
      @TestDataPath("$PROJECT_ROOT")
      public class PolymorphicSignature {
        @Test
        @TestMetadata("spreadOperator_after.kt")
        public void testSpreadOperator_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/polymorphicSignature/spreadOperator_after.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/primitiveOverrides")
      @TestDataPath("$PROJECT_ROOT")
      public class PrimitiveOverrides {
        @Test
        @TestMetadata("notNullAnnotated.kt")
        public void testNotNullAnnotated() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/primitiveOverrides/notNullAnnotated.kt");
        }

        @Test
        @TestMetadata("triangleWithFlexibleTypeAndSubstitution4.kt")
        public void testTriangleWithFlexibleTypeAndSubstitution4() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithFlexibleTypeAndSubstitution4.kt");
        }

        @Test
        @TestMetadata("triangleWithNotNullType.kt")
        public void testTriangleWithNotNullType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/primitiveOverrides/triangleWithNotNullType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/properties")
      @TestDataPath("$PROJECT_ROOT")
      public class Properties {
        @Test
        @TestMetadata("fieldPropertyOverloads.kt")
        public void testFieldPropertyOverloads() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/fieldPropertyOverloads.kt");
        }

        @Test
        @TestMetadata("fieldPropertyOverloadsNI.kt")
        public void testFieldPropertyOverloadsNI() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/fieldPropertyOverloadsNI.kt");
        }

        @Test
        @TestMetadata("isName.kt")
        public void testIsName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/isName.kt");
        }

        @Test
        @TestMetadata("staticFieldPropertyOverloads.kt")
        public void testStaticFieldPropertyOverloads() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/staticFieldPropertyOverloads.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinGetter_kotlinOrigin.kt")
        public void testSyntheticPropertyFromKotlinGetter_kotlinOrigin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinGetter_kotlinOrigin.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassGetterOverrides.kt")
        public void testSyntheticPropertyFromKotlinSubclassGetterOverrides() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassGetterOverrides.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassOfInterfaceGetter.kt")
        public void testSyntheticPropertyFromKotlinSubclassOfInterfaceGetter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassOfInterfaceGetter.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassOfJava.kt")
        public void testSyntheticPropertyFromKotlinSubclassOfJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassOfJava.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassOfJavaGetterSubclass.kt")
        public void testSyntheticPropertyFromKotlinSubclassOfJavaGetterSubclass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassOfJavaGetterSubclass.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassOfJavaQualifiers.kt")
        public void testSyntheticPropertyFromKotlinSubclassOfJavaQualifiers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassOfJavaQualifiers.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlinSubclassOfJavaSubclass.kt")
        public void testSyntheticPropertyFromKotlinSubclassOfJavaSubclass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlinSubclassOfJavaSubclass.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlin_error.kt")
        public void testSyntheticPropertyFromKotlin_error() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlin_error.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyFromKotlin_k1Like.kt")
        public void testSyntheticPropertyFromKotlin_k1Like() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/syntheticPropertyFromKotlin_k1Like.kt");
        }

        @Test
        @TestMetadata("unitVsVoid.kt")
        public void testUnitVsVoid() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/unitVsVoid.kt");
        }

        @Test
        @TestMetadata("val.kt")
        public void testVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/val.kt");
        }

        @Test
        @TestMetadata("var.kt")
        public void testVar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/properties/var.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/sam")
      @TestDataPath("$PROJECT_ROOT")
      public class Sam {
        @Test
        @TestMetadata("conversionForDerivedGenericClass.kt")
        public void testConversionForDerivedGenericClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/sam/conversionForDerivedGenericClass.kt");
        }

        @Test
        @TestMetadata("enhancedSamConstructor.kt")
        public void testEnhancedSamConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/sam/enhancedSamConstructor.kt");
        }

        @Test
        @TestMetadata("privateCandidatesWithWrongArguments.kt")
        public void testPrivateCandidatesWithWrongArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/sam/privateCandidatesWithWrongArguments.kt");
        }

        @Test
        @TestMetadata("referenceToSamFunctionAgainstExpectedType.kt")
        public void testReferenceToSamFunctionAgainstExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/sam/referenceToSamFunctionAgainstExpectedType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/samByProjectedType")
      @TestDataPath("$PROJECT_ROOT")
      public class SamByProjectedType {
        @Test
        @TestMetadata("genericInReturnType.kt")
        public void testGenericInReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInReturnType.kt");
        }

        @Test
        @TestMetadata("genericInValueParameter.kt")
        public void testGenericInValueParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericInValueParameter.kt");
        }

        @Test
        @TestMetadata("genericSuperWildcard.kt")
        public void testGenericSuperWildcard() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/genericSuperWildcard.kt");
        }

        @Test
        @TestMetadata("javaSamTypeWithRecursionInBounds.kt")
        public void testJavaSamTypeWithRecursionInBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/javaSamTypeWithRecursionInBounds.kt");
        }

        @Test
        @TestMetadata("noAdapterBecuaseOfRecursiveUpperBound.kt")
        public void testNoAdapterBecuaseOfRecursiveUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/noAdapterBecuaseOfRecursiveUpperBound.kt");
        }

        @Test
        @TestMetadata("starProjectionComplexUpperBound.kt")
        public void testStarProjectionComplexUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/samByProjectedType/starProjectionComplexUpperBound.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/j+k/types")
      @TestDataPath("$PROJECT_ROOT")
      public class Types {
        @Test
        @TestMetadata("newListMethodsNullabilityLinkedList21.kt")
        public void testNewListMethodsNullabilityLinkedList21() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityLinkedList21.kt");
        }

        @Test
        @TestMetadata("newListMethodsNullabilityLinkedListLatest.kt")
        public void testNewListMethodsNullabilityLinkedListLatest() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityLinkedListLatest.kt");
        }

        @Test
        @TestMetadata("newListMethodsNullabilityOverridesLinkedList21.kt")
        public void testNewListMethodsNullabilityOverridesLinkedList21() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityOverridesLinkedList21.kt");
        }

        @Test
        @TestMetadata("newListMethodsNullabilityOverridesLinkedListLatest.kt")
        public void testNewListMethodsNullabilityOverridesLinkedListLatest() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/newListMethodsNullabilityOverridesLinkedListLatest.kt");
        }

        @Test
        @TestMetadata("noOverrideKeyword.kt")
        public void testNoOverrideKeyword() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/noOverrideKeyword.kt");
        }

        @Test
        @TestMetadata("notNullTypeParameterWithKotlinNullable.kt")
        public void testNotNullTypeParameterWithKotlinNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullable.kt");
        }

        @Test
        @TestMetadata("notNullTypeParameterWithKotlinNullableDnnRepresentation.kt")
        public void testNotNullTypeParameterWithKotlinNullableDnnRepresentation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullableDnnRepresentation.kt");
        }

        @Test
        @TestMetadata("notNullTypeParameterWithKotlinNullableWarnings.kt")
        public void testNotNullTypeParameterWithKotlinNullableWarnings() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinNullableWarnings.kt");
        }

        @Test
        @TestMetadata("notNullTypeParameterWithKotlinOverridesDefinitelyNonNullable.kt")
        public void testNotNullTypeParameterWithKotlinOverridesDefinitelyNonNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinOverridesDefinitelyNonNullable.kt");
        }

        @Test
        @TestMetadata("notNullTypeParameterWithKotlinOverridesWarning.kt")
        public void testNotNullTypeParameterWithKotlinOverridesWarning() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/notNullTypeParameterWithKotlinOverridesWarning.kt");
        }

        @Test
        @TestMetadata("rawTypesFromSelfTypeWithRawBound.kt")
        public void testRawTypesFromSelfTypeWithRawBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/j+k/types/rawTypesFromSelfTypeWithRawBound.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/java8Overrides")
    @TestDataPath("$PROJECT_ROOT")
    public class Java8Overrides {
      @Test
      @TestMetadata("abstractBaseClassMemberNotImplemented.kt")
      public void testAbstractBaseClassMemberNotImplemented() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/abstractBaseClassMemberNotImplemented.kt");
      }

      @Test
      @TestMetadata("abstractBaseClassMemberNotImplemented_15.kt")
      public void testAbstractBaseClassMemberNotImplemented_15() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/abstractBaseClassMemberNotImplemented_15.kt");
      }

      @Test
      @TestMetadata("abstractFakeOverrideSuperCall.kt")
      public void testAbstractFakeOverrideSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCall.kt");
      }

      @Test
      @TestMetadata("abstractFakeOverrideSuperCallForbidden.kt")
      public void testAbstractFakeOverrideSuperCallForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/abstractFakeOverrideSuperCallForbidden.kt");
      }

      @Test
      @TestMetadata("abstractVsAbstract.kt")
      public void testAbstractVsAbstract() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/abstractVsAbstract.kt");
      }

      @Test
      @TestMetadata("defaultVsAbstract.kt")
      public void testDefaultVsAbstract() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/defaultVsAbstract.kt");
      }

      @Test
      @TestMetadata("hidingMethodOfAny.kt")
      public void testHidingMethodOfAny() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/hidingMethodOfAny.kt");
      }

      @Test
      @TestMetadata("implementingMethodOfAny.kt")
      public void testImplementingMethodOfAny() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/implementingMethodOfAny.kt");
      }

      @Test
      @TestMetadata("kt45508.kt")
      public void testKt45508() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/kt45508.kt");
      }

      @Test
      @TestMetadata("overridingMethodOfAnyChain.kt")
      public void testOverridingMethodOfAnyChain() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyChain.kt");
      }

      @Test
      @TestMetadata("overridingMethodOfAnyDiamond.kt")
      public void testOverridingMethodOfAnyDiamond() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/java8Overrides/overridingMethodOfAnyDiamond.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/javac")
    @TestDataPath("$PROJECT_ROOT")
    public class Javac {
      @Test
      @TestMetadata("Lambda.kt")
      public void testLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/Lambda.kt");
      }

      @Test
      @TestMetadata("LambdaNonGeneric.kt")
      public void testLambdaNonGeneric() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/LambdaNonGeneric.kt");
      }

      @Test
      @TestMetadata("LambdaNonGenericForbidden.kt")
      public void testLambdaNonGenericForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/LambdaNonGenericForbidden.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/imports")
      @TestDataPath("$PROJECT_ROOT")
      public class Imports {
        @Test
        @TestMetadata("AllUnderImportsAmbiguity.kt")
        public void testAllUnderImportsAmbiguity() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/imports/AllUnderImportsAmbiguity.kt");
        }

        @Test
        @TestMetadata("ImportProtectedClass.kt")
        public void testImportProtectedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/imports/ImportProtectedClass.kt");
        }

        @Test
        @TestMetadata("NestedAndTopLevelClassClash.kt")
        public void testNestedAndTopLevelClassClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/imports/NestedAndTopLevelClassClash.kt");
        }

        @Test
        @TestMetadata("NestedClassClash.kt")
        public void testNestedClassClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/imports/NestedClassClash.kt");
        }

        @Test
        @TestMetadata("PackagePrivateAndPublicNested.kt")
        public void testPackagePrivateAndPublicNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/imports/PackagePrivateAndPublicNested.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @Test
        @TestMetadata("InheritanceAmbiguity.kt")
        public void testInheritanceAmbiguity() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity.kt");
        }

        @Test
        @TestMetadata("InheritanceAmbiguity2.kt")
        public void testInheritanceAmbiguity2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity2.kt");
        }

        @Test
        @TestMetadata("InheritanceAmbiguity3.kt")
        public void testInheritanceAmbiguity3() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity3.kt");
        }

        @Test
        @TestMetadata("InheritanceAmbiguity4.kt")
        public void testInheritanceAmbiguity4() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/inheritance/InheritanceAmbiguity4.kt");
        }

        @Test
        @TestMetadata("InheritedInner2.kt")
        public void testInheritedInner2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/inheritance/InheritedInner2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/qualifiedExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class QualifiedExpression {
        @Test
        @TestMetadata("GenericClassVsPackage.kt")
        public void testGenericClassVsPackage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/qualifiedExpression/GenericClassVsPackage.kt");
        }

        @Test
        @TestMetadata("PackageVsClass.kt")
        public void testPackageVsClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsClass.kt");
        }

        @Test
        @TestMetadata("PackageVsClass2.kt")
        public void testPackageVsClass2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/qualifiedExpression/PackageVsClass2.kt");
        }

        @Test
        @TestMetadata("visibleClassVsQualifiedClass.kt")
        public void testVisibleClassVsQualifiedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/qualifiedExpression/visibleClassVsQualifiedClass.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/javac/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @Test
        @TestMetadata("Clash.kt")
        public void testClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/javac/typeParameters/Clash.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/labels")
    @TestDataPath("$PROJECT_ROOT")
    public class Labels {
      @Test
      @TestMetadata("kt361.kt")
      public void testKt361() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/labels/kt361.kt");
      }

      @Test
      @TestMetadata("labelsMustBeNamed.kt")
      public void testLabelsMustBeNamed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/labels/labelsMustBeNamed.kt");
      }

      @Test
      @TestMetadata("multipleLabels.kt")
      public void testMultipleLabels() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/labels/multipleLabels.kt");
      }

      @Test
      @TestMetadata("unknownLabel.kt")
      public void testUnknownLabel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/labels/unknownLabel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @Test
      @TestMetadata("modifierApplicability_lv12.kt")
      public void testModifierApplicability_lv12() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/lateinit/modifierApplicability_lv12.kt");
      }

      @Test
      @TestMetadata("NoInapplicableLateinitModifierForPropertyWithUnnresolvedType.kt")
      public void testNoInapplicableLateinitModifierForPropertyWithUnnresolvedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/lateinit/NoInapplicableLateinitModifierForPropertyWithUnnresolvedType.kt");
      }

      @Test
      @TestMetadata("setter.kt")
      public void testSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/lateinit/setter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/lateinit/local")
      @TestDataPath("$PROJECT_ROOT")
      public class Local {
        @Test
        @TestMetadata("inapplicableLateinitModifier.kt")
        public void testInapplicableLateinitModifier() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/lateinit/local/inapplicableLateinitModifier.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/library")
    @TestDataPath("$PROJECT_ROOT")
    public class Library {
      @Test
      @TestMetadata("Collections.kt")
      public void testCollections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/library/Collections.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/localClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class LocalClasses {
      @Test
      @TestMetadata("localAnnotationClass.kt")
      public void testLocalAnnotationClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/localClasses/localAnnotationClass.kt");
      }

      @Test
      @TestMetadata("localAnnotationClassError.kt")
      public void testLocalAnnotationClassError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/localClasses/localAnnotationClassError.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/modifiers")
    @TestDataPath("$PROJECT_ROOT")
    public class Modifiers {
      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/annotations.kt");
      }

      @Test
      @TestMetadata("defaultModifier.kt")
      public void testDefaultModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/defaultModifier.kt");
      }

      @Test
      @TestMetadata("IllegalModifiers.kt")
      public void testIllegalModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/IllegalModifiers.kt");
      }

      @Test
      @TestMetadata("incompatibleVarianceModifiers.kt")
      public void testIncompatibleVarianceModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/incompatibleVarianceModifiers.kt");
      }

      @Test
      @TestMetadata("inlineParameters.kt")
      public void testInlineParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/inlineParameters.kt");
      }

      @Test
      @TestMetadata("inlineValueClass.kt")
      public void testInlineValueClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/inlineValueClass.kt");
      }

      @Test
      @TestMetadata("internalInInterface.kt")
      public void testInternalInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/internalInInterface.kt");
      }

      @Test
      @TestMetadata("modifierOnParameterInFunctionType.kt")
      public void testModifierOnParameterInFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/modifierOnParameterInFunctionType.kt");
      }

      @Test
      @TestMetadata("NoLocalVisibility.kt")
      public void testNoLocalVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/NoLocalVisibility.kt");
      }

      @Test
      @TestMetadata("openInExpectInterface.kt")
      public void testOpenInExpectInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/openInExpectInterface.kt");
      }

      @Test
      @TestMetadata("OpenInterface.kt")
      public void testOpenInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/OpenInterface.kt");
      }

      @Test
      @TestMetadata("primaryConstructorMissingBrackets.kt")
      public void testPrimaryConstructorMissingBrackets() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingBrackets.kt");
      }

      @Test
      @TestMetadata("primaryConstructorMissingKeyword.kt")
      public void testPrimaryConstructorMissingKeyword() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/primaryConstructorMissingKeyword.kt");
      }

      @Test
      @TestMetadata("privateInInterface.kt")
      public void testPrivateInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/privateInInterface.kt");
      }

      @Test
      @TestMetadata("protected.kt")
      public void testProtected() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/protected.kt");
      }

      @Test
      @TestMetadata("protectedEnum.kt")
      public void testProtectedEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/protectedEnum.kt");
      }

      @Test
      @TestMetadata("protectedInExpectActual.kt")
      public void testProtectedInExpectActual() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/protectedInExpectActual.kt");
      }

      @Test
      @TestMetadata("repeatedModifiers.kt")
      public void testRepeatedModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/repeatedModifiers.kt");
      }

      @Test
      @TestMetadata("suspendAnonymousFunction.kt")
      public void testSuspendAnonymousFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/suspendAnonymousFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/const")
      @TestDataPath("$PROJECT_ROOT")
      public class Const {
        @Test
        @TestMetadata("applicability.kt")
        public void testApplicability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/applicability.kt");
        }

        @Test
        @TestMetadata("arrayInAnnotationArgumentType.kt")
        public void testArrayInAnnotationArgumentType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/arrayInAnnotationArgumentType.kt");
        }

        @Test
        @TestMetadata("binaryLogic.kt")
        public void testBinaryLogic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/binaryLogic.kt");
        }

        @Test
        @TestMetadata("compareArrayLiteralInAnnotation.kt")
        public void testCompareArrayLiteralInAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/compareArrayLiteralInAnnotation.kt");
        }

        @Test
        @TestMetadata("compareEnums.kt")
        public void testCompareEnums() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/compareEnums.kt");
        }

        @Test
        @TestMetadata("complexBooleanInStringConcat_after.kt")
        public void testComplexBooleanInStringConcat_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/complexBooleanInStringConcat_after.kt");
        }

        @Test
        @TestMetadata("complexBooleanInStringConcat_before.kt")
        public void testComplexBooleanInStringConcat_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/complexBooleanInStringConcat_before.kt");
        }

        @Test
        @TestMetadata("constInteraction.kt")
        public void testConstInteraction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/constInteraction.kt");
        }

        @Test
        @TestMetadata("constValGetWrongConstVal.kt")
        public void testConstValGetWrongConstVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/constValGetWrongConstVal.kt");
        }

        @Test
        @TestMetadata("enumConstName_before.kt")
        public void testEnumConstName_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/enumConstName_before.kt");
        }

        @Test
        @TestMetadata("enumJavaName_after.kt")
        public void testEnumJavaName_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/enumJavaName_after.kt");
        }

        @Test
        @TestMetadata("equals_after.kt")
        public void testEquals_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/equals_after.kt");
        }

        @Test
        @TestMetadata("equals_before.kt")
        public void testEquals_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/equals_before.kt");
        }

        @Test
        @TestMetadata("fromJava.kt")
        public void testFromJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/fromJava.kt");
        }

        @Test
        @TestMetadata("fromJavaWithNonConstInitializer.kt")
        public void testFromJavaWithNonConstInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/fromJavaWithNonConstInitializer.kt");
        }

        @Test
        @TestMetadata("ifConstVal_after.kt")
        public void testIfConstVal_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/ifConstVal_after.kt");
        }

        @Test
        @TestMetadata("ifConstVal_before.kt")
        public void testIfConstVal_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/ifConstVal_before.kt");
        }

        @Test
        @TestMetadata("incAndDecOperations.kt")
        public void testIncAndDecOperations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/incAndDecOperations.kt");
        }

        @Test
        @TestMetadata("kCallable_after.kt")
        public void testKCallable_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kCallable_after.kt");
        }

        @Test
        @TestMetadata("kCallable_before.kt")
        public void testKCallable_before() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kCallable_before.kt");
        }

        @Test
        @TestMetadata("kClassInEquals.kt")
        public void testKClassInEquals() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kClassInEquals.kt");
        }

        @Test
        @TestMetadata("kClassInStringConcatenation.kt")
        public void testKClassInStringConcatenation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kClassInStringConcatenation.kt");
        }

        @Test
        @TestMetadata("kotlinJavaCycle.kt")
        public void testKotlinJavaCycle() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kotlinJavaCycle.kt");
        }

        @Test
        @TestMetadata("kt57802.kt")
        public void testKt57802() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/kt57802.kt");
        }

        @Test
        @TestMetadata("rangeToAndUntil.kt")
        public void testRangeToAndUntil() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/rangeToAndUntil.kt");
        }

        @Test
        @TestMetadata("stringConcatenation.kt")
        public void testStringConcatenation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/stringConcatenation.kt");
        }

        @Test
        @TestMetadata("stringConcatenationWithObject.kt")
        public void testStringConcatenationWithObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/stringConcatenationWithObject.kt");
        }

        @Test
        @TestMetadata("typeOperator.kt")
        public void testTypeOperator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/typeOperator.kt");
        }

        @Test
        @TestMetadata("types.kt")
        public void testTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/types.kt");
        }

        @Test
        @TestMetadata("unsigned.kt")
        public void testUnsigned() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/unsigned.kt");
        }

        @Test
        @TestMetadata("wrongTypeInStringConcatenation.kt")
        public void testWrongTypeInStringConcatenation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/const/wrongTypeInStringConcatenation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/modifiers/operatorInfix")
      @TestDataPath("$PROJECT_ROOT")
      public class OperatorInfix {
        @Test
        @TestMetadata("LocalFunctions.kt")
        public void testLocalFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/operatorInfix/LocalFunctions.kt");
        }

        @Test
        @TestMetadata("MemberFunctions.kt")
        public void testMemberFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/modifiers/operatorInfix/MemberFunctions.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multimodule")
    @TestDataPath("$PROJECT_ROOT")
    public class Multimodule {
      @Test
      @TestMetadata("AnonymousFunctionParametersOfInaccessibleTypes.kt")
      public void testAnonymousFunctionParametersOfInaccessibleTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/AnonymousFunctionParametersOfInaccessibleTypes.kt");
      }

      @Test
      @TestMetadata("BoxedInaccessibleGenericTypeUsedByDependencies.kt")
      public void testBoxedInaccessibleGenericTypeUsedByDependencies() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/BoxedInaccessibleGenericTypeUsedByDependencies.kt");
      }

      @Test
      @TestMetadata("dependencyModule.kt")
      public void testDependencyModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/dependencyModule.kt");
      }

      @Test
      @TestMetadata("FalsePositiveInaccessibleGenericTypeWithError.kt")
      public void testFalsePositiveInaccessibleGenericTypeWithError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/FalsePositiveInaccessibleGenericTypeWithError.kt");
      }

      @Test
      @TestMetadata("friendModule.kt")
      public void testFriendModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/friendModule.kt");
      }

      @Test
      @TestMetadata("friendModulePrivate.kt")
      public void testFriendModulePrivate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/friendModulePrivate.kt");
      }

      @Test
      @TestMetadata("internal.kt")
      public void testInternal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/internal.kt");
      }

      @Test
      @TestMetadata("LambdaReceiversOfInaccessibleTypes.kt")
      public void testLambdaReceiversOfInaccessibleTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/LambdaReceiversOfInaccessibleTypes.kt");
      }

      @Test
      @TestMetadata("packagePrivate.kt")
      public void testPackagePrivate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/packagePrivate.kt");
      }

      @Test
      @TestMetadata("publishedApiInternal.kt")
      public void testPublishedApiInternal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/publishedApiInternal.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateClass")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateClass {
        @Test
        @TestMetadata("differentGenericArgumentsReversed.kt")
        public void testDifferentGenericArgumentsReversed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/differentGenericArgumentsReversed.kt");
        }

        @Test
        @TestMetadata("duplicateNestedClasses.kt")
        public void testDuplicateNestedClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/duplicateNestedClasses.kt");
        }

        @Test
        @TestMetadata("genericArgumentNumberMismatch.kt")
        public void testGenericArgumentNumberMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericArgumentNumberMismatch.kt");
        }

        @Test
        @TestMetadata("genericSuperClass.kt")
        public void testGenericSuperClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/genericSuperClass.kt");
        }

        @Test
        @TestMetadata("members.kt")
        public void testMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/members.kt");
        }

        @Test
        @TestMetadata("sameClassNameDifferentPackages.kt")
        public void testSameClassNameDifferentPackages() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateClass/sameClassNameDifferentPackages.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateMethod")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateMethod {
        @Test
        @TestMetadata("classGenericsInParamsIndexMismatch.kt")
        public void testClassGenericsInParamsIndexMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classGenericsInParamsIndexMismatch.kt");
        }

        @Test
        @TestMetadata("classVsFunctionGenericsInParamsMismatch.kt")
        public void testClassVsFunctionGenericsInParamsMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateMethod/classVsFunctionGenericsInParamsMismatch.kt");
        }

        @Test
        @TestMetadata("differentGenericsInParams.kt")
        public void testDifferentGenericsInParams() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateMethod/differentGenericsInParams.kt");
        }

        @Test
        @TestMetadata("functionGenericsInParamsBoundsMismatch.kt")
        public void testFunctionGenericsInParamsBoundsMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateMethod/functionGenericsInParamsBoundsMismatch.kt");
        }

        @Test
        @TestMetadata("incompleteCodeNoNoneApplicable.kt")
        public void testIncompleteCodeNoNoneApplicable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateMethod/incompleteCodeNoNoneApplicable.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/duplicateSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class DuplicateSuper {
        @Test
        @TestMetadata("sameSuperTraitDifferentBounds.kt")
        public void testSameSuperTraitDifferentBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/duplicateSuper/sameSuperTraitDifferentBounds.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multimodule/hiddenClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HiddenClass {
        @Test
        @TestMetadata("deprecatedHiddenImportPriority.kt")
        public void testDeprecatedHiddenImportPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenImportPriority.kt");
        }

        @Test
        @TestMetadata("deprecatedHiddenMultipleClasses.kt")
        public void testDeprecatedHiddenMultipleClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/hiddenClass/deprecatedHiddenMultipleClasses.kt");
        }

        @Test
        @TestMetadata("sinceKotlinImportPriority.kt")
        public void testSinceKotlinImportPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinImportPriority.kt");
        }

        @Test
        @TestMetadata("sinceKotlinMultipleClasses.kt")
        public void testSinceKotlinMultipleClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multimodule/hiddenClass/sinceKotlinMultipleClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
    @TestDataPath("$PROJECT_ROOT")
    public class Multiplatform {
      @Test
      @TestMetadata("actualMissingConstructor.kt")
      public void testActualMissingConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualMissingConstructor.kt");
      }

      @Test
      @TestMetadata("actualTypealiasForNotExpectClass.kt")
      public void testActualTypealiasForNotExpectClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasForNotExpectClass.kt");
      }

      @Test
      @TestMetadata("actualTypealiasToNonexistent.kt")
      public void testActualTypealiasToNonexistent() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToNonexistent.kt");
      }

      @Test
      @TestMetadata("actualTypealiasToSpecialAnnotation.kt")
      public void testActualTypealiasToSpecialAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation.kt");
      }

      @Test
      @TestMetadata("actualTypealiasWithoutExpect.kt")
      public void testActualTypealiasWithoutExpect() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasWithoutExpect.kt");
      }

      @Test
      @TestMetadata("actualTypealias_defaultParamsIncompatibility.kt")
      public void testActualTypealias_defaultParamsIncompatibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealias_defaultParamsIncompatibility.kt");
      }

      @Test
      @TestMetadata("actualWithoutExpectWhenExpectIsFakeOverride.kt")
      public void testActualWithoutExpectWhenExpectIsFakeOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualWithoutExpectWhenExpectIsFakeOverride.kt");
      }

      @Test
      @TestMetadata("annotationArgArrayVsOutArray.kt")
      public void testAnnotationArgArrayVsOutArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsOutArray.kt");
      }

      @Test
      @TestMetadata("arrayLimitationsInJvm.kt")
      public void testArrayLimitationsInJvm() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/arrayLimitationsInJvm.kt");
      }

      @Test
      @TestMetadata("arraySort.kt")
      public void testArraySort() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/arraySort.kt");
      }

      @Test
      @TestMetadata("delegationToExpectInterfacesWithClashingScopes.kt")
      public void testDelegationToExpectInterfacesWithClashingScopes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationToExpectInterfacesWithClashingScopes.kt");
      }

      @Test
      @TestMetadata("expectActualExtensionOverride.kt")
      public void testExpectActualExtensionOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualExtensionOverride.kt");
      }

      @Test
      @TestMetadata("expectActualMainInTheSameModuleDifferentFiles.kt")
      public void testExpectActualMainInTheSameModuleDifferentFiles() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualMainInTheSameModuleDifferentFiles.kt");
      }

      @Test
      @TestMetadata("expectDataObject.kt")
      public void testExpectDataObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectDataObject.kt");
      }

      @Test
      @TestMetadata("expectExternal.kt")
      public void testExpectExternal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectExternal.kt");
      }

      @Test
      @TestMetadata("expectTailrec.kt")
      public void testExpectTailrec() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectTailrec.kt");
      }

      @Test
      @TestMetadata("expectsWithJsExport.kt")
      public void testExpectsWithJsExport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectsWithJsExport.kt");
      }

      @Test
      @TestMetadata("headerFunInNonHeaderClass.kt")
      public void testHeaderFunInNonHeaderClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerFunInNonHeaderClass.kt");
      }

      @Test
      @TestMetadata("implDynamic.kt")
      public void testImplDynamic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/implDynamic.kt");
      }

      @Test
      @TestMetadata("modifierApplicability.kt")
      public void testModifierApplicability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/modifierApplicability.kt");
      }

      @Test
      @TestMetadata("packageConflictsWithClassifierInMultiplatform.kt")
      public void testPackageConflictsWithClassifierInMultiplatform() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/packageConflictsWithClassifierInMultiplatform.kt");
      }

      @Test
      @TestMetadata("privateTopLevelDeclarations.kt")
      public void testPrivateTopLevelDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/privateTopLevelDeclarations.kt");
      }

      @Test
      @TestMetadata("superCallDefaultArguments.kt")
      public void testSuperCallDefaultArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/superCallDefaultArguments.kt");
      }

      @Test
      @TestMetadata("typeResolutionOfNestedClassActualizedViaTypealias.kt")
      public void testTypeResolutionOfNestedClassActualizedViaTypealias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typeResolutionOfNestedClassActualizedViaTypealias.kt");
      }

      @Test
      @TestMetadata("widerVisibilityInActualClassifier.kt")
      public void testWiderVisibilityInActualClassifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibilityInActualClassifier.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualAnnotationsNotMatchExpect {
        @Test
        @TestMetadata("actualizeExpectProtectedToJavaProtected.kt")
        public void testActualizeExpectProtectedToJavaProtected() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizeExpectProtectedToJavaProtected.kt");
        }

        @Test
        @TestMetadata("deprecatedAnnotationOnlyOnActual_useInPlatform.kt")
        public void testDeprecatedAnnotationOnlyOnActual_useInPlatform() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/deprecatedAnnotationOnlyOnActual_useInPlatform.kt");
        }

        @Test
        @TestMetadata("skippedAnnotations.kt")
        public void testSkippedAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/skippedAnnotations.kt");
        }

        @Test
        @TestMetadata("unresolvedReference.kt")
        public void testUnresolvedReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/unresolvedReference.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class ActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker {
        @Test
        @TestMetadata("changeFunctionTypeParameterNamesInOverride.kt")
        public void testChangeFunctionTypeParameterNamesInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeFunctionTypeParameterNamesInOverride.kt");
        }

        @Test
        @TestMetadata("changeLateinitInOverride.kt")
        public void testChangeLateinitInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeLateinitInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityFromAbstractToFinalInOverride.kt")
        public void testChangeModalityFromAbstractToFinalInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToFinalInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityFromAbstractToOpenInOverride.kt")
        public void testChangeModalityFromAbstractToOpenInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToOpenInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityFromOpenToAbstractInOverride.kt")
        public void testChangeModalityFromOpenToAbstractInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToAbstractInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityFromOpenToFinalInOverride.kt")
        public void testChangeModalityFromOpenToFinalInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToFinalInOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityOfSubstitutedFakeOverride.kt")
        public void testChangeModalityOfSubstitutedFakeOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfSubstitutedFakeOverride.kt");
        }

        @Test
        @TestMetadata("changeModalityOfToStringInOverride.kt")
        public void testChangeModalityOfToStringInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfToStringInOverride.kt");
        }

        @Test
        @TestMetadata("changeParameterNameInOverride.kt")
        public void testChangeParameterNameInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeParameterNameInOverride.kt");
        }

        @Test
        @TestMetadata("changeSetterVisibilityInOverride.kt")
        public void testChangeSetterVisibilityInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeSetterVisibilityInOverride.kt");
        }

        @Test
        @TestMetadata("changeVarargModifierInOverride.kt")
        public void testChangeVarargModifierInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVarargModifierInOverride.kt");
        }

        @Test
        @TestMetadata("changeVisibilityInOverride.kt")
        public void testChangeVisibilityInOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVisibilityInOverride.kt");
        }

        @Test
        @TestMetadata("covariantFunctionOverride.kt")
        public void testCovariantFunctionOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantFunctionOverride.kt");
        }

        @Test
        @TestMetadata("covariantOverrideGenericUpperBound.kt")
        public void testCovariantOverrideGenericUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenericUpperBound.kt");
        }

        @Test
        @TestMetadata("covariantOverrideGenerics.kt")
        public void testCovariantOverrideGenerics() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenerics.kt");
        }

        @Test
        @TestMetadata("covariantPropertyOverride.kt")
        public void testCovariantPropertyOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantPropertyOverride.kt");
        }

        @Test
        @TestMetadata("flexibleTypesMatching.kt")
        public void testFlexibleTypesMatching() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/flexibleTypesMatching.kt");
        }

        @Test
        @TestMetadata("injectContextReceiverOverload.kt")
        public void testInjectContextReceiverOverload() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectContextReceiverOverload.kt");
        }

        @Test
        @TestMetadata("propertyKindOverride.kt")
        public void testPropertyKindOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/propertyKindOverride.kt");
        }

        @Test
        @TestMetadata("severalMismatches.kt")
        public void testSeveralMismatches() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/severalMismatches.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
      @TestDataPath("$PROJECT_ROOT")
      public class DefaultArguments {
        @Test
        @TestMetadata("companionMethodViaActualTypealias.kt")
        public void testCompanionMethodViaActualTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/companionMethodViaActualTypealias.kt");
        }

        @Test
        @TestMetadata("constructor.kt")
        public void testConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructor.kt");
        }

        @Test
        @TestMetadata("constructorDefaultArgsViaActualTypealias.kt")
        public void testConstructorDefaultArgsViaActualTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructorDefaultArgsViaActualTypealias.kt");
        }

        @Test
        @TestMetadata("expectedDeclaresDefaultArguments.kt")
        public void testExpectedDeclaresDefaultArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedDeclaresDefaultArguments.kt");
        }

        @Test
        @TestMetadata("expectedInheritsDefaultArguments.kt")
        public void testExpectedInheritsDefaultArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedInheritsDefaultArguments.kt");
        }

        @Test
        @TestMetadata("expectedVsNonExpectedWithDefaults.kt")
        public void testExpectedVsNonExpectedWithDefaults() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedVsNonExpectedWithDefaults.kt");
        }

        @Test
        @TestMetadata("genericArrayClassReference.kt")
        public void testGenericArrayClassReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/genericArrayClassReference.kt");
        }

        @Test
        @TestMetadata("nestedClassMethodsViaActualTypealias.kt")
        public void testNestedClassMethodsViaActualTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedClassMethodsViaActualTypealias.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation")
      @TestDataPath("$PROJECT_ROOT")
      public class DeprecatedAnnotation {
        @Test
        @TestMetadata("hidden.kt")
        public void testHidden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation/hidden.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization")
      @TestDataPath("$PROJECT_ROOT")
      public class DirectJavaActualization {
        @Test
        @TestMetadata("directJavaActualization_clashWithActualTypealias.kt")
        public void testDirectJavaActualization_clashWithActualTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_clashWithActualTypealias.kt");
        }

        @Test
        @TestMetadata("directJavaActualization_multipleActuals.kt")
        public void testDirectJavaActualization_multipleActuals() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_multipleActuals.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
      @TestDataPath("$PROJECT_ROOT")
      public class Enum {
        @Test
        @TestMetadata("enumEntryWithBody.kt")
        public void testEnumEntryWithBody() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/enumEntryWithBody.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness")
      @TestDataPath("$PROJECT_ROOT")
      public class Exhaustiveness {
        @Test
        @TestMetadata("commonSealedWithPlatformInheritor.kt")
        public void testCommonSealedWithPlatformInheritor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/commonSealedWithPlatformInheritor.kt");
        }

        @Test
        @TestMetadata("expectEnum.kt")
        public void testExpectEnum() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnum.kt");
        }

        @Test
        @TestMetadata("expectEnumIntersection.kt")
        public void testExpectEnumIntersection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnumIntersection.kt");
        }

        @Test
        @TestMetadata("expectSealedClass.kt")
        public void testExpectSealedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClass.kt");
        }

        @Test
        @TestMetadata("expectSealedClassIntersection.kt")
        public void testExpectSealedClassIntersection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassIntersection.kt");
        }

        @Test
        @TestMetadata("expectSealedClassWithInheritorsInSeveralModules.kt")
        public void testExpectSealedClassWithInheritorsInSeveralModules() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithInheritorsInSeveralModules.kt");
        }

        @Test
        @TestMetadata("expectSealedClassWithInheritorsInSeveralModules_typealiasActualization.kt")
        public void testExpectSealedClassWithInheritorsInSeveralModules_typealiasActualization() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithInheritorsInSeveralModules_typealiasActualization.kt");
        }

        @Test
        @TestMetadata("expectSealedInterface.kt")
        public void testExpectSealedInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedInterface.kt");
        }

        @Test
        @TestMetadata("kt45796.kt")
        public void testKt45796() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/kt45796.kt");
        }

        @Test
        @TestMetadata("sealedHierarchyInBambooMppStructure.kt")
        public void testSealedHierarchyInBambooMppStructure() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/sealedHierarchyInBambooMppStructure.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderClass {
        @Test
        @TestMetadata("actualMethodInExpectClass.kt")
        public void testActualMethodInExpectClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMethodInExpectClass.kt");
        }

        @Test
        @TestMetadata("actualMissing.kt")
        public void testActualMissing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMissing.kt");
        }

        @Test
        @TestMetadata("baseExpectClassWithoutConstructor.kt")
        public void testBaseExpectClassWithoutConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/baseExpectClassWithoutConstructor.kt");
        }

        @Test
        @TestMetadata("dontOverrideMethodsFromInterfaceInCommonCode.kt")
        public void testDontOverrideMethodsFromInterfaceInCommonCode() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/dontOverrideMethodsFromInterfaceInCommonCode.kt");
        }

        @Test
        @TestMetadata("equalsOverrideInActualInterface.kt")
        public void testEqualsOverrideInActualInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/equalsOverrideInActualInterface.kt");
        }

        @Test
        @TestMetadata("expectClassWithoutConstructor.kt")
        public void testExpectClassWithoutConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithoutConstructor.kt");
        }

        @Test
        @TestMetadata("expectedClassConstructorPropertyParameters.kt")
        public void testExpectedClassConstructorPropertyParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectedClassConstructorPropertyParameters.kt");
        }

        @Test
        @TestMetadata("extendExpectedClassWithoutExplicitOverrideOfMethod.kt")
        public void testExtendExpectedClassWithoutExplicitOverrideOfMethod() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithoutExplicitOverrideOfMethod.kt");
        }

        @Test
        @TestMetadata("extraHeaderOnMembers.kt")
        public void testExtraHeaderOnMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/extraHeaderOnMembers.kt");
        }

        @Test
        @TestMetadata("modalityCheckForExplicitAndImplicitOverride.kt")
        public void testModalityCheckForExplicitAndImplicitOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/modalityCheckForExplicitAndImplicitOverride.kt");
        }

        @Test
        @TestMetadata("nestedClasses.kt")
        public void testNestedClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClasses.kt");
        }

        @Test
        @TestMetadata("privateMembers.kt")
        public void testPrivateMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/privateMembers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
      @TestDataPath("$PROJECT_ROOT")
      public class Hmpp {
        @Test
        @TestMetadata("actualizeSubtypeBeforeSupertype.kt")
        public void testActualizeSubtypeBeforeSupertype() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizeSubtypeBeforeSupertype.kt");
        }

        @Test
        @TestMetadata("hmppRedeclaration.kt")
        public void testHmppRedeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclaration.kt");
        }

        @Test
        @TestMetadata("hmppRedeclarationWithExpectActualPair.kt")
        public void testHmppRedeclarationWithExpectActualPair() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclarationWithExpectActualPair.kt");
        }

        @Test
        @TestMetadata("hmppSignatureClash.kt")
        public void testHmppSignatureClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppSignatureClash.kt");
        }

        @Test
        @TestMetadata("kt-55570.kt")
        public void testKt_55570() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/kt-55570.kt");
        }

        @Test
        @TestMetadata("recursiveActualTypealiasExpansion_1.kt")
        public void testRecursiveActualTypealiasExpansion_1() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/recursiveActualTypealiasExpansion_1.kt");
        }

        @Test
        @TestMetadata("recursiveActualTypealiasExpansion_2.kt")
        public void testRecursiveActualTypealiasExpansion_2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/recursiveActualTypealiasExpansion_2.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class MultiplatformCompositeAnalysis {
          @Test
          @TestMetadata("sealedInheritorsInComplexModuleStructure.kt")
          public void testSealedInheritorsInComplexModuleStructure() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsInComplexModuleStructure.kt");
          }

          @Test
          @TestMetadata("sealedInheritorsIncorrectExpect.kt")
          public void testSealedInheritorsIncorrectExpect() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectExpect.kt");
          }

          @Test
          @TestMetadata("sealedInheritorsIncorrectNonExpect.kt")
          public void testSealedInheritorsIncorrectNonExpect() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectNonExpect.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/inlineClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineClasses {
        @Test
        @TestMetadata("expectActualInlineClass.kt")
        public void testExpectActualInlineClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/expectActualInlineClass.kt");
        }

        @Test
        @TestMetadata("valueClassNotFinal.kt")
        public void testValueClassNotFinal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/valueClassNotFinal.kt");
        }

        @Test
        @TestMetadata("valueClassWithInapplicableParameterType.kt")
        public void testValueClassWithInapplicableParameterType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/valueClassWithInapplicableParameterType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
      @TestDataPath("$PROJECT_ROOT")
      public class Java {
        @Test
        @TestMetadata("varPropertyAgainstJavaGetterAndNonFinalField.kt")
        public void testVarPropertyAgainstJavaGetterAndNonFinalField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaGetterAndNonFinalField.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/scopes")
      @TestDataPath("$PROJECT_ROOT")
      public class Scopes {
        @Test
        @TestMetadata("actualFakeOverride_defaultParamsIncompatibility.kt")
        public void testActualFakeOverride_defaultParamsIncompatibility() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_defaultParamsIncompatibility.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride_substitutionFakeOverride.kt")
        public void testActualFakeOverride_substitutionFakeOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_substitutionFakeOverride.kt");
        }

        @Test
        @TestMetadata("actualFakeOverride_transitiveFakeOverrides_incompatible.kt")
        public void testActualFakeOverride_transitiveFakeOverrides_incompatible() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_incompatible.kt");
        }

        @Test
        @TestMetadata("defaultParams_inheritanceByDelegation_positive.kt")
        public void testDefaultParams_inheritanceByDelegation_positive() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_positive.kt");
        }

        @Test
        @TestMetadata("funInterfaceDiagnostics.kt")
        public void testFunInterfaceDiagnostics() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceDiagnostics.kt");
        }

        @Test
        @TestMetadata("funInterfaceIsHeirOfExpect.kt")
        public void testFunInterfaceIsHeirOfExpect() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfExpect.kt");
        }

        @Test
        @TestMetadata("funInterfaceIsHeirOfExpectJK.kt")
        public void testFunInterfaceIsHeirOfExpectJK() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfExpectJK.kt");
        }

        @Test
        @TestMetadata("funInterfaceIsHeirOfTwoExpect.kt")
        public void testFunInterfaceIsHeirOfTwoExpect() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfTwoExpect.kt");
        }

        @Test
        @TestMetadata("implicitActualFakeOverride_AbstractMap.kt")
        public void testImplicitActualFakeOverride_AbstractMap() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_AbstractMap.kt");
        }

        @Test
        @TestMetadata("manyImplMemberNotImplemented.kt")
        public void testManyImplMemberNotImplemented() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/manyImplMemberNotImplemented.kt");
        }

        @Test
        @TestMetadata("manyInterfacesMemberNotImplemented.kt")
        public void testManyInterfacesMemberNotImplemented() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/manyInterfacesMemberNotImplemented.kt");
        }

        @Test
        @TestMetadata("mixedFunctionalTypesInSupertypes.kt")
        public void testMixedFunctionalTypesInSupertypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/mixedFunctionalTypesInSupertypes.kt");
        }

        @Test
        @TestMetadata("multipleDefaultsInhereted.kt")
        public void testMultipleDefaultsInhereted() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/multipleDefaultsInhereted.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/smartCasts")
      @TestDataPath("$PROJECT_ROOT")
      public class SmartCasts {
        @Test
        @TestMetadata("classNoDefaultConstructor.kt")
        public void testClassNoDefaultConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/classNoDefaultConstructor.kt");
        }

        @Test
        @TestMetadata("inlineFunction.kt")
        public void testInlineFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/inlineFunction.kt");
        }

        @Test
        @TestMetadata("kt61340_commonCode.kt")
        public void testKt61340_commonCode() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_commonCode.kt");
        }

        @Test
        @TestMetadata("kt61340_platformCode.kt")
        public void testKt61340_platformCode() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_platformCode.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
      @TestDataPath("$PROJECT_ROOT")
      public class TopLevelFun {
        @Test
        @TestMetadata("implDeclarationWithoutBody.kt")
        public void testImplDeclarationWithoutBody() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implDeclarationWithoutBody.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/typealias")
      @TestDataPath("$PROJECT_ROOT")
      public class Typealias {
        @Test
        @TestMetadata("actualTypealiasClassifierRedeclaration.kt")
        public void testActualTypealiasClassifierRedeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasClassifierRedeclaration.kt");
        }

        @Test
        @TestMetadata("actualTypealiasToNothing.kt")
        public void testActualTypealiasToNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing.kt");
        }

        @Test
        @TestMetadata("actualTypealiasToNothing_oldLanguageVersion.kt")
        public void testActualTypealiasToNothing_oldLanguageVersion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing_oldLanguageVersion.kt");
        }

        @Test
        @TestMetadata("actualTypealiasToNullableType.kt")
        public void testActualTypealiasToNullableType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType.kt");
        }

        @Test
        @TestMetadata("actualTypealiasToNullableType_oldLanguageVersion.kt")
        public void testActualTypealiasToNullableType_oldLanguageVersion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType_oldLanguageVersion.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/namedArguments")
    @TestDataPath("$PROJECT_ROOT")
    public class NamedArguments {
      @Test
      @TestMetadata("ambiguousNamedArguments1.kt")
      public void testAmbiguousNamedArguments1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments1.kt");
      }

      @Test
      @TestMetadata("ambiguousNamedArguments2.kt")
      public void testAmbiguousNamedArguments2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArguments2.kt");
      }

      @Test
      @TestMetadata("ambiguousNamedArgumentsWithGenerics1.kt")
      public void testAmbiguousNamedArgumentsWithGenerics1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics1.kt");
      }

      @Test
      @TestMetadata("ambiguousNamedArgumentsWithGenerics2.kt")
      public void testAmbiguousNamedArgumentsWithGenerics2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics2.kt");
      }

      @Test
      @TestMetadata("ambiguousNamedArgumentsWithGenerics3.kt")
      public void testAmbiguousNamedArgumentsWithGenerics3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/ambiguousNamedArgumentsWithGenerics3.kt");
      }

      @Test
      @TestMetadata("disallowForDelegationToJavaMethods.kt")
      public void testDisallowForDelegationToJavaMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForDelegationToJavaMethods.kt");
      }

      @Test
      @TestMetadata("disallowForFunctionTypes.kt")
      public void testDisallowForFunctionTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForFunctionTypes.kt");
      }

      @Test
      @TestMetadata("disallowForJavaConstructor.kt")
      public void testDisallowForJavaConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForJavaConstructor.kt");
      }

      @Test
      @TestMetadata("disallowForJavaMethods.kt")
      public void testDisallowForJavaMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForJavaMethods.kt");
      }

      @Test
      @TestMetadata("disallowForSamAdapterConstructor.kt")
      public void testDisallowForSamAdapterConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterConstructor.kt");
      }

      @Test
      @TestMetadata("disallowForSamAdapterFunction.kt")
      public void testDisallowForSamAdapterFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/disallowForSamAdapterFunction.kt");
      }

      @Test
      @TestMetadata("multipleJavaOverloadsNamedArgumentsNotAllowed.kt")
      public void testMultipleJavaOverloadsNamedArgumentsNotAllowed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/multipleJavaOverloadsNamedArgumentsNotAllowed.kt");
      }

      @Test
      @TestMetadata("namedArgumentsAndDefaultValues.kt")
      public void testNamedArgumentsAndDefaultValues() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/namedArgumentsAndDefaultValues.kt");
      }

      @Test
      @TestMetadata("namedArgumentsInOverrides.kt")
      public void testNamedArgumentsInOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/namedArgumentsInOverrides.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition")
      @TestDataPath("$PROJECT_ROOT")
      public class MixedNamedPosition {
        @Test
        @TestMetadata("defaults.kt")
        public void testDefaults() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/defaults.kt");
        }

        @Test
        @TestMetadata("javaOverrideOfKotlinNamed.kt")
        public void testJavaOverrideOfKotlinNamed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/javaOverrideOfKotlinNamed.kt");
        }

        @Test
        @TestMetadata("oldInference.kt")
        public void testOldInference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/oldInference.kt");
        }

        @Test
        @TestMetadata("secondNamed.kt")
        public void testSecondNamed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/secondNamed.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/simple.kt");
        }

        @Test
        @TestMetadata("varargs.kt")
        public void testVarargs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/namedArguments/mixedNamedPosition/varargs.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullabilityAndSmartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class NullabilityAndSmartCasts {
      @Test
      @TestMetadata("AssertNotNull.kt")
      public void testAssertNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/AssertNotNull.kt");
      }

      @Test
      @TestMetadata("augmentedAssignment.kt")
      public void testAugmentedAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/augmentedAssignment.kt");
      }

      @Test
      @TestMetadata("funcLiteralArgsInsideAmbiguity.kt")
      public void testFuncLiteralArgsInsideAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideAmbiguity.kt");
      }

      @Test
      @TestMetadata("funcLiteralArgsInsideUnresolvedFunction.kt")
      public void testFuncLiteralArgsInsideUnresolvedFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/funcLiteralArgsInsideUnresolvedFunction.kt");
      }

      @Test
      @TestMetadata("InfixCallNullability.kt")
      public void testInfixCallNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/InfixCallNullability.kt");
      }

      @Test
      @TestMetadata("kt1270.kt")
      public void testKt1270() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1270.kt");
      }

      @Test
      @TestMetadata("kt1778.kt")
      public void testKt1778() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt1778.kt");
      }

      @Test
      @TestMetadata("kt2125.kt")
      public void testKt2125() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2125.kt");
      }

      @Test
      @TestMetadata("kt2146.kt")
      public void testKt2146() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2146.kt");
      }

      @Test
      @TestMetadata("kt2164.kt")
      public void testKt2164() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2164.kt");
      }

      @Test
      @TestMetadata("kt2176.kt")
      public void testKt2176() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2176.kt");
      }

      @Test
      @TestMetadata("kt2216.kt")
      public void testKt2216() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2216.kt");
      }

      @Test
      @TestMetadata("kt2234.kt")
      public void testKt2234() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt2234.kt");
      }

      @Test
      @TestMetadata("kt362.kt")
      public void testKt362() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/kt362.kt");
      }

      @Test
      @TestMetadata("noUnnecessaryNotNullAssertionOnErrorType.kt")
      public void testNoUnnecessaryNotNullAssertionOnErrorType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/noUnnecessaryNotNullAssertionOnErrorType.kt");
      }

      @Test
      @TestMetadata("nullableReceiverWithOverloadedMethod.kt")
      public void testNullableReceiverWithOverloadedMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/nullableReceiverWithOverloadedMethod.kt");
      }

      @Test
      @TestMetadata("QualifiedExpressionNullability.kt")
      public void testQualifiedExpressionNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/QualifiedExpressionNullability.kt");
      }

      @Test
      @TestMetadata("ReceiverNullability.kt")
      public void testReceiverNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/ReceiverNullability.kt");
      }

      @Test
      @TestMetadata("unstableSmartcastWhenOpenGetterWithOverloading.kt")
      public void testUnstableSmartcastWhenOpenGetterWithOverloading() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWhenOpenGetterWithOverloading.kt");
      }

      @Test
      @TestMetadata("unstableSmartcastWithOverloadedExtensions.kt")
      public void testUnstableSmartcastWithOverloadedExtensions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullabilityAndSmartCasts/unstableSmartcastWithOverloadedExtensions.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/nullableTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class NullableTypes {
      @Test
      @TestMetadata("inferenceFlexibleTToNullable.kt")
      public void testInferenceFlexibleTToNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/inferenceFlexibleTToNullable.kt");
      }

      @Test
      @TestMetadata("kt58844.kt")
      public void testKt58844() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/kt58844.kt");
      }

      @Test
      @TestMetadata("notUselessComparasionAfterSmartcast.kt")
      public void testNotUselessComparasionAfterSmartcast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/notUselessComparasionAfterSmartcast.kt");
      }

      @Test
      @TestMetadata("nullableArgumentForIn.kt")
      public void testNullableArgumentForIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentForIn.kt");
      }

      @Test
      @TestMetadata("nullableArgumentToNonNullParameterPlatform.kt")
      public void testNullableArgumentToNonNullParameterPlatform() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterPlatform.kt");
      }

      @Test
      @TestMetadata("nullableArgumentToNonNullParameterSimple.kt")
      public void testNullableArgumentToNonNullParameterSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/nullableArgumentToNonNullParameterSimple.kt");
      }

      @Test
      @TestMetadata("redundantNullableInSupertype.kt")
      public void testRedundantNullableInSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/redundantNullableInSupertype.kt");
      }

      @Test
      @TestMetadata("safeCallOnNotNullableType.kt")
      public void testSafeCallOnNotNullableType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/safeCallOnNotNullableType.kt");
      }

      @Test
      @TestMetadata("safeCallOperators.kt")
      public void testSafeCallOperators() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/safeCallOperators.kt");
      }

      @Test
      @TestMetadata("safeCallWithInvoke.kt")
      public void testSafeCallWithInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/safeCallWithInvoke.kt");
      }

      @Test
      @TestMetadata("takingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes.kt")
      public void testTakingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/takingNullabilityFromExplicitTypeArgmentsInsteadOfUsingFlexibleTypes.kt");
      }

      @Test
      @TestMetadata("unsafeAssignmentOfNullToJavaNotNullable.kt")
      public void testUnsafeAssignmentOfNullToJavaNotNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/unsafeAssignmentOfNullToJavaNotNullable.kt");
      }

      @Test
      @TestMetadata("unsafeCallOnOperatorRedCode.kt")
      public void testUnsafeCallOnOperatorRedCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/unsafeCallOnOperatorRedCode.kt");
      }

      @Test
      @TestMetadata("uselessElvis.kt")
      public void testUselessElvis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/nullableTypes/uselessElvis.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/numbers")
    @TestDataPath("$PROJECT_ROOT")
    public class Numbers {
      @Test
      @TestMetadata("characterIsNotANumber.kt")
      public void testCharacterIsNotANumber() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/characterIsNotANumber.kt");
      }

      @Test
      @TestMetadata("doublesInSimpleConstraints.kt")
      public void testDoublesInSimpleConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/doublesInSimpleConstraints.kt");
      }

      @Test
      @TestMetadata("intValuesOutOfRange.kt")
      public void testIntValuesOutOfRange() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/intValuesOutOfRange.kt");
      }

      @Test
      @TestMetadata("integerLiteralWillChangeResolveInFunctionReturnPosition.kt")
      public void testIntegerLiteralWillChangeResolveInFunctionReturnPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/integerLiteralWillChangeResolveInFunctionReturnPosition.kt");
      }

      @Test
      @TestMetadata("kt45970.kt")
      public void testKt45970() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/kt45970.kt");
      }

      @Test
      @TestMetadata("literalReceiverWithIntegerValueType.kt")
      public void testLiteralReceiverWithIntegerValueType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/literalReceiverWithIntegerValueType.kt");
      }

      @Test
      @TestMetadata("newLiteralOperatorsResolution_warning.kt")
      public void testNewLiteralOperatorsResolution_warning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/newLiteralOperatorsResolution_warning.kt");
      }

      @Test
      @TestMetadata("numbersInSimpleConstraints.kt")
      public void testNumbersInSimpleConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/numbers/numbersInSimpleConstraints.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/objects")
    @TestDataPath("$PROJECT_ROOT")
    public class Objects {
      @Test
      @TestMetadata("invokeOnInnerObject.kt")
      public void testInvokeOnInnerObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/invokeOnInnerObject.kt");
      }

      @Test
      @TestMetadata("kt5527.kt")
      public void testKt5527() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt5527.kt");
      }

      @Test
      @TestMetadata("localObjectInsideObject.kt")
      public void testLocalObjectInsideObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/localObjectInsideObject.kt");
      }

      @Test
      @TestMetadata("localObjects.kt")
      public void testLocalObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/localObjects.kt");
      }

      @Test
      @TestMetadata("nestedClassInAnonymousObject.kt")
      public void testNestedClassInAnonymousObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/nestedClassInAnonymousObject.kt");
      }

      @Test
      @TestMetadata("objectLiteralExpressionTypeMismatch.kt")
      public void testObjectLiteralExpressionTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/objectLiteralExpressionTypeMismatch.kt");
      }

      @Test
      @TestMetadata("Objects.kt")
      public void testObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/Objects.kt");
      }

      @Test
      @TestMetadata("ObjectsInheritance.kt")
      public void testObjectsInheritance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/ObjectsInheritance.kt");
      }

      @Test
      @TestMetadata("ObjectsLocal.kt")
      public void testObjectsLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/ObjectsLocal.kt");
      }

      @Test
      @TestMetadata("ObjectsNested.kt")
      public void testObjectsNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/ObjectsNested.kt");
      }

      @Test
      @TestMetadata("upperBoundViolated.kt")
      public void testUpperBoundViolated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/upperBoundViolated.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/objects/kt21515")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt21515 {
        @Test
        @TestMetadata("annotationConstructor.kt")
        public void testAnnotationConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/annotationConstructor.kt");
        }

        @Test
        @TestMetadata("callableReferencesNew.kt")
        public void testCallableReferencesNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesNew.kt");
        }

        @Test
        @TestMetadata("callableReferencesOld.kt")
        public void testCallableReferencesOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOld.kt");
        }

        @Test
        @TestMetadata("callableReferencesOldComplexCases.kt")
        public void testCallableReferencesOldComplexCases() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/callableReferencesOldComplexCases.kt");
        }

        @Test
        @TestMetadata("classifierFromCompanionObjectNew.kt")
        public void testClassifierFromCompanionObjectNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectNew.kt");
        }

        @Test
        @TestMetadata("classifierFromCompanionObjectOld.kt")
        public void testClassifierFromCompanionObjectOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/classifierFromCompanionObjectOld.kt");
        }

        @Test
        @TestMetadata("inheritedFromDeprecatedNew.kt")
        public void testInheritedFromDeprecatedNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedNew.kt");
        }

        @Test
        @TestMetadata("inheritedFromDeprecatedOld.kt")
        public void testInheritedFromDeprecatedOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/inheritedFromDeprecatedOld.kt");
        }

        @Test
        @TestMetadata("staticsFromJavaNew.kt")
        public void testStaticsFromJavaNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaNew.kt");
        }

        @Test
        @TestMetadata("staticsFromJavaOld.kt")
        public void testStaticsFromJavaOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaOld.kt");
        }

        @Test
        @TestMetadata("staticsFromJavaWithQualificationNew.kt")
        public void testStaticsFromJavaWithQualificationNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaWithQualificationNew.kt");
        }

        @Test
        @TestMetadata("staticsFromJavaWithQualificationOld.kt")
        public void testStaticsFromJavaWithQualificationOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/staticsFromJavaWithQualificationOld.kt");
        }

        @Test
        @TestMetadata("useDeprecatedConstructorNew.kt")
        public void testUseDeprecatedConstructorNew() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorNew.kt");
        }

        @Test
        @TestMetadata("useDeprecatedConstructorOld.kt")
        public void testUseDeprecatedConstructorOld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/objects/kt21515/useDeprecatedConstructorOld.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorRem")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorRem {
      @Test
      @TestMetadata("forbiddenModOperatorConvention.kt")
      public void testForbiddenModOperatorConvention() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorRem/forbiddenModOperatorConvention.kt");
      }

      @Test
      @TestMetadata("numberRemConversions.kt")
      public void testNumberRemConversions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorRem/numberRemConversions.kt");
      }

      @Test
      @TestMetadata("remAndRemAssignAmbiguity.kt")
      public void testRemAndRemAssignAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorRem/remAndRemAssignAmbiguity.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/operatorsOverloading")
    @TestDataPath("$PROJECT_ROOT")
    public class OperatorsOverloading {
      @Test
      @TestMetadata("AssignOperatorAmbiguity.kt")
      public void testAssignOperatorAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguity.kt");
      }

      @Test
      @TestMetadata("AssignOperatorAmbiguityExtension.kt")
      public void testAssignOperatorAmbiguityExtension() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/AssignOperatorAmbiguityExtension.kt");
      }

      @Test
      @TestMetadata("AssignmentOperations.kt")
      public void testAssignmentOperations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/AssignmentOperations.kt");
      }

      @Test
      @TestMetadata("assignmentOperationsCheckReturnType.kt")
      public void testAssignmentOperationsCheckReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/assignmentOperationsCheckReturnType.kt");
      }

      @Test
      @TestMetadata("compareToNullable.kt")
      public void testCompareToNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/compareToNullable.kt");
      }

      @Test
      @TestMetadata("destructuringDeclarationWithInvoke.kt")
      public void testDestructuringDeclarationWithInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/destructuringDeclarationWithInvoke.kt");
      }

      @Test
      @TestMetadata("implicitInvokeOnPropertyInItsInitializer.kt")
      public void testImplicitInvokeOnPropertyInItsInitializer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/implicitInvokeOnPropertyInItsInitializer.kt");
      }

      @Test
      @TestMetadata("InconsistentGetSet.kt")
      public void testInconsistentGetSet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/InconsistentGetSet.kt");
      }

      @Test
      @TestMetadata("incorrectComponentExtension.kt")
      public void testIncorrectComponentExtension() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/incorrectComponentExtension.kt");
      }

      @Test
      @TestMetadata("IteratorAmbiguity.kt")
      public void testIteratorAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/IteratorAmbiguity.kt");
      }

      @Test
      @TestMetadata("kt1028.kt")
      public void testKt1028() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/kt1028.kt");
      }

      @Test
      @TestMetadata("kt11300.kt")
      public void testKt11300() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/kt11300.kt");
      }

      @Test
      @TestMetadata("kt13330.kt")
      public void testKt13330() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/kt13330.kt");
      }

      @Test
      @TestMetadata("plusAssignOnArray.kt")
      public void testPlusAssignOnArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnArray.kt");
      }

      @Test
      @TestMetadata("plusAssignOnLocal.kt")
      public void testPlusAssignOnLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnLocal.kt");
      }

      @Test
      @TestMetadata("plusAssignOnProperty.kt")
      public void testPlusAssignOnProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/plusAssignOnProperty.kt");
      }

      @Test
      @TestMetadata("PropertyInvoke.kt")
      public void testPropertyInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/PropertyInvoke.kt");
      }

      @Test
      @TestMetadata("unresolvedOperator.kt")
      public void testUnresolvedOperator() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/operatorsOverloading/unresolvedOperator.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/overload")
    @TestDataPath("$PROJECT_ROOT")
    public class Overload {
      @Test
      @TestMetadata("ConflictingOlverloadsGenericFunctions.kt")
      public void testConflictingOlverloadsGenericFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOlverloadsGenericFunctions.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
      public void testConflictingOverloadsFunsDifferentReturnInClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInClass.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsFunsDifferentReturnInPackage.kt")
      public void testConflictingOverloadsFunsDifferentReturnInPackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsFunsDifferentReturnInPackage.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsIdenticalExtFunsInPackage.kt")
      public void testConflictingOverloadsIdenticalExtFunsInPackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalExtFunsInPackage.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
      public void testConflictingOverloadsIdenticalFunsInClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalFunsInClass.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsIdenticalValsInClass.kt")
      public void testConflictingOverloadsIdenticalValsInClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsIdenticalValsInClass.kt");
      }

      @Test
      @TestMetadata("ConflictingOverloadsValsDifferentTypeInClass.kt")
      public void testConflictingOverloadsValsDifferentTypeInClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConflictingOverloadsValsDifferentTypeInClass.kt");
      }

      @Test
      @TestMetadata("ConstructorVsFunOverload.kt")
      public void testConstructorVsFunOverload() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/ConstructorVsFunOverload.kt");
      }

      @Test
      @TestMetadata("defaultParameters.kt")
      public void testDefaultParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/defaultParameters.kt");
      }

      @Test
      @TestMetadata("disambiguateByFailedAbstractClassCheck.kt")
      public void testDisambiguateByFailedAbstractClassCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/disambiguateByFailedAbstractClassCheck.kt");
      }

      @Test
      @TestMetadata("kt2493.kt")
      public void testKt2493() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/kt2493.kt");
      }

      @Test
      @TestMetadata("LocalFunctions.kt")
      public void testLocalFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/LocalFunctions.kt");
      }

      @Test
      @TestMetadata("onlyPrivateOverloadsDiagnostic.kt")
      public void testOnlyPrivateOverloadsDiagnostic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/onlyPrivateOverloadsDiagnostic.kt");
      }

      @Test
      @TestMetadata("OverloadingByTypeParameterNullability.kt")
      public void testOverloadingByTypeParameterNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/OverloadingByTypeParameterNullability.kt");
      }

      @Test
      @TestMetadata("RedeclarationThroughDestructuring.kt")
      public void testRedeclarationThroughDestructuring() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/RedeclarationThroughDestructuring.kt");
      }

      @Test
      @TestMetadata("TypeParameterMultipleBounds.kt")
      public void testTypeParameterMultipleBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/TypeParameterMultipleBounds.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden")
      @TestDataPath("$PROJECT_ROOT")
      public class NoConflictingOverloadsWithDeprecatedHidden {
        @Test
        @TestMetadata("ConflictingOverloadsFunsDifferentReturnInClass.kt")
        public void testConflictingOverloadsFunsDifferentReturnInClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsFunsDifferentReturnInClass.kt");
        }

        @Test
        @TestMetadata("ConflictingOverloadsIdenticalFunsInClass.kt")
        public void testConflictingOverloadsIdenticalFunsInClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/ConflictingOverloadsIdenticalFunsInClass.kt");
        }

        @Test
        @TestMetadata("DifferentDeprecationLevels.kt")
        public void testDifferentDeprecationLevels() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/DifferentDeprecationLevels.kt");
        }

        @Test
        @TestMetadata("LocalFunctions.kt")
        public void testLocalFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/LocalFunctions.kt");
        }

        @Test
        @TestMetadata("NoHiddenTransitivityFromClassifierToConstructor.kt")
        public void testNoHiddenTransitivityFromClassifierToConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/NoHiddenTransitivityFromClassifierToConstructor.kt");
        }

        @Test
        @TestMetadata("OpenFunctionsInMemberScope.kt")
        public void testOpenFunctionsInMemberScope() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/OpenFunctionsInMemberScope.kt");
        }

        @Test
        @TestMetadata("TypeParameterMultipleBounds.kt")
        public void testTypeParameterMultipleBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/overload/noConflictingOverloadsWithDeprecatedHidden/TypeParameterMultipleBounds.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/override")
    @TestDataPath("$PROJECT_ROOT")
    public class Override {
      @Test
      @TestMetadata("AbstractFunNotImplemented.kt")
      public void testAbstractFunNotImplemented() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/AbstractFunNotImplemented.kt");
      }

      @Test
      @TestMetadata("AbstractValNotImplemented.kt")
      public void testAbstractValNotImplemented() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/AbstractValNotImplemented.kt");
      }

      @Test
      @TestMetadata("AbstractVarNotImplemented.kt")
      public void testAbstractVarNotImplemented() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/AbstractVarNotImplemented.kt");
      }

      @Test
      @TestMetadata("AllPrivateFromSuperTypes.kt")
      public void testAllPrivateFromSuperTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/AllPrivateFromSuperTypes.kt");
      }

      @Test
      @TestMetadata("ComplexValRedeclaration.kt")
      public void testComplexValRedeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ComplexValRedeclaration.kt");
      }

      @Test
      @TestMetadata("ConflictingFunctionSignatureFromSuperclass.kt")
      public void testConflictingFunctionSignatureFromSuperclass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ConflictingFunctionSignatureFromSuperclass.kt");
      }

      @Test
      @TestMetadata("ConflictingPropertySignatureFromSuperclass.kt")
      public void testConflictingPropertySignatureFromSuperclass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ConflictingPropertySignatureFromSuperclass.kt");
      }

      @Test
      @TestMetadata("contextReceivers.kt")
      public void testContextReceivers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/contextReceivers.kt");
      }

      @Test
      @TestMetadata("DefaultParameterValueInOverride.kt")
      public void testDefaultParameterValueInOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/DefaultParameterValueInOverride.kt");
      }

      @Test
      @TestMetadata("Delegation.kt")
      public void testDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/Delegation.kt");
      }

      @Test
      @TestMetadata("dnnOverridesFlexible.kt")
      public void testDnnOverridesFlexible() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/dnnOverridesFlexible.kt");
      }

      @Test
      @TestMetadata("DuplicateMethod.kt")
      public void testDuplicateMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/DuplicateMethod.kt");
      }

      @Test
      @TestMetadata("ExtendFunctionClass.kt")
      public void testExtendFunctionClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ExtendFunctionClass.kt");
      }

      @Test
      @TestMetadata("FakeOverrideDifferentDeclarationSignatures.kt")
      public void testFakeOverrideDifferentDeclarationSignatures() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/FakeOverrideDifferentDeclarationSignatures.kt");
      }

      @Test
      @TestMetadata("FakeOverrideModality1.kt")
      public void testFakeOverrideModality1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/FakeOverrideModality1.kt");
      }

      @Test
      @TestMetadata("FakeOverrideModality2.kt")
      public void testFakeOverrideModality2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/FakeOverrideModality2.kt");
      }

      @Test
      @TestMetadata("FakeOverrideModality3.kt")
      public void testFakeOverrideModality3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/FakeOverrideModality3.kt");
      }

      @Test
      @TestMetadata("Generics.kt")
      public void testGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/Generics.kt");
      }

      @Test
      @TestMetadata("kt12358.kt")
      public void testKt12358() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt12358.kt");
      }

      @Test
      @TestMetadata("kt12467.kt")
      public void testKt12467() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt12467.kt");
      }

      @Test
      @TestMetadata("kt12482.kt")
      public void testKt12482() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt12482.kt");
      }

      @Test
      @TestMetadata("kt1862.kt")
      public void testKt1862() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt1862.kt");
      }

      @Test
      @TestMetadata("kt2052.kt")
      public void testKt2052() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt2052.kt");
      }

      @Test
      @TestMetadata("kt4763.kt")
      public void testKt4763() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt4763.kt");
      }

      @Test
      @TestMetadata("kt4763property.kt")
      public void testKt4763property() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt4763property.kt");
      }

      @Test
      @TestMetadata("kt4785.kt")
      public void testKt4785() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/kt4785.kt");
      }

      @Test
      @TestMetadata("manyImplFromOneKotlinInterfaceWithDelegation.kt")
      public void testManyImplFromOneKotlinInterfaceWithDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/manyImplFromOneKotlinInterfaceWithDelegation.kt");
      }

      @Test
      @TestMetadata("MissingDelegate.kt")
      public void testMissingDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MissingDelegate.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultParametersInSupertypes.kt")
      public void testMultipleDefaultParametersInSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypes.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultParametersInSupertypesNoOverride.kt")
      public void testMultipleDefaultParametersInSupertypesNoOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MultipleDefaultParametersInSupertypesNoOverride.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultsAndNamesInSupertypes.kt")
      public void testMultipleDefaultsAndNamesInSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MultipleDefaultsAndNamesInSupertypes.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultsAndSubstitutionOverrides.kt")
      public void testMultipleDefaultsAndSubstitutionOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MultipleDefaultsAndSubstitutionOverrides.kt");
      }

      @Test
      @TestMetadata("MultipleDefaultsInSupertypesNoExplicitOverride.kt")
      public void testMultipleDefaultsInSupertypesNoExplicitOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/MultipleDefaultsInSupertypesNoExplicitOverride.kt");
      }

      @Test
      @TestMetadata("NoOverrideAndWeakenedVisibilityOnOneLine.kt")
      public void testNoOverrideAndWeakenedVisibilityOnOneLine() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/NoOverrideAndWeakenedVisibilityOnOneLine.kt");
      }

      @Test
      @TestMetadata("NonGenerics.kt")
      public void testNonGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/NonGenerics.kt");
      }

      @Test
      @TestMetadata("nothingToOverrideMessage.kt")
      public void testNothingToOverrideMessage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/nothingToOverrideMessage.kt");
      }

      @Test
      @TestMetadata("nothingToOverrideMessageWithJava.kt")
      public void testNothingToOverrideMessageWithJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/nothingToOverrideMessageWithJava.kt");
      }

      @Test
      @TestMetadata("ObjectDelegationManyImpl.kt")
      public void testObjectDelegationManyImpl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ObjectDelegationManyImpl.kt");
      }

      @Test
      @TestMetadata("overrideMemberFromFinalClass.kt")
      public void testOverrideMemberFromFinalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/overrideMemberFromFinalClass.kt");
      }

      @Test
      @TestMetadata("OverrideWithErrors.kt")
      public void testOverrideWithErrors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/OverrideWithErrors.kt");
      }

      @Test
      @TestMetadata("OverridingFinalMember.kt")
      public void testOverridingFinalMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/OverridingFinalMember.kt");
      }

      @Test
      @TestMetadata("ParentInheritsManyImplementations.kt")
      public void testParentInheritsManyImplementations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ParentInheritsManyImplementations.kt");
      }

      @Test
      @TestMetadata("ProtectedAndPrivateFromSupertypes.kt")
      public void testProtectedAndPrivateFromSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ProtectedAndPrivateFromSupertypes.kt");
      }

      @Test
      @TestMetadata("ToAbstractMembersFromSuper-kt1996.kt")
      public void testToAbstractMembersFromSuper_kt1996() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/ToAbstractMembersFromSuper-kt1996.kt");
      }

      @Test
      @TestMetadata("varImplementedByInheritedVal.kt")
      public void testVarImplementedByInheritedVal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/varImplementedByInheritedVal.kt");
      }

      @Test
      @TestMetadata("varImplementedByInheritedValError.kt")
      public void testVarImplementedByInheritedValError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/varImplementedByInheritedValError.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/clashesOnInheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class ClashesOnInheritance {
        @Test
        @TestMetadata("conflictingInherited.kt")
        public void testConflictingInherited() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/conflictingInherited.kt");
        }

        @Test
        @TestMetadata("covariantOverrides.kt")
        public void testCovariantOverrides() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/covariantOverrides.kt");
        }

        @Test
        @TestMetadata("flexibleReturnTypeList.kt")
        public void testFlexibleReturnTypeList() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/flexibleReturnTypeList.kt");
        }

        @Test
        @TestMetadata("kt13355.kt")
        public void testKt13355() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355.kt");
        }

        @Test
        @TestMetadata("kt13355viaJava.kt")
        public void testKt13355viaJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt13355viaJava.kt");
        }

        @Test
        @TestMetadata("kt9550.kt")
        public void testKt9550() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/kt9550.kt");
        }

        @Test
        @TestMetadata("packagePrivateAndPublic.kt")
        public void testPackagePrivateAndPublic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/packagePrivateAndPublic.kt");
        }

        @Test
        @TestMetadata("returnTypeMismatch.kt")
        public void testReturnTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/returnTypeMismatch.kt");
        }

        @Test
        @TestMetadata("supertypeOrder.kt")
        public void testSupertypeOrder() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/supertypeOrder.kt");
        }

        @Test
        @TestMetadata("unrelatedInherited.kt")
        public void testUnrelatedInherited() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/unrelatedInherited.kt");
        }

        @Test
        @TestMetadata("valTypeMismatch.kt")
        public void testValTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/valTypeMismatch.kt");
        }

        @Test
        @TestMetadata("varTypeMismatch.kt")
        public void testVarTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/clashesOnInheritance/varTypeMismatch.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/parameterNames")
      @TestDataPath("$PROJECT_ROOT")
      public class ParameterNames {
        @Test
        @TestMetadata("invokeInFunctionClass.kt")
        public void testInvokeInFunctionClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/parameterNames/invokeInFunctionClass.kt");
        }

        @Test
        @TestMetadata("kotlinInheritsBothJavaAndKotlin.kt")
        public void testKotlinInheritsBothJavaAndKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/parameterNames/kotlinInheritsBothJavaAndKotlin.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/override/typeParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeParameters {
        @Test
        @TestMetadata("differentSetsOfBounds.kt")
        public void testDifferentSetsOfBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/override/typeParameters/differentSetsOfBounds.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/parenthesizedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class ParenthesizedTypes {
      @Test
      @TestMetadata("splitModifierList.kt")
      public void testSplitModifierList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/parenthesizedTypes/splitModifierList.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/platformTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class PlatformTypes {
      @Test
      @TestMetadata("dereference.kt")
      public void testDereference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/dereference.kt");
      }

      @Test
      @TestMetadata("inference.kt")
      public void testInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/inference.kt");
      }

      @Test
      @TestMetadata("intVsIntegerAmbiguity.kt")
      public void testIntVsIntegerAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/intVsIntegerAmbiguity.kt");
      }

      @Test
      @TestMetadata("javaEmptyList.kt")
      public void testJavaEmptyList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/javaEmptyList.kt");
      }

      @Test
      @TestMetadata("javaMappedCtors.kt")
      public void testJavaMappedCtors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/javaMappedCtors.kt");
      }

      @Test
      @TestMetadata("noAnnotationInClassPath.kt")
      public void testNoAnnotationInClassPath() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/noAnnotationInClassPath.kt");
      }

      @Test
      @TestMetadata("nullableTypeArgument.kt")
      public void testNullableTypeArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullableTypeArgument.kt");
      }

      @Test
      @TestMetadata("rawOverrides.kt")
      public void testRawOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawOverrides.kt");
      }

      @Test
      @TestMetadata("rawSamOverrides.kt")
      public void testRawSamOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawSamOverrides.kt");
      }

      @Test
      @TestMetadata("safeCall.kt")
      public void testSafeCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/safeCall.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/commonSupertype")
      @TestDataPath("$PROJECT_ROOT")
      public class CommonSupertype {
        @Test
        @TestMetadata("mixedElvis.kt")
        public void testMixedElvis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedElvis.kt");
        }

        @Test
        @TestMetadata("mixedIf.kt")
        public void testMixedIf() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/commonSupertype/mixedIf.kt");
        }

        @Test
        @TestMetadata("withNothing.kt")
        public void testWithNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/commonSupertype/withNothing.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation")
      @TestDataPath("$PROJECT_ROOT")
      public class GenericVarianceViolation {
        @Test
        @TestMetadata("deepTypeHierarchy.kt")
        public void testDeepTypeHierarchy() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/deepTypeHierarchy.kt");
        }

        @Test
        @TestMetadata("javaOutProjection.kt")
        public void testJavaOutProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/javaOutProjection.kt");
        }

        @Test
        @TestMetadata("kotlinOutProjection.kt")
        public void testKotlinOutProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/kotlinOutProjection.kt");
        }

        @Test
        @TestMetadata("kotlinStarProjection.kt")
        public void testKotlinStarProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/kotlinStarProjection.kt");
        }

        @Test
        @TestMetadata("listSuperType.kt")
        public void testListSuperType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/listSuperType.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/simple.kt");
        }

        @Test
        @TestMetadata("smartCast.kt")
        public void testSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/smartCast.kt");
        }

        @Test
        @TestMetadata("strangeVariance.kt")
        public void testStrangeVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/strangeVariance.kt");
        }

        @Test
        @TestMetadata("valueFromJava.kt")
        public void testValueFromJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/genericVarianceViolation/valueFromJava.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/methodCall")
      @TestDataPath("$PROJECT_ROOT")
      public class MethodCall {
        @Test
        @TestMetadata("int.kt")
        public void testInt() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/methodCall/int.kt");
        }

        @Test
        @TestMetadata("objectArray.kt")
        public void testObjectArray() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/methodCall/objectArray.kt");
        }

        @Test
        @TestMetadata("singleton.kt")
        public void testSingleton() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/methodCall/singleton.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class NotNullTypeParameter {
        @Test
        @TestMetadata("enhancementFromAnnotation.kt")
        public void testEnhancementFromAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/enhancementFromAnnotation.kt");
        }

        @Test
        @TestMetadata("methodTypeParameter.kt")
        public void testMethodTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/methodTypeParameter.kt");
        }

        @Test
        @TestMetadata("noInheritanceValueParameter.kt")
        public void testNoInheritanceValueParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/noInheritanceValueParameter.kt");
        }

        @Test
        @TestMetadata("substitutionInSuperType.kt")
        public void testSubstitutionInSuperType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/notNullTypeParameter/substitutionInSuperType.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class NullabilityWarnings {
        @Test
        @TestMetadata("arithmetic.kt")
        public void testArithmetic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/arithmetic.kt");
        }

        @Test
        @TestMetadata("array.kt")
        public void testArray() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/array.kt");
        }

        @Test
        @TestMetadata("assignToVar.kt")
        public void testAssignToVar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/assignToVar.kt");
        }

        @Test
        @TestMetadata("conditions.kt")
        public void testConditions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/conditions.kt");
        }

        @Test
        @TestMetadata("dataFlowInfo.kt")
        public void testDataFlowInfo() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/dataFlowInfo.kt");
        }

        @Test
        @TestMetadata("defaultParameters.kt")
        public void testDefaultParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/defaultParameters.kt");
        }

        @Test
        @TestMetadata("delegatedProperties.kt")
        public void testDelegatedProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegatedProperties.kt");
        }

        @Test
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/delegation.kt");
        }

        @Test
        @TestMetadata("derefenceExtension.kt")
        public void testDerefenceExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceExtension.kt");
        }

        @Test
        @TestMetadata("derefenceMember.kt")
        public void testDerefenceMember() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/derefenceMember.kt");
        }

        @Test
        @TestMetadata("elvis.kt")
        public void testElvis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/elvis.kt");
        }

        @Test
        @TestMetadata("expectedType.kt")
        public void testExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/expectedType.kt");
        }

        @Test
        @TestMetadata("for.kt")
        public void testFor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/for.kt");
        }

        @Test
        @TestMetadata("functionArguments.kt")
        public void testFunctionArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/functionArguments.kt");
        }

        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/invoke.kt");
        }

        @Test
        @TestMetadata("kt6829.kt")
        public void testKt6829() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/kt6829.kt");
        }

        @Test
        @TestMetadata("multiDeclaration.kt")
        public void testMultiDeclaration() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/multiDeclaration.kt");
        }

        @Test
        @TestMetadata("passToJava.kt")
        public void testPassToJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/passToJava.kt");
        }

        @Test
        @TestMetadata("primitiveArray.kt")
        public void testPrimitiveArray() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/primitiveArray.kt");
        }

        @Test
        @TestMetadata("throw.kt")
        public void testThrow() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/nullabilityWarnings/throw.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/rawTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class RawTypes {
        @Test
        @TestMetadata("arrays.kt")
        public void testArrays() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/arrays.kt");
        }

        @Test
        @TestMetadata("nonGenericRawMember.kt")
        public void testNonGenericRawMember() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonGenericRawMember.kt");
        }

        @Test
        @TestMetadata("nonTrivialErasure.kt")
        public void testNonTrivialErasure() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/nonTrivialErasure.kt");
        }

        @Test
        @TestMetadata("rawSupertypeOverride.kt")
        public void testRawSupertypeOverride() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawSupertypeOverride.kt");
        }

        @Test
        @TestMetadata("rawTypeSyntheticExtensions.kt")
        public void testRawTypeSyntheticExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/rawTypeSyntheticExtensions.kt");
        }

        @Test
        @TestMetadata("typeEnhancement.kt")
        public void testTypeEnhancement() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/rawTypes/typeEnhancement.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/platformTypes/typeEnhancement")
      @TestDataPath("$PROJECT_ROOT")
      public class TypeEnhancement {
        @Test
        @TestMetadata("overriddenExtensions.kt")
        public void testOverriddenExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/overriddenExtensions.kt");
        }

        @Test
        @TestMetadata("saveAnnotationAfterSubstitution.kt")
        public void testSaveAnnotationAfterSubstitution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/saveAnnotationAfterSubstitution.kt");
        }

        @Test
        @TestMetadata("supertypeDifferentParameterNullability.kt")
        public void testSupertypeDifferentParameterNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentParameterNullability.kt");
        }

        @Test
        @TestMetadata("supertypeDifferentReturnNullability.kt")
        public void testSupertypeDifferentReturnNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/platformTypes/typeEnhancement/supertypeDifferentReturnNullability.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/privateInFile")
    @TestDataPath("$PROJECT_ROOT")
    public class PrivateInFile {
      @Test
      @TestMetadata("topLevelAnnotationCall.kt")
      public void testTopLevelAnnotationCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/privateInFile/topLevelAnnotationCall.kt");
      }

      @Test
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/privateInFile/visibility.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      @TestMetadata("abstarctPropertyInPrimaryConstructor.kt")
      public void testAbstarctPropertyInPrimaryConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/abstarctPropertyInPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("extensionPropertyMustHaveAccessorsOrBeAbstract.kt")
      public void testExtensionPropertyMustHaveAccessorsOrBeAbstract() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/extensionPropertyMustHaveAccessorsOrBeAbstract.kt");
      }

      @Test
      @TestMetadata("extensionPropertyMustHaveAccessorsOrBeAbstract2.kt")
      public void testExtensionPropertyMustHaveAccessorsOrBeAbstract2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/extensionPropertyMustHaveAccessorsOrBeAbstract2.kt");
      }

      @Test
      @TestMetadata("flexibleTypeReceiver.kt")
      public void testFlexibleTypeReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/flexibleTypeReceiver.kt");
      }

      @Test
      @TestMetadata("kt47621.kt")
      public void testKt47621() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/kt47621.kt");
      }

      @Test
      @TestMetadata("lateinitOnTopLevel.kt")
      public void testLateinitOnTopLevel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/lateinitOnTopLevel.kt");
      }

      @Test
      @TestMetadata("localPropertyExtensions.kt")
      public void testLocalPropertyExtensions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/localPropertyExtensions.kt");
      }

      @Test
      @TestMetadata("PrivateSetInSuperclass.kt")
      public void testPrivateSetInSuperclass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/PrivateSetInSuperclass.kt");
      }

      @Test
      @TestMetadata("protectedGetterWithPublicSetter.kt")
      public void testProtectedGetterWithPublicSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/protectedGetterWithPublicSetter.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/properties/backingField")
      @TestDataPath("$PROJECT_ROOT")
      public class BackingField {
        @Test
        @TestMetadata("trivialExplicitBackingFIeld.kt")
        public void testTrivialExplicitBackingFIeld() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/backingField/trivialExplicitBackingFIeld.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/properties/inferenceFromGetters")
      @TestDataPath("$PROJECT_ROOT")
      public class InferenceFromGetters {
        @Test
        @TestMetadata("blockBodyGetter.kt")
        public void testBlockBodyGetter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/blockBodyGetter.kt");
        }

        @Test
        @TestMetadata("cantBeInferred.kt")
        public void testCantBeInferred() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/cantBeInferred.kt");
        }

        @Test
        @TestMetadata("explicitGetterType.kt")
        public void testExplicitGetterType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/explicitGetterType.kt");
        }

        @Test
        @TestMetadata("members.kt")
        public void testMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/members.kt");
        }

        @Test
        @TestMetadata("nullAsNothing.kt")
        public void testNullAsNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/nullAsNothing.kt");
        }

        @Test
        @TestMetadata("objectExpression.kt")
        public void testObjectExpression() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/objectExpression.kt");
        }

        @Test
        @TestMetadata("overrides.kt")
        public void testOverrides() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/overrides.kt");
        }

        @Test
        @TestMetadata("primaryConstructorParameter.kt")
        public void testPrimaryConstructorParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/primaryConstructorParameter.kt");
        }

        @Test
        @TestMetadata("recursiveGetter.kt")
        public void testRecursiveGetter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/recursiveGetter.kt");
        }

        @Test
        @TestMetadata("topLevel.kt")
        public void testTopLevel() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/topLevel.kt");
        }

        @Test
        @TestMetadata("vars.kt")
        public void testVars() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/inferenceFromGetters/vars.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaFieldAndKotlinProperty {
        @Test
        @TestMetadata("javaFieldAndCompanionProperty.kt")
        public void testJavaFieldAndCompanionProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndCompanionProperty.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinInvisibleProperty.kt")
        public void testJavaFieldAndKotlinInvisibleProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinInvisibleProperty.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinInvisiblePropertyViaTypeParameter.kt")
        public void testJavaFieldAndKotlinInvisiblePropertyViaTypeParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinInvisiblePropertyViaTypeParameter.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinPropertyReference.kt")
        public void testJavaFieldAndKotlinPropertyReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyReference.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinPropertySuperAccess.kt")
        public void testJavaFieldAndKotlinPropertySuperAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertySuperAccess.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinPropertyWithComplexReceiver.kt")
        public void testJavaFieldAndKotlinPropertyWithComplexReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyWithComplexReceiver.kt");
        }

        @Test
        @TestMetadata("javaFieldAndKotlinPropertyWithSmartcast.kt")
        public void testJavaFieldAndKotlinPropertyWithSmartcast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldAndKotlinPropertyWithSmartcast.kt");
        }

        @Test
        @TestMetadata("javaFieldKotlinPropertyJavaField.kt")
        public void testJavaFieldKotlinPropertyJavaField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldKotlinPropertyJavaField.kt");
        }

        @Test
        @TestMetadata("javaFieldKotlinPropertyJavaPackagePrivate.kt")
        public void testJavaFieldKotlinPropertyJavaPackagePrivate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaFieldKotlinPropertyJavaPackagePrivate.kt");
        }

        @Test
        @TestMetadata("javaPackagePrivateClassAndPublicField.kt")
        public void testJavaPackagePrivateClassAndPublicField() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaPackagePrivateClassAndPublicField.kt");
        }

        @Test
        @TestMetadata("javaPackagePrivateClassExposedViaProtectedStatic.kt")
        public void testJavaPackagePrivateClassExposedViaProtectedStatic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaPackagePrivateClassExposedViaProtectedStatic.kt");
        }

        @Test
        @TestMetadata("javaProtectedFieldAndKotlinInvisibleProperty.kt")
        public void testJavaProtectedFieldAndKotlinInvisibleProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaProtectedFieldAndKotlinInvisibleProperty.kt");
        }

        @Test
        @TestMetadata("javaProtectedFieldAndKotlinInvisiblePropertyReference.kt")
        public void testJavaProtectedFieldAndKotlinInvisiblePropertyReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/properties/javaFieldAndKotlinProperty/javaProtectedFieldAndKotlinInvisiblePropertyReference.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/qualifiedExpression")
    @TestDataPath("$PROJECT_ROOT")
    public class QualifiedExpression {
      @Test
      @TestMetadata("calleeExpressionAsCallExpression.kt")
      public void testCalleeExpressionAsCallExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/calleeExpressionAsCallExpression.kt");
      }

      @Test
      @TestMetadata("GenericClassVsPackage.kt")
      public void testGenericClassVsPackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/GenericClassVsPackage.kt");
      }

      @Test
      @TestMetadata("nullCalleeExpression.kt")
      public void testNullCalleeExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/nullCalleeExpression.kt");
      }

      @Test
      @TestMetadata("PackageVsClass.kt")
      public void testPackageVsClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass.kt");
      }

      @Test
      @TestMetadata("PackageVsClass2.kt")
      public void testPackageVsClass2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/PackageVsClass2.kt");
      }

      @Test
      @TestMetadata("TypeWithError.kt")
      public void testTypeWithError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/TypeWithError.kt");
      }

      @Test
      @TestMetadata("variableVsImportedClassifier.kt")
      public void testVariableVsImportedClassifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/variableVsImportedClassifier.kt");
      }

      @Test
      @TestMetadata("visibleClassVsQualifiedClass.kt")
      public void testVisibleClassVsQualifiedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/qualifiedExpression/visibleClassVsQualifiedClass.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/rawTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class RawTypes {
      @Test
      @TestMetadata("kt57620.kt")
      public void testKt57620() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/rawTypes/kt57620.kt");
      }

      @Test
      @TestMetadata("overrideRawTypedJavaMethodWithGenericTyped.kt")
      public void testOverrideRawTypedJavaMethodWithGenericTyped() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/rawTypes/overrideRawTypedJavaMethodWithGenericTyped.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/reassignment")
    @TestDataPath("$PROJECT_ROOT")
    public class Reassignment {
      @Test
      @TestMetadata("afterfor.kt")
      public void testAfterfor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/afterfor.kt");
      }

      @Test
      @TestMetadata("dowhile.kt")
      public void testDowhile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/dowhile.kt");
      }

      @Test
      @TestMetadata("else.kt")
      public void testElse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/else.kt");
      }

      @Test
      @TestMetadata("foronly.kt")
      public void testForonly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/foronly.kt");
      }

      @Test
      @TestMetadata("if.kt")
      public void testIf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/if.kt");
      }

      @Test
      @TestMetadata("ifelse.kt")
      public void testIfelse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/ifelse.kt");
      }

      @Test
      @TestMetadata("when.kt")
      public void testWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/when.kt");
      }

      @Test
      @TestMetadata("whiletrue.kt")
      public void testWhiletrue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/reassignment/whiletrue.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/recovery")
    @TestDataPath("$PROJECT_ROOT")
    public class Recovery {
      @Test
      @TestMetadata("absentLeftHandSide.kt")
      public void testAbsentLeftHandSide() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recovery/absentLeftHandSide.kt");
      }

      @Test
      @TestMetadata("emptyTypeArgs.kt")
      public void testEmptyTypeArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recovery/emptyTypeArgs.kt");
      }

      @Test
      @TestMetadata("namelessInJava.kt")
      public void testNamelessInJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recovery/namelessInJava.kt");
      }

      @Test
      @TestMetadata("namelessMembers.kt")
      public void testNamelessMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recovery/namelessMembers.kt");
      }

      @Test
      @TestMetadata("namelessToplevelDeclarations.kt")
      public void testNamelessToplevelDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/recovery/namelessToplevelDeclarations.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/redeclarations")
    @TestDataPath("$PROJECT_ROOT")
    public class Redeclarations {
      @Test
      @TestMetadata("ClassRedeclarationInDifferentFiles.kt")
      public void testClassRedeclarationInDifferentFiles() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/ClassRedeclarationInDifferentFiles.kt");
      }

      @Test
      @TestMetadata("ConflictingExtensionProperties.kt")
      public void testConflictingExtensionProperties() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/ConflictingExtensionProperties.kt");
      }

      @Test
      @TestMetadata("DuplicateParameterNamesInFunctionType.kt")
      public void testDuplicateParameterNamesInFunctionType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/DuplicateParameterNamesInFunctionType.kt");
      }

      @Test
      @TestMetadata("EnumName.kt")
      public void testEnumName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/EnumName.kt");
      }

      @Test
      @TestMetadata("FunVsCtorInDifferentFiles.kt")
      public void testFunVsCtorInDifferentFiles() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/FunVsCtorInDifferentFiles.kt");
      }

      @Test
      @TestMetadata("interfaceTypeParameters.kt")
      public void testInterfaceTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/interfaceTypeParameters.kt");
      }

      @Test
      @TestMetadata("kt2418.kt")
      public void testKt2418() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/kt2418.kt");
      }

      @Test
      @TestMetadata("kt2438.kt")
      public void testKt2438() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/kt2438.kt");
      }

      @Test
      @TestMetadata("kt470.kt")
      public void testKt470() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/kt470.kt");
      }

      @Test
      @TestMetadata("MultiFilePackageRedeclaration.kt")
      public void testMultiFilePackageRedeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/MultiFilePackageRedeclaration.kt");
      }

      @Test
      @TestMetadata("PackageRedeclaredByNestedClass.kt")
      public void testPackageRedeclaredByNestedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/PackageRedeclaredByNestedClass.kt");
      }

      @Test
      @TestMetadata("ParentPackageRedeclaredByClass.kt")
      public void testParentPackageRedeclaredByClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/ParentPackageRedeclaredByClass.kt");
      }

      @Test
      @TestMetadata("PropertyAndInnerClass.kt")
      public void testPropertyAndInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/PropertyAndInnerClass.kt");
      }

      @Test
      @TestMetadata("RedeclarationInDefaultObject.kt")
      public void testRedeclarationInDefaultObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationInDefaultObject.kt");
      }

      @Test
      @TestMetadata("RedeclarationInMultiFile.kt")
      public void testRedeclarationInMultiFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationInMultiFile.kt");
      }

      @Test
      @TestMetadata("redeclarationInsideObjectExpression.kt")
      public void testRedeclarationInsideObjectExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/redeclarationInsideObjectExpression.kt");
      }

      @Test
      @TestMetadata("RedeclarationMainInFile.kt")
      public void testRedeclarationMainInFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationMainInFile.kt");
      }

      @Test
      @TestMetadata("RedeclarationMainInOtherFile.kt")
      public void testRedeclarationMainInOtherFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationMainInOtherFile.kt");
      }

      @Test
      @TestMetadata("RedeclarationOfMain.kt")
      public void testRedeclarationOfMain() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationOfMain.kt");
      }

      @Test
      @TestMetadata("RedeclarationOfMain_before.kt")
      public void testRedeclarationOfMain_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationOfMain_before.kt");
      }

      @Test
      @TestMetadata("Redeclarations.kt")
      public void testRedeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/Redeclarations.kt");
      }

      @Test
      @TestMetadata("RedeclarationsInObjects.kt")
      public void testRedeclarationsInObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclarationsInObjects.kt");
      }

      @Test
      @TestMetadata("RedeclaredTypeParameters.kt")
      public void testRedeclaredTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclaredTypeParameters.kt");
      }

      @Test
      @TestMetadata("RedeclaredValsAndVars.kt")
      public void testRedeclaredValsAndVars() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclaredValsAndVars.kt");
      }

      @Test
      @TestMetadata("RedeclaredValueParameters.kt")
      public void testRedeclaredValueParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclaredValueParameters.kt");
      }

      @Test
      @TestMetadata("RedeclaringPrivateToFile.kt")
      public void testRedeclaringPrivateToFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/RedeclaringPrivateToFile.kt");
      }

      @Test
      @TestMetadata("ScriptAndClassConflict.kts")
      public void testScriptAndClassConflict() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/ScriptAndClassConflict.kts");
      }

      @Test
      @TestMetadata("SingletonAndFunctionSameName.kt")
      public void testSingletonAndFunctionSameName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/SingletonAndFunctionSameName.kt");
      }

      @Test
      @TestMetadata("TopLevelPropertyVsClassifier.kt")
      public void testTopLevelPropertyVsClassifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/TopLevelPropertyVsClassifier.kt");
      }

      @Test
      @TestMetadata("TypeAliasCtorVsFun.kt")
      public void testTypeAliasCtorVsFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/TypeAliasCtorVsFun.kt");
      }

      @Test
      @TestMetadata("TypeAliasVsClass.kt")
      public void testTypeAliasVsClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsClass.kt");
      }

      @Test
      @TestMetadata("TypeAliasVsProperty.kt")
      public void testTypeAliasVsProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/TypeAliasVsProperty.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/redeclarations/shadowedExtension")
      @TestDataPath("$PROJECT_ROOT")
      public class ShadowedExtension {
        @Test
        @TestMetadata("extensionOnErrorType.kt")
        public void testExtensionOnErrorType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/redeclarations/shadowedExtension/extensionOnErrorType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/regressions")
    @TestDataPath("$PROJECT_ROOT")
    public class Regressions {
      @Test
      @TestMetadata("CoercionToUnit.kt")
      public void testCoercionToUnit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/CoercionToUnit.kt");
      }

      @Test
      @TestMetadata("correctResultSubstitutorForErrorCandidate.kt")
      public void testCorrectResultSubstitutorForErrorCandidate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/correctResultSubstitutorForErrorCandidate.kt");
      }

      @Test
      @TestMetadata("crashWithStarProjection.kt")
      public void testCrashWithStarProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/crashWithStarProjection.kt");
      }

      @Test
      @TestMetadata("DoubleDefine.kt")
      public void testDoubleDefine() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/DoubleDefine.kt");
      }

      @Test
      @TestMetadata("ea40964.kt")
      public void testEa40964() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea40964.kt");
      }

      @Test
      @TestMetadata("ea43298.kt")
      public void testEa43298() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea43298.kt");
      }

      @Test
      @TestMetadata("ea65509.kt")
      public void testEa65509() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea65509.kt");
      }

      @Test
      @TestMetadata("ea66984.kt")
      public void testEa66984() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea66984.kt");
      }

      @Test
      @TestMetadata("ea69735.kt")
      public void testEa69735() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea69735.kt");
      }

      @Test
      @TestMetadata("ea72837.kt")
      public void testEa72837() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea72837.kt");
      }

      @Test
      @TestMetadata("ea76264.kt")
      public void testEa76264() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/ea76264.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBound.kt")
      public void testItselfAsUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBound.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBoundInClass.kt")
      public void testItselfAsUpperBoundInClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClass.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBoundInClassNotNull.kt")
      public void testItselfAsUpperBoundInClassNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundInClassNotNull.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBoundLocal.kt")
      public void testItselfAsUpperBoundLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundLocal.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBoundMember.kt")
      public void testItselfAsUpperBoundMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundMember.kt");
      }

      @Test
      @TestMetadata("itselfAsUpperBoundNotNull.kt")
      public void testItselfAsUpperBoundNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/itselfAsUpperBoundNotNull.kt");
      }

      @Test
      @TestMetadata("Jet11.kt")
      public void testJet11() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/Jet11.kt");
      }

      @Test
      @TestMetadata("Jet53.kt")
      public void testJet53() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/Jet53.kt");
      }

      @Test
      @TestMetadata("Jet81.kt")
      public void testJet81() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/Jet81.kt");
      }

      @Test
      @TestMetadata("kt10243.kt")
      public void testKt10243() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt10243.kt");
      }

      @Test
      @TestMetadata("kt10243a.kt")
      public void testKt10243a() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt10243a.kt");
      }

      @Test
      @TestMetadata("kt10633.kt")
      public void testKt10633() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt10633.kt");
      }

      @Test
      @TestMetadata("kt10843.kt")
      public void testKt10843() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt10843.kt");
      }

      @Test
      @TestMetadata("kt11979.kt")
      public void testKt11979() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt11979.kt");
      }

      @Test
      @TestMetadata("kt12898.kt")
      public void testKt12898() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt12898.kt");
      }

      @Test
      @TestMetadata("kt13685.kt")
      public void testKt13685() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt13685.kt");
      }

      @Test
      @TestMetadata("kt1489_1728.kt")
      public void testKt1489_1728() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt1489_1728.kt");
      }

      @Test
      @TestMetadata("kt1736.kt")
      public void testKt1736() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt1736.kt");
      }

      @Test
      @TestMetadata("kt235.kt")
      public void testKt235() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt235.kt");
      }

      @Test
      @TestMetadata("kt24488.kt")
      public void testKt24488() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt24488.kt");
      }

      @Test
      @TestMetadata("kt251.kt")
      public void testKt251() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt251.kt");
      }

      @Test
      @TestMetadata("kt2768.kt")
      public void testKt2768() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt2768.kt");
      }

      @Test
      @TestMetadata("kt282.kt")
      public void testKt282() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt282.kt");
      }

      @Test
      @TestMetadata("kt2956.kt")
      public void testKt2956() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt2956.kt");
      }

      @Test
      @TestMetadata("kt302.kt")
      public void testKt302() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt302.kt");
      }

      @Test
      @TestMetadata("kt30245.kt")
      public void testKt30245() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt30245.kt");
      }

      @Test
      @TestMetadata("kt307.kt")
      public void testKt307() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt307.kt");
      }

      @Test
      @TestMetadata("kt312.kt")
      public void testKt312() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt312.kt");
      }

      @Test
      @TestMetadata("kt31975.kt")
      public void testKt31975() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt31975.kt");
      }

      @Test
      @TestMetadata("kt32205.kt")
      public void testKt32205() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt32205.kt");
      }

      @Test
      @TestMetadata("kt32792.kt")
      public void testKt32792() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt32792.kt");
      }

      @Test
      @TestMetadata("kt328.kt")
      public void testKt328() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt328.kt");
      }

      @Test
      @TestMetadata("kt334.kt")
      public void testKt334() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt334.kt");
      }

      @Test
      @TestMetadata("kt352.kt")
      public void testKt352() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt352.kt");
      }

      @Test
      @TestMetadata("kt353.kt")
      public void testKt353() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt353.kt");
      }

      @Test
      @TestMetadata("kt36222.kt")
      public void testKt36222() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt36222.kt");
      }

      @Test
      @TestMetadata("kt3810.kt")
      public void testKt3810() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt3810.kt");
      }

      @Test
      @TestMetadata("kt398.kt")
      public void testKt398() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt398.kt");
      }

      @Test
      @TestMetadata("kt399.kt")
      public void testKt399() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt399.kt");
      }

      @Test
      @TestMetadata("kt402.kt")
      public void testKt402() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt402.kt");
      }

      @Test
      @TestMetadata("kt41.kt")
      public void testKt41() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt41.kt");
      }

      @Test
      @TestMetadata("kt411.kt")
      public void testKt411() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt411.kt");
      }

      @Test
      @TestMetadata("kt442.kt")
      public void testKt442() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt442.kt");
      }

      @Test
      @TestMetadata("kt443.kt")
      public void testKt443() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt443.kt");
      }

      @Test
      @TestMetadata("kt455.kt")
      public void testKt455() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt455.kt");
      }

      @Test
      @TestMetadata("kt456.kt")
      public void testKt456() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt456.kt");
      }

      @Test
      @TestMetadata("kt4827.kt")
      public void testKt4827() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt4827.kt");
      }

      @Test
      @TestMetadata("kt5362.kt")
      public void testKt5362() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt5362.kt");
      }

      @Test
      @TestMetadata("kt557.kt")
      public void testKt557() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt557.kt");
      }

      @Test
      @TestMetadata("kt55956.kt")
      public void testKt55956() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt55956.kt");
      }

      @Test
      @TestMetadata("kt58.kt")
      public void testKt58() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt58.kt");
      }

      @Test
      @TestMetadata("kt618.kt")
      public void testKt618() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt618.kt");
      }

      @Test
      @TestMetadata("kt629.kt")
      public void testKt629() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt629.kt");
      }

      @Test
      @TestMetadata("kt6508.kt")
      public void testKt6508() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt6508.kt");
      }

      @Test
      @TestMetadata("kt762.kt")
      public void testKt762() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt762.kt");
      }

      @Test
      @TestMetadata("kt847.kt")
      public void testKt847() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt847.kt");
      }

      @Test
      @TestMetadata("kt9384.kt")
      public void testKt9384() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt9384.kt");
      }

      @Test
      @TestMetadata("kt9620.kt")
      public void testKt9620() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt9620.kt");
      }

      @Test
      @TestMetadata("kt9633.kt")
      public void testKt9633() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt9633.kt");
      }

      @Test
      @TestMetadata("noThis.kt")
      public void testNoThis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/noThis.kt");
      }

      @Test
      @TestMetadata("OrphanStarProjection.kt")
      public void testOrphanStarProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/OrphanStarProjection.kt");
      }

      @Test
      @TestMetadata("OutProjections.kt")
      public void testOutProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/OutProjections.kt");
      }

      @Test
      @TestMetadata("resolveCollectionLiteralInsideLambda.kt")
      public void testResolveCollectionLiteralInsideLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/resolveCollectionLiteralInsideLambda.kt");
      }

      @Test
      @TestMetadata("TypeMismatchOnUnaryOperations.kt")
      public void testTypeMismatchOnUnaryOperations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/TypeMismatchOnUnaryOperations.kt");
      }

      @Test
      @TestMetadata("TypeParameterAsASupertype.kt")
      public void testTypeParameterAsASupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/TypeParameterAsASupertype.kt");
      }

      @Test
      @TestMetadata("UnavaliableQualifiedThis.kt")
      public void testUnavaliableQualifiedThis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/UnavaliableQualifiedThis.kt");
      }

      @Test
      @TestMetadata("WrongTraceInCallResolver.kt")
      public void testWrongTraceInCallResolver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/WrongTraceInCallResolver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/regressions/kt7585")
      @TestDataPath("$PROJECT_ROOT")
      public class Kt7585 {
        @Test
        @TestMetadata("base.kt")
        public void testBase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt7585/base.kt");
        }

        @Test
        @TestMetadata("java.kt")
        public void testJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/regressions/kt7585/java.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @Test
      @TestMetadata("ambiguityOnPropertiesWithTheSamePackageName.kt")
      public void testAmbiguityOnPropertiesWithTheSamePackageName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/ambiguityOnPropertiesWithTheSamePackageName.kt");
      }

      @Test
      @TestMetadata("ambiguityWithTwoCorrespondingFunctionTypes.kt")
      public void testAmbiguityWithTwoCorrespondingFunctionTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/ambiguityWithTwoCorrespondingFunctionTypes.kt");
      }

      @Test
      @TestMetadata("callableReferenceInCST.kt")
      public void testCallableReferenceInCST() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/callableReferenceInCST.kt");
      }

      @Test
      @TestMetadata("capturedTypesInLambdaParameter.kt")
      public void testCapturedTypesInLambdaParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/capturedTypesInLambdaParameter.kt");
      }

      @Test
      @TestMetadata("constructorVsCompanion.kt")
      public void testConstructorVsCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/constructorVsCompanion.kt");
      }

      @Test
      @TestMetadata("CycleInTypeArgs.kt")
      public void testCycleInTypeArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/CycleInTypeArgs.kt");
      }

      @Test
      @TestMetadata("errorPriority.kt")
      public void testErrorPriority() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/errorPriority.kt");
      }

      @Test
      @TestMetadata("HiddenDeclarations.kt")
      public void testHiddenDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/HiddenDeclarations.kt");
      }

      @Test
      @TestMetadata("incompleteConstructorInvocation.kt")
      public void testIncompleteConstructorInvocation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/incompleteConstructorInvocation.kt");
      }

      @Test
      @TestMetadata("inferenceInLinkedLambdas.kt")
      public void testInferenceInLinkedLambdas() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/inferenceInLinkedLambdas.kt");
      }

      @Test
      @TestMetadata("kt28109.kt")
      public void testKt28109() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/kt28109.kt");
      }

      @Test
      @TestMetadata("kt49736.kt")
      public void testKt49736() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/kt49736.kt");
      }

      @Test
      @TestMetadata("lambdaAgainstTypeVariableWithConstraint.kt")
      public void testLambdaAgainstTypeVariableWithConstraint() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/lambdaAgainstTypeVariableWithConstraint.kt");
      }

      @Test
      @TestMetadata("lambdaAgainstTypeVariableWithConstraintAfter.kt")
      public void testLambdaAgainstTypeVariableWithConstraintAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/lambdaAgainstTypeVariableWithConstraintAfter.kt");
      }

      @Test
      @TestMetadata("localObject.kt")
      public void testLocalObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/localObject.kt");
      }

      @Test
      @TestMetadata("nestedClassUnresolvedReference.kt")
      public void testNestedClassUnresolvedReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedClassUnresolvedReference.kt");
      }

      @Test
      @TestMetadata("newLineLambda.kt")
      public void testNewLineLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/newLineLambda.kt");
      }

      @Test
      @TestMetadata("operatorAndInfixResolve.kt")
      public void testOperatorAndInfixResolve() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/operatorAndInfixResolve.kt");
      }

      @Test
      @TestMetadata("parameterAsDefaultValueInLocalFunction.kt")
      public void testParameterAsDefaultValueInLocalFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/parameterAsDefaultValueInLocalFunction.kt");
      }

      @Test
      @TestMetadata("propertyInCompanionOfEnum.kt")
      public void testPropertyInCompanionOfEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/propertyInCompanionOfEnum.kt");
      }

      @Test
      @TestMetadata("redCodeInOverloadByLambdaReturnTypeLambda.kt")
      public void testRedCodeInOverloadByLambdaReturnTypeLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/redCodeInOverloadByLambdaReturnTypeLambda.kt");
      }

      @Test
      @TestMetadata("resolveTypeArgsForUnresolvedCall.kt")
      public void testResolveTypeArgsForUnresolvedCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/resolveTypeArgsForUnresolvedCall.kt");
      }

      @Test
      @TestMetadata("resolveWithRedeclarationError.kt")
      public void testResolveWithRedeclarationError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/resolveWithRedeclarationError.kt");
      }

      @Test
      @TestMetadata("underscoreInCatchBlockWithEnabledFeature.kt")
      public void testUnderscoreInCatchBlockWithEnabledFeature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/underscoreInCatchBlockWithEnabledFeature.kt");
      }

      @Test
      @TestMetadata("varInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda.kt")
      public void testVarInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/varInsideLambdaThatPassedToExtensionFunctionWithTypeParametersThatDefinedInsideThisLambda.kt");
      }

      @Test
      @TestMetadata("wrongNumberOfTypeArguments.kt")
      public void testWrongNumberOfTypeArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/wrongNumberOfTypeArguments.kt");
      }

      @Test
      @TestMetadata("wrongReceiver.kt")
      public void testWrongReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/wrongReceiver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/dslMarker")
      @TestDataPath("$PROJECT_ROOT")
      public class DslMarker {
        @Test
        @TestMetadata("annotatedFunctionType.kt")
        public void testAnnotatedFunctionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedFunctionType.kt");
        }

        @Test
        @TestMetadata("annotatedTypeArgument.kt")
        public void testAnnotatedTypeArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/annotatedTypeArgument.kt");
        }

        @Test
        @TestMetadata("behaviorIfApplicabilityIsResolveWithError.kt")
        public void testBehaviorIfApplicabilityIsResolveWithError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/behaviorIfApplicabilityIsResolveWithError.kt");
        }

        @Test
        @TestMetadata("callableReferenceAsCallArgument.kt")
        public void testCallableReferenceAsCallArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/callableReferenceAsCallArgument.kt");
        }

        @Test
        @TestMetadata("callableReferences.kt")
        public void testCallableReferences() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/callableReferences.kt");
        }

        @Test
        @TestMetadata("dslMarkerOnExpectedTypeForInvokeExtensionCall.kt")
        public void testDslMarkerOnExpectedTypeForInvokeExtensionCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerOnExpectedTypeForInvokeExtensionCall.kt");
        }

        @Test
        @TestMetadata("dslMarkerOnTypealias.kt")
        public void testDslMarkerOnTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerOnTypealias.kt");
        }

        @Test
        @TestMetadata("dslMarkerWithTypealiasRecursion.kt")
        public void testDslMarkerWithTypealiasRecursion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/dslMarkerWithTypealiasRecursion.kt");
        }

        @Test
        @TestMetadata("inheritedMarker.kt")
        public void testInheritedMarker() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/inheritedMarker.kt");
        }

        @Test
        @TestMetadata("insideTopLevelExtension.kt")
        public void testInsideTopLevelExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtension.kt");
        }

        @Test
        @TestMetadata("insideTopLevelExtensionAnnotatedType.kt")
        public void testInsideTopLevelExtensionAnnotatedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/insideTopLevelExtensionAnnotatedType.kt");
        }

        @Test
        @TestMetadata("lowPriority.kt")
        public void testLowPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/lowPriority.kt");
        }

        @Test
        @TestMetadata("markersIntersection.kt")
        public void testMarkersIntersection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/markersIntersection.kt");
        }

        @Test
        @TestMetadata("nestedWithSameReceiver.kt")
        public void testNestedWithSameReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/nestedWithSameReceiver.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/properties.kt");
        }

        @Test
        @TestMetadata("simpleAnnotatedClasses.kt")
        public void testSimpleAnnotatedClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedClasses.kt");
        }

        @Test
        @TestMetadata("simpleAnnotatedTypes.kt")
        public void testSimpleAnnotatedTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/simpleAnnotatedTypes.kt");
        }

        @Test
        @TestMetadata("substitutedReceiverAnnotatedClasses.kt")
        public void testSubstitutedReceiverAnnotatedClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedClasses.kt");
        }

        @Test
        @TestMetadata("substitutedReceiverAnnotatedType.kt")
        public void testSubstitutedReceiverAnnotatedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/substitutedReceiverAnnotatedType.kt");
        }

        @Test
        @TestMetadata("threeImplicitReceivers.kt")
        public void testThreeImplicitReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers.kt");
        }

        @Test
        @TestMetadata("threeImplicitReceivers2.kt")
        public void testThreeImplicitReceivers2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/threeImplicitReceivers2.kt");
        }

        @Test
        @TestMetadata("twoImplicitReceivers.kt")
        public void testTwoImplicitReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/twoImplicitReceivers.kt");
        }

        @Test
        @TestMetadata("twoLanguages.kt")
        public void testTwoLanguages() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/twoLanguages.kt");
        }

        @Test
        @TestMetadata("typeAliasToBuiltinFunctionType.kt")
        public void testTypeAliasToBuiltinFunctionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/typeAliasToBuiltinFunctionType.kt");
        }

        @Test
        @TestMetadata("useOfExtensions.kt")
        public void testUseOfExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/useOfExtensions.kt");
        }

        @Test
        @TestMetadata("usingWith.kt")
        public void testUsingWith() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/usingWith.kt");
        }

        @Test
        @TestMetadata("usingWithThis.kt")
        public void testUsingWithThis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/dslMarker/usingWithThis.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @Test
        @TestMetadata("functionExpectedWhenSeveralInvokesExist.kt")
        public void testFunctionExpectedWhenSeveralInvokesExist() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/functionExpectedWhenSeveralInvokesExist.kt");
        }

        @Test
        @TestMetadata("implicitInvokeAfterSafeCall.kt")
        public void testImplicitInvokeAfterSafeCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/implicitInvokeAfterSafeCall.kt");
        }

        @Test
        @TestMetadata("invokeAndSmartCast.kt")
        public void testInvokeAndSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/invokeAndSmartCast.kt");
        }

        @Test
        @TestMetadata("invokeAsMemberExtensionToExplicitReceiver.kt")
        public void testInvokeAsMemberExtensionToExplicitReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/invokeAsMemberExtensionToExplicitReceiver.kt");
        }

        @Test
        @TestMetadata("invokeCommonSystem2.kt")
        public void testInvokeCommonSystem2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/invokeCommonSystem2.kt");
        }

        @Test
        @TestMetadata("invokeOnVariableWithExtensionFunctionType.kt")
        public void testInvokeOnVariableWithExtensionFunctionType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/invokeOnVariableWithExtensionFunctionType.kt");
        }

        @Test
        @TestMetadata("KT-4372.kt")
        public void testKT_4372() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/KT-4372.kt");
        }

        @Test
        @TestMetadata("kt30695_2.kt")
        public void testKt30695_2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/kt30695_2.kt");
        }

        @Test
        @TestMetadata("kt4204-completeNestedCallsForInvoke.kt")
        public void testKt4204_completeNestedCallsForInvoke() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/kt4204-completeNestedCallsForInvoke.kt");
        }

        @Test
        @TestMetadata("kt9805.kt")
        public void testKt9805() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/kt9805.kt");
        }

        @Test
        @TestMetadata("reportFunctionExpectedOnSimpleUnresolved.kt")
        public void testReportFunctionExpectedOnSimpleUnresolved() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/reportFunctionExpectedOnSimpleUnresolved.kt");
        }

        @Test
        @TestMetadata("reportFunctionExpectedWhenOneInvokeExist.kt")
        public void testReportFunctionExpectedWhenOneInvokeExist() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/reportFunctionExpectedWhenOneInvokeExist.kt");
        }

        @Test
        @TestMetadata("wrongInvokeExtension.kt")
        public void testWrongInvokeExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/wrongInvokeExtension.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/resolve/invoke/errors")
        @TestDataPath("$PROJECT_ROOT")
        public class Errors {
          @Test
          @TestMetadata("ambiguityForInvoke.kt")
          public void testAmbiguityForInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/ambiguityForInvoke.kt");
          }

          @Test
          @TestMetadata("invisibleInvoke.kt")
          public void testInvisibleInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/invisibleInvoke.kt");
          }

          @Test
          @TestMetadata("receiverPresenceErrorForInvoke.kt")
          public void testReceiverPresenceErrorForInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/receiverPresenceErrorForInvoke.kt");
          }

          @Test
          @TestMetadata("typeInferenceErrorForInvoke.kt")
          public void testTypeInferenceErrorForInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/typeInferenceErrorForInvoke.kt");
          }

          @Test
          @TestMetadata("unresolvedInvoke.kt")
          public void testUnresolvedInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/unresolvedInvoke.kt");
          }

          @Test
          @TestMetadata("unsafeCallWithInvoke.kt")
          public void testUnsafeCallWithInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/unsafeCallWithInvoke.kt");
          }

          @Test
          @TestMetadata("wrongReceiverForInvokeOnExpression.kt")
          public void testWrongReceiverForInvokeOnExpression() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverForInvokeOnExpression.kt");
          }

          @Test
          @TestMetadata("wrongReceiverTypeForInvoke.kt")
          public void testWrongReceiverTypeForInvoke() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/invoke/errors/wrongReceiverTypeForInvoke.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/nestedCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class NestedCalls {
        @Test
        @TestMetadata("analyzeUnmappedArguments.kt")
        public void testAnalyzeUnmappedArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedCalls/analyzeUnmappedArguments.kt");
        }

        @Test
        @TestMetadata("completeTypeInferenceForNestedInNoneApplicable.kt")
        public void testCompleteTypeInferenceForNestedInNoneApplicable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedCalls/completeTypeInferenceForNestedInNoneApplicable.kt");
        }

        @Test
        @TestMetadata("completeUnmappedArguments.kt")
        public void testCompleteUnmappedArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedCalls/completeUnmappedArguments.kt");
        }

        @Test
        @TestMetadata("kt5971NestedSafeCall.kt")
        public void testKt5971NestedSafeCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedCalls/kt5971NestedSafeCall.kt");
        }

        @Test
        @TestMetadata("manyInapplicableCandidatesWithLambdas.kt")
        public void testManyInapplicableCandidatesWithLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/nestedCalls/manyInapplicableCandidatesWithLambdas.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/noCandidates")
      @TestDataPath("$PROJECT_ROOT")
      public class NoCandidates {
        @Test
        @TestMetadata("kt2787.kt")
        public void testKt2787() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/noCandidates/kt2787.kt");
        }

        @Test
        @TestMetadata("resolvedToClassifier.kt")
        public void testResolvedToClassifier() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifier.kt");
        }

        @Test
        @TestMetadata("resolvedToClassifierWithReceiver.kt")
        public void testResolvedToClassifierWithReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/noCandidates/resolvedToClassifierWithReceiver.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/overloadConflicts")
      @TestDataPath("$PROJECT_ROOT")
      public class OverloadConflicts {
        @Test
        @TestMetadata("allLambdas.kt")
        public void testAllLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/allLambdas.kt");
        }

        @Test
        @TestMetadata("emptyLambdaUnitNoDiscrimination.kt")
        public void testEmptyLambdaUnitNoDiscrimination() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/emptyLambdaUnitNoDiscrimination.kt");
        }

        @Test
        @TestMetadata("genericClash.kt")
        public void testGenericClash() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/genericClash.kt");
        }

        @Test
        @TestMetadata("genericWithProjection.kt")
        public void testGenericWithProjection() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/genericWithProjection.kt");
        }

        @Test
        @TestMetadata("kt31670.kt")
        public void testKt31670() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt31670.kt");
        }

        @Test
        @TestMetadata("kt31758.kt")
        public void testKt31758() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/kt31758.kt");
        }

        @Test
        @TestMetadata("originalExamples.kt")
        public void testOriginalExamples() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/originalExamples.kt");
        }

        @Test
        @TestMetadata("varargsInDifferentPositions.kt")
        public void testVarargsInDifferentPositions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsInDifferentPositions.kt");
        }

        @Test
        @TestMetadata("varargsMixed.kt")
        public void testVarargsMixed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/varargsMixed.kt");
        }

        @Test
        @TestMetadata("withVariance.kt")
        public void testWithVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/overloadConflicts/withVariance.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/priority")
      @TestDataPath("$PROJECT_ROOT")
      public class Priority {
        @Test
        @TestMetadata("invokeExtensionVsOther.kt")
        public void testInvokeExtensionVsOther() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther.kt");
        }

        @Test
        @TestMetadata("invokeExtensionVsOther2.kt")
        public void testInvokeExtensionVsOther2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/invokeExtensionVsOther2.kt");
        }

        @Test
        @TestMetadata("kt10219.kt")
        public void testKt10219() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/kt10219.kt");
        }

        @Test
        @TestMetadata("kt10510.kt")
        public void testKt10510() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/kt10510.kt");
        }

        @Test
        @TestMetadata("kt9965.kt")
        public void testKt9965() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/kt9965.kt");
        }

        @Test
        @TestMetadata("localExtVsNonLocalExt.kt")
        public void testLocalExtVsNonLocalExt() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/localExtVsNonLocalExt.kt");
        }

        @Test
        @TestMetadata("memberVsLocalExt.kt")
        public void testMemberVsLocalExt() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/memberVsLocalExt.kt");
        }

        @Test
        @TestMetadata("samConstructorVsFunction.kt")
        public void testSamConstructorVsFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/samConstructorVsFunction.kt");
        }

        @Test
        @TestMetadata("staticVsImplicitReceiverMember.kt")
        public void testStaticVsImplicitReceiverMember() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/staticVsImplicitReceiverMember.kt");
        }

        @Test
        @TestMetadata("synthesizedMembersVsExtension.kt")
        public void testSynthesizedMembersVsExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/synthesizedMembersVsExtension.kt");
        }

        @Test
        @TestMetadata("syntheticPropertiesVsExtensions.kt")
        public void testSyntheticPropertiesVsExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsExtensions.kt");
        }

        @Test
        @TestMetadata("syntheticPropertiesVsMembers.kt")
        public void testSyntheticPropertiesVsMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/priority/syntheticPropertiesVsMembers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/resolve/specialConstructions")
      @TestDataPath("$PROJECT_ROOT")
      public class SpecialConstructions {
        @Test
        @TestMetadata("constantsInIf.kt")
        public void testConstantsInIf() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/specialConstructions/constantsInIf.kt");
        }

        @Test
        @TestMetadata("elvisAsCall.kt")
        public void testElvisAsCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/specialConstructions/elvisAsCall.kt");
        }

        @Test
        @TestMetadata("inferenceForElvis.kt")
        public void testInferenceForElvis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/specialConstructions/inferenceForElvis.kt");
        }

        @Test
        @TestMetadata("reportTypeMismatchDeeplyOnBranches.kt")
        public void testReportTypeMismatchDeeplyOnBranches() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/resolve/specialConstructions/reportTypeMismatchDeeplyOnBranches.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/safeCalls")
    @TestDataPath("$PROJECT_ROOT")
    public class SafeCalls {
      @Test
      @TestMetadata("safeCallWithSmartCast.kt")
      public void testSafeCallWithSmartCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/safeCalls/safeCallWithSmartCast.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConversions {
      @Test
      @TestMetadata("arrayAsVarargAfterSamArgumentProhibited.kt")
      public void testArrayAsVarargAfterSamArgumentProhibited() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/arrayAsVarargAfterSamArgumentProhibited.kt");
      }

      @Test
      @TestMetadata("GenericSubstitution.kt")
      public void testGenericSubstitution() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/GenericSubstitution.kt");
      }

      @Test
      @TestMetadata("GenericSubstitutionKT.kt")
      public void testGenericSubstitutionKT() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/GenericSubstitutionKT.kt");
      }

      @Test
      @TestMetadata("javaMemberAgainstExtension.kt")
      public void testJavaMemberAgainstExtension() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/javaMemberAgainstExtension.kt");
      }

      @Test
      @TestMetadata("kt60983.kt")
      public void testKt60983() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/kt60983.kt");
      }

      @Test
      @TestMetadata("OverloadPriority.kt")
      public void testOverloadPriority() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/OverloadPriority.kt");
      }

      @Test
      @TestMetadata("OverloadPriorityKT.kt")
      public void testOverloadPriorityKT() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/OverloadPriorityKT.kt");
      }

      @Test
      @TestMetadata("samConversionToGenericWrongNullability.kt")
      public void testSamConversionToGenericWrongNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionToGenericWrongNullability.kt");
      }

      @Test
      @TestMetadata("samConversionToGenericWrongNullabilityDnnRepresentation.kt")
      public void testSamConversionToGenericWrongNullabilityDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionToGenericWrongNullabilityDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("samConversionToGenericWrongNullabilityForbidden.kt")
      public void testSamConversionToGenericWrongNullabilityForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionToGenericWrongNullabilityForbidden.kt");
      }

      @Test
      @TestMetadata("samConversionWithCallableReference.kt")
      public void testSamConversionWithCallableReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionWithCallableReference.kt");
      }

      @Test
      @TestMetadata("samConversionWithCallableReferenceDnnRepresentation.kt")
      public void testSamConversionWithCallableReferenceDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionWithCallableReferenceDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("samConversionWithJavaFlexibleType.kt")
      public void testSamConversionWithJavaFlexibleType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samConversionWithJavaFlexibleType.kt");
      }

      @Test
      @TestMetadata("samWithLambda.kt")
      public void testSamWithLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samWithLambda.kt");
      }

      @Test
      @TestMetadata("samWithLambdaDnnRepresentation.kt")
      public void testSamWithLambdaDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/samWithLambdaDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("sameConversionToGenericWrongNullabilityDnnRepresentation.kt")
      public void testSameConversionToGenericWrongNullabilityDnnRepresentation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/sameConversionToGenericWrongNullabilityDnnRepresentation.kt");
      }

      @Test
      @TestMetadata("typeMismatchOnGenericSam.kt")
      public void testTypeMismatchOnGenericSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/samConversions/typeMismatchOnGenericSam.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @Test
      @TestMetadata("AmbiguousNonExtensions.kt")
      public void testAmbiguousNonExtensions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/AmbiguousNonExtensions.kt");
      }

      @Test
      @TestMetadata("initializerScopeOfExtensionProperty.kt")
      public void testInitializerScopeOfExtensionProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/initializerScopeOfExtensionProperty.kt");
      }

      @Test
      @TestMetadata("invisibleInternalSetterAccessFromDeriviedClass.kt")
      public void testInvisibleInternalSetterAccessFromDeriviedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/invisibleInternalSetterAccessFromDeriviedClass.kt");
      }

      @Test
      @TestMetadata("invisibleInternalSetterAccessFromDeriviedClassOn.kt")
      public void testInvisibleInternalSetterAccessFromDeriviedClassOn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/invisibleInternalSetterAccessFromDeriviedClassOn.kt");
      }

      @Test
      @TestMetadata("invisibleSetter.kt")
      public void testInvisibleSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/invisibleSetter.kt");
      }

      @Test
      @TestMetadata("kt1080.kt")
      public void testKt1080() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1080.kt");
      }

      @Test
      @TestMetadata("kt1244.kt")
      public void testKt1244() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1244.kt");
      }

      @Test
      @TestMetadata("kt1248.kt")
      public void testKt1248() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1248.kt");
      }

      @Test
      @TestMetadata("kt151.kt")
      public void testKt151() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt151.kt");
      }

      @Test
      @TestMetadata("kt1738.kt")
      public void testKt1738() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1738.kt");
      }

      @Test
      @TestMetadata("kt1805.kt")
      public void testKt1805() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1805.kt");
      }

      @Test
      @TestMetadata("kt1806.kt")
      public void testKt1806() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1806.kt");
      }

      @Test
      @TestMetadata("kt1822.kt")
      public void testKt1822() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1822.kt");
      }

      @Test
      @TestMetadata("kt1942.kt")
      public void testKt1942() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt1942.kt");
      }

      @Test
      @TestMetadata("kt250.617.10.kt")
      public void testKt250_617_10() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt250.617.10.kt");
      }

      @Test
      @TestMetadata("kt323.kt")
      public void testKt323() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt323.kt");
      }

      @Test
      @TestMetadata("kt37.kt")
      public void testKt37() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt37.kt");
      }

      @Test
      @TestMetadata("kt900.kt")
      public void testKt900() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt900.kt");
      }

      @Test
      @TestMetadata("kt900-1.kt")
      public void testKt900_1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt900-1.kt");
      }

      @Test
      @TestMetadata("kt900-2.kt")
      public void testKt900_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt900-2.kt");
      }

      @Test
      @TestMetadata("kt9430.kt")
      public void testKt9430() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/kt9430.kt");
      }

      @Test
      @TestMetadata("visibility.kt")
      public void testVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/visibility.kt");
      }

      @Test
      @TestMetadata("visibility2.kt")
      public void testVisibility2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/visibility2.kt");
      }

      @Test
      @TestMetadata("visibility3.kt")
      public void testVisibility3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/visibility3.kt");
      }

      @Test
      @TestMetadata("VisibilityInClassObject.kt")
      public void testVisibilityInClassObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/VisibilityInClassObject.kt");
      }

      @Test
      @TestMetadata("VisibilityInheritModifier.kt")
      public void testVisibilityInheritModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/VisibilityInheritModifier.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/classHeader")
      @TestDataPath("$PROJECT_ROOT")
      public class ClassHeader {
        @Test
        @TestMetadata("annotationOnClass.kt")
        public void testAnnotationOnClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnClass.kt");
        }

        @Test
        @TestMetadata("annotationOnConstructors.kt")
        public void testAnnotationOnConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/annotationOnConstructors.kt");
        }

        @Test
        @TestMetadata("classGenericParameters.kt")
        public void testClassGenericParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/classGenericParameters.kt");
        }

        @Test
        @TestMetadata("classParents.kt")
        public void testClassParents() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/classParents.kt");
        }

        @Test
        @TestMetadata("companionObjectParents.kt")
        public void testCompanionObjectParents() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectParents.kt");
        }

        @Test
        @TestMetadata("companionObjectSuperConstructorArguments.kt")
        public void testCompanionObjectSuperConstructorArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/companionObjectSuperConstructorArguments.kt");
        }

        @Test
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/constructors.kt");
        }

        @Test
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/delegation.kt");
        }

        @Test
        @TestMetadata("objectParents.kt")
        public void testObjectParents() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/objectParents.kt");
        }

        @Test
        @TestMetadata("objectSuperConstructorArguments.kt")
        public void testObjectSuperConstructorArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/objectSuperConstructorArguments.kt");
        }

        @Test
        @TestMetadata("superConstructorArguments.kt")
        public void testSuperConstructorArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArguments.kt");
        }

        @Test
        @TestMetadata("superConstructorArgumentsInSecondaryConstructor.kt")
        public void testSuperConstructorArgumentsInSecondaryConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/classHeader/superConstructorArgumentsInSecondaryConstructor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance")
      @TestDataPath("$PROJECT_ROOT")
      public class Inheritance {
        @Test
        @TestMetadata("companionObject.kt")
        public void testCompanionObject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/companionObject.kt");
        }

        @Test
        @TestMetadata("companionObjectAfterJava.kt")
        public void testCompanionObjectAfterJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/companionObjectAfterJava.kt");
        }

        @Test
        @TestMetadata("innerClasses.kt")
        public void testInnerClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/innerClasses.kt");
        }

        @Test
        @TestMetadata("methodsPriority.kt")
        public void testMethodsPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/methodsPriority.kt");
        }

        @Test
        @TestMetadata("nestedClassesFromInterface.kt")
        public void testNestedClassesFromInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedClassesFromInterface.kt");
        }

        @Test
        @TestMetadata("nestedCompanionClass.kt")
        public void testNestedCompanionClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClass.kt");
        }

        @Test
        @TestMetadata("nestedCompanionClassVsNested.kt")
        public void testNestedCompanionClassVsNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNested.kt");
        }

        @Test
        @TestMetadata("nestedCompanionClassVsNestedJava.kt")
        public void testNestedCompanionClassVsNestedJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedCompanionClassVsNestedJava.kt");
        }

        @Test
        @TestMetadata("nestedFromJava.kt")
        public void testNestedFromJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJava.kt");
        }

        @Test
        @TestMetadata("nestedFromJavaAfterKotlin.kt")
        public void testNestedFromJavaAfterKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedFromJavaAfterKotlin.kt");
        }

        @Test
        @TestMetadata("nestedVsToplevelClass.kt")
        public void testNestedVsToplevelClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/nestedVsToplevelClass.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics")
        @TestDataPath("$PROJECT_ROOT")
        public class Statics {
          @Test
          @TestMetadata("hidePrivateByPublic.kt")
          public void testHidePrivateByPublic() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/hidePrivateByPublic.kt");
          }

          @Test
          @TestMetadata("jjkj.kt")
          public void testJjkj() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/jjkj.kt");
          }

          @Test
          @TestMetadata("kjk.kt")
          public void testKjk() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/kjk.kt");
          }

          @Test
          @TestMetadata("localVsStatic.kt")
          public void testLocalVsStatic() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/localVsStatic.kt");
          }

          @Test
          @TestMetadata("nameClash0.kt")
          public void testNameClash0() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash0.kt");
          }

          @Test
          @TestMetadata("nameClash1.kt")
          public void testNameClash1() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash1.kt");
          }

          @Test
          @TestMetadata("nameClash2.kt")
          public void testNameClash2() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/nameClash2.kt");
          }

          @Test
          @TestMetadata("oneInterfaceManyTimes.kt")
          public void testOneInterfaceManyTimes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/oneInterfaceManyTimes.kt");
          }

          @Test
          @TestMetadata("staticFunAndPropertyImport.kt")
          public void testStaticFunAndPropertyImport() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticFunAndPropertyImport.kt");
          }

          @Test
          @TestMetadata("staticFunVsImport.kt")
          public void testStaticFunVsImport() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticFunVsImport.kt");
          }

          @Test
          @TestMetadata("staticsFromjava.kt")
          public void testStaticsFromjava() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjava.kt");
          }

          @Test
          @TestMetadata("staticsFromjavaAfterKotlin.kt")
          public void testStaticsFromjavaAfterKotlin() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/staticsFromjavaAfterKotlin.kt");
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject")
          @TestDataPath("$PROJECT_ROOT")
          public class CompanionObject {
            @Test
            @TestMetadata("accessToStaticMembersOfParentClassJKJ_after.kt")
            public void testAccessToStaticMembersOfParentClassJKJ_after() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClassJKJ_after.kt");
            }

            @Test
            @TestMetadata("accessToStaticMembersOfParentClassJKJ_before.kt")
            public void testAccessToStaticMembersOfParentClassJKJ_before() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClassJKJ_before.kt");
            }

            @Test
            @TestMetadata("accessToStaticMembersOfParentClass_after.kt")
            public void testAccessToStaticMembersOfParentClass_after() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClass_after.kt");
            }

            @Test
            @TestMetadata("accessToStaticMembersOfParentClass_before.kt")
            public void testAccessToStaticMembersOfParentClass_before() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/accessToStaticMembersOfParentClass_before.kt");
            }

            @Test
            @TestMetadata("inheritFromContainingClass_after.kt")
            public void testInheritFromContainingClass_after() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromContainingClass_after.kt");
            }

            @Test
            @TestMetadata("inheritFromContainingClass_before.kt")
            public void testInheritFromContainingClass_before() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromContainingClass_before.kt");
            }

            @Test
            @TestMetadata("inheritFromJavaAfterKotlin_after.kt")
            public void testInheritFromJavaAfterKotlin_after() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJavaAfterKotlin_after.kt");
            }

            @Test
            @TestMetadata("inheritFromJavaAfterKotlin_before.kt")
            public void testInheritFromJavaAfterKotlin_before() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJavaAfterKotlin_before.kt");
            }

            @Test
            @TestMetadata("inheritFromJava_after.kt")
            public void testInheritFromJava_after() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJava_after.kt");
            }

            @Test
            @TestMetadata("inheritFromJava_before.kt")
            public void testInheritFromJava_before() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/inheritance/statics/companionObject/inheritFromJava_before.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/protectedVisibility")
      @TestDataPath("$PROJECT_ROOT")
      public class ProtectedVisibility {
        @Test
        @TestMetadata("complexCompanion.kt")
        public void testComplexCompanion() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/complexCompanion.kt");
        }

        @Test
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/constructors.kt");
        }

        @Test
        @TestMetadata("innerProtectedClass.kt")
        public void testInnerProtectedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/innerProtectedClass.kt");
        }

        @Test
        @TestMetadata("javaInheritedInKotlin.kt")
        public void testJavaInheritedInKotlin() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/javaInheritedInKotlin.kt");
        }

        @Test
        @TestMetadata("kt7971.kt")
        public void testKt7971() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/kt7971.kt");
        }

        @Test
        @TestMetadata("nonSuperCallConstructor.kt")
        public void testNonSuperCallConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructor.kt");
        }

        @Test
        @TestMetadata("nonSuperCallConstructorJavaDifferentPackage.kt")
        public void testNonSuperCallConstructorJavaDifferentPackage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/nonSuperCallConstructorJavaDifferentPackage.kt");
        }

        @Test
        @TestMetadata("protectedCallOnSubClass.kt")
        public void testProtectedCallOnSubClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/protectedCallOnSubClass.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyExtensions.kt")
        public void testSyntheticPropertyExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticPropertyExtensions.kt");
        }

        @Test
        @TestMetadata("syntheticSAMExtensions.kt")
        public void testSyntheticSAMExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/syntheticSAMExtensions.kt");
        }

        @Test
        @TestMetadata("unstableSmartCast.kt")
        public void testUnstableSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/unstableSmartCast.kt");
        }

        @Test
        @TestMetadata("withSmartcast.kt")
        public void testWithSmartcast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/protectedVisibility/withSmartcast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/scopes/variantProjections")
      @TestDataPath("$PROJECT_ROOT")
      public class VariantProjections {
        @Test
        @TestMetadata("interdependentStarProjections.kt")
        public void testInterdependentStarProjections() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/variantProjections/interdependentStarProjections.kt");
        }

        @Test
        @TestMetadata("irrelevantUnsafeVariance.kt")
        public void testIrrelevantUnsafeVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/scopes/variantProjections/irrelevantUnsafeVariance.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/script")
    @TestDataPath("$PROJECT_ROOT")
    public class Script {
      @Test
      @TestMetadata("AccessForwardDeclarationInScript.kts")
      public void testAccessForwardDeclarationInScript() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/AccessForwardDeclarationInScript.kts");
      }

      @Test
      @TestMetadata("destructuringDeclarationsScript.kts")
      public void testDestructuringDeclarationsScript() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/destructuringDeclarationsScript.kts");
      }

      @Test
      @TestMetadata("functionContractScript.kts")
      public void testFunctionContractScript() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/functionContractScript.kts");
      }

      @Test
      @TestMetadata("innerClassError.kts")
      public void testInnerClassError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/innerClassError.kts");
      }

      @Test
      @TestMetadata("NestedInnerClass.kts")
      public void testNestedInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/NestedInnerClass.kts");
      }

      @Test
      @TestMetadata("resolveInitializerOfDestructuringDeclarationOnce.kts")
      public void testResolveInitializerOfDestructuringDeclarationOnce() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/resolveInitializerOfDestructuringDeclarationOnce.kts");
      }

      @Test
      @TestMetadata("scriptScopes.kts")
      public void testScriptScopes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/scriptScopes.kts");
      }

      @Test
      @TestMetadata("topLevelPropertiesWithGetSet.kts")
      public void testTopLevelPropertiesWithGetSet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/topLevelPropertiesWithGetSet.kts");
      }

      @Test
      @TestMetadata("topLevelPropertyInitialization.kts")
      public void testTopLevelPropertyInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/topLevelPropertyInitialization.kts");
      }

      @Test
      @TestMetadata("typealiasInScript.kts")
      public void testTypealiasInScript() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/script/typealiasInScript.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sealed")
    @TestDataPath("$PROJECT_ROOT")
    public class Sealed {
      @Test
      @TestMetadata("DerivedTopLevel.kt")
      public void testDerivedTopLevel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/DerivedTopLevel.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnRoot.kt")
      public void testExhaustiveOnRoot() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/ExhaustiveOnRoot.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnTree.kt")
      public void testExhaustiveOnTree() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTree.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnTriangleStar.kt")
      public void testExhaustiveOnTriangleStar() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/ExhaustiveOnTriangleStar.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWhenMultipleInner.kt")
      public void testExhaustiveWhenMultipleInner() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/ExhaustiveWhenMultipleInner.kt");
      }

      @Test
      @TestMetadata("ExhaustiveWithFreedom.kt")
      public void testExhaustiveWithFreedom() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/ExhaustiveWithFreedom.kt");
      }

      @Test
      @TestMetadata("inheritorInDifferentModule.kt")
      public void testInheritorInDifferentModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/inheritorInDifferentModule.kt");
      }

      @Test
      @TestMetadata("Local.kt")
      public void testLocal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/Local.kt");
      }

      @Test
      @TestMetadata("LocalSealed.kt")
      public void testLocalSealed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/LocalSealed.kt");
      }

      @Test
      @TestMetadata("MultipleFiles_enabled.kt")
      public void testMultipleFiles_enabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/MultipleFiles_enabled.kt");
      }

      @Test
      @TestMetadata("NeverConstructed.kt")
      public void testNeverConstructed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverConstructed.kt");
      }

      @Test
      @TestMetadata("NeverDerivedFromNested.kt")
      public void testNeverDerivedFromNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverDerivedFromNested.kt");
      }

      @Test
      @TestMetadata("NeverEnum.kt")
      public void testNeverEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverEnum.kt");
      }

      @Test
      @TestMetadata("NeverFinal.kt")
      public void testNeverFinal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverFinal.kt");
      }

      @Test
      @TestMetadata("NeverObject.kt")
      public void testNeverObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverObject.kt");
      }

      @Test
      @TestMetadata("NeverOpen.kt")
      public void testNeverOpen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NeverOpen.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWhen.kt")
      public void testNonExhaustiveWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhen.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWhenNegated.kt")
      public void testNonExhaustiveWhenNegated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenNegated.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWhenWithAdditionalCase.kt")
      public void testNonExhaustiveWhenWithAdditionalCase() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAdditionalCase.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWhenWithAnyCase.kt")
      public void testNonExhaustiveWhenWithAnyCase() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NonExhaustiveWhenWithAnyCase.kt");
      }

      @Test
      @TestMetadata("NonPrivateConstructor.kt")
      public void testNonPrivateConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/NonPrivateConstructor.kt");
      }

      @Test
      @TestMetadata("privateSealedConstructors_error.kt")
      public void testPrivateSealedConstructors_error() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/privateSealedConstructors_error.kt");
      }

      @Test
      @TestMetadata("privateSealedConstructors_warning.kt")
      public void testPrivateSealedConstructors_warning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/privateSealedConstructors_warning.kt");
      }

      @Test
      @TestMetadata("privateTypeInConstructor.kt")
      public void testPrivateTypeInConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/privateTypeInConstructor.kt");
      }

      @Test
      @TestMetadata("protectedConstructors_enabled.kt")
      public void testProtectedConstructors_enabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/protectedConstructors_enabled.kt");
      }

      @Test
      @TestMetadata("sealedInheritorErrorMessage.kt")
      public void testSealedInheritorErrorMessage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/sealedInheritorErrorMessage.kt");
      }

      @Test
      @TestMetadata("TreeWhenFunctionalNoIs.kt")
      public void testTreeWhenFunctionalNoIs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/TreeWhenFunctionalNoIs.kt");
      }

      @Test
      @TestMetadata("WhenOnEmptySealed.kt")
      public void testWhenOnEmptySealed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/WhenOnEmptySealed.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sealed/interfaces")
      @TestDataPath("$PROJECT_ROOT")
      public class Interfaces {
        @Test
        @TestMetadata("inheritorInDifferentModule.kt")
        public void testInheritorInDifferentModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/interfaces/inheritorInDifferentModule.kt");
        }

        @Test
        @TestMetadata("sealedFunInterface.kt")
        public void testSealedFunInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sealed/interfaces/sealedFunInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SecondaryConstructors {
      @Test
      @TestMetadata("argumentsResolveInBodyAndDelegationCall.kt")
      public void testArgumentsResolveInBodyAndDelegationCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/argumentsResolveInBodyAndDelegationCall.kt");
      }

      @Test
      @TestMetadata("companionObjectScope.kt")
      public void testCompanionObjectScope() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/companionObjectScope.kt");
      }

      @Test
      @TestMetadata("constructorCallType.kt")
      public void testConstructorCallType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/constructorCallType.kt");
      }

      @Test
      @TestMetadata("constructorInObject.kt")
      public void testConstructorInObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/constructorInObject.kt");
      }

      @Test
      @TestMetadata("constructorInTrait.kt")
      public void testConstructorInTrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/constructorInTrait.kt");
      }

      @Test
      @TestMetadata("ctrsAnnotationResolve.kt")
      public void testCtrsAnnotationResolve() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/ctrsAnnotationResolve.kt");
      }

      @Test
      @TestMetadata("cyclicDelegationCalls.kt")
      public void testCyclicDelegationCalls() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/cyclicDelegationCalls.kt");
      }

      @Test
      @TestMetadata("dataClasses.kt")
      public void testDataClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/dataClasses.kt");
      }

      @Test
      @TestMetadata("delegationByWithoutPrimary.kt")
      public void testDelegationByWithoutPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/delegationByWithoutPrimary.kt");
      }

      @Test
      @TestMetadata("enums.kt")
      public void testEnums() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/enums.kt");
      }

      @Test
      @TestMetadata("errorsOnEmptyDelegationCall.kt")
      public void testErrorsOnEmptyDelegationCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/errorsOnEmptyDelegationCall.kt");
      }

      @Test
      @TestMetadata("expectedPrimaryConstructorCall.kt")
      public void testExpectedPrimaryConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/expectedPrimaryConstructorCall.kt");
      }

      @Test
      @TestMetadata("generics.kt")
      public void testGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/generics.kt");
      }

      @Test
      @TestMetadata("generics2.kt")
      public void testGenerics2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/generics2.kt");
      }

      @Test
      @TestMetadata("generics3.kt")
      public void testGenerics3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/generics3.kt");
      }

      @Test
      @TestMetadata("headerSupertypeInitialization.kt")
      public void testHeaderSupertypeInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerSupertypeInitialization.kt");
      }

      @Test
      @TestMetadata("implicitSuperCallErrorsIfPrimary.kt")
      public void testImplicitSuperCallErrorsIfPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/implicitSuperCallErrorsIfPrimary.kt");
      }

      @Test
      @TestMetadata("kt6992.kt")
      public void testKt6992() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/kt6992.kt");
      }

      @Test
      @TestMetadata("kt6993.kt")
      public void testKt6993() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/kt6993.kt");
      }

      @Test
      @TestMetadata("kt6994.kt")
      public void testKt6994() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/kt6994.kt");
      }

      @Test
      @TestMetadata("nestedExtendsInner.kt")
      public void testNestedExtendsInner() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/nestedExtendsInner.kt");
      }

      @Test
      @TestMetadata("noPrimaryConstructor.kt")
      public void testNoPrimaryConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/noPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("propertyInitializationWithPrimary.kt")
      public void testPropertyInitializationWithPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithPrimary.kt");
      }

      @Test
      @TestMetadata("propertyInitializationWithoutPrimary.kt")
      public void testPropertyInitializationWithoutPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/propertyInitializationWithoutPrimary.kt");
      }

      @Test
      @TestMetadata("redeclarations.kt")
      public void testRedeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/redeclarations.kt");
      }

      @Test
      @TestMetadata("redeclarationsOfConstructorsIgnored.kt")
      public void testRedeclarationsOfConstructorsIgnored() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/redeclarationsOfConstructorsIgnored.kt");
      }

      @Test
      @TestMetadata("reportResolutionErrorOnImplicitOnce.kt")
      public void testReportResolutionErrorOnImplicitOnce() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/reportResolutionErrorOnImplicitOnce.kt");
      }

      @Test
      @TestMetadata("resolvePropertyInitializerWithoutPrimary.kt")
      public void testResolvePropertyInitializerWithoutPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/resolvePropertyInitializerWithoutPrimary.kt");
      }

      @Test
      @TestMetadata("return.kt")
      public void testReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/return.kt");
      }

      @Test
      @TestMetadata("superAnyNonEmpty.kt")
      public void testSuperAnyNonEmpty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/superAnyNonEmpty.kt");
      }

      @Test
      @TestMetadata("superSecondaryNonExisting.kt")
      public void testSuperSecondaryNonExisting() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/superSecondaryNonExisting.kt");
      }

      @Test
      @TestMetadata("thisNonExisting.kt")
      public void testThisNonExisting() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/thisNonExisting.kt");
      }

      @Test
      @TestMetadata("unreachableCode.kt")
      public void testUnreachableCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/unreachableCode.kt");
      }

      @Test
      @TestMetadata("useOfPropertiesWithPrimary.kt")
      public void testUseOfPropertiesWithPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithPrimary.kt");
      }

      @Test
      @TestMetadata("useOfPropertiesWithoutPrimary.kt")
      public void testUseOfPropertiesWithoutPrimary() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/useOfPropertiesWithoutPrimary.kt");
      }

      @Test
      @TestMetadata("valOrValAndModifiersInCtr.kt")
      public void testValOrValAndModifiersInCtr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/valOrValAndModifiersInCtr.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class HeaderCallChecker {
        @Test
        @TestMetadata("accessBaseGenericFromInnerExtendingSameBase.kt")
        public void testAccessBaseGenericFromInnerExtendingSameBase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase.kt");
        }

        @Test
        @TestMetadata("accessBaseGenericFromInnerExtendingSameBase2.kt")
        public void testAccessBaseGenericFromInnerExtendingSameBase2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseGenericFromInnerExtendingSameBase2.kt");
        }

        @Test
        @TestMetadata("accessBaseWithSameExtension.kt")
        public void testAccessBaseWithSameExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessBaseWithSameExtension.kt");
        }

        @Test
        @TestMetadata("accessGenericBaseWithSameExtension.kt")
        public void testAccessGenericBaseWithSameExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/accessGenericBaseWithSameExtension.kt");
        }

        @Test
        @TestMetadata("innerInstanceCreation.kt")
        public void testInnerInstanceCreation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/innerInstanceCreation.kt");
        }

        @Test
        @TestMetadata("lambdaAsArgument.kt")
        public void testLambdaAsArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/lambdaAsArgument.kt");
        }

        @Test
        @TestMetadata("memberFunAccess.kt")
        public void testMemberFunAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/memberFunAccess.kt");
        }

        @Test
        @TestMetadata("objectLiteralAsArgument.kt")
        public void testObjectLiteralAsArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsArgument.kt");
        }

        @Test
        @TestMetadata("objectLiteralAsDefaultValueParameter.kt")
        public void testObjectLiteralAsDefaultValueParameter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/objectLiteralAsDefaultValueParameter.kt");
        }

        @Test
        @TestMetadata("operatorCall.kt")
        public void testOperatorCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/operatorCall.kt");
        }

        @Test
        @TestMetadata("passingInstance.kt")
        public void testPassingInstance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/passingInstance.kt");
        }

        @Test
        @TestMetadata("propertyAccess.kt")
        public void testPropertyAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccess.kt");
        }

        @Test
        @TestMetadata("propertyAccessUnitialized.kt")
        public void testPropertyAccessUnitialized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/propertyAccessUnitialized.kt");
        }

        @Test
        @TestMetadata("superFunAccess.kt")
        public void testSuperFunAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccess.kt");
        }

        @Test
        @TestMetadata("superFunAccessOverriden.kt")
        public void testSuperFunAccessOverriden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superFunAccessOverriden.kt");
        }

        @Test
        @TestMetadata("superPropertyAccess.kt")
        public void testSuperPropertyAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/superPropertyAccess.kt");
        }

        @Test
        @TestMetadata("thisAsExtensionReceiver.kt")
        public void testThisAsExtensionReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/secondaryConstructors/headerCallChecker/thisAsExtensionReceiver.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/smartCasts")
    @TestDataPath("$PROJECT_ROOT")
    public class SmartCasts {
      @Test
      @TestMetadata("alwaysNull.kt")
      public void testAlwaysNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/alwaysNull.kt");
      }

      @Test
      @TestMetadata("alwaysNullWithJava.kt")
      public void testAlwaysNullWithJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/alwaysNullWithJava.kt");
      }

      @Test
      @TestMetadata("binaryOperatorsWithJumps.kt")
      public void testBinaryOperatorsWithJumps() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/binaryOperatorsWithJumps.kt");
      }

      @Test
      @TestMetadata("binaryOperatorsWithJumps_before.kt")
      public void testBinaryOperatorsWithJumps_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/binaryOperatorsWithJumps_before.kt");
      }

      @Test
      @TestMetadata("classObjectMember.kt")
      public void testClassObjectMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/classObjectMember.kt");
      }

      @Test
      @TestMetadata("comparisonOfBuiltInTypesUnderOr.kt")
      public void testComparisonOfBuiltInTypesUnderOr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/comparisonOfBuiltInTypesUnderOr.kt");
      }

      @Test
      @TestMetadata("comparisonOfClassTypesUnderOr.kt")
      public void testComparisonOfClassTypesUnderOr() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/comparisonOfClassTypesUnderOr.kt");
      }

      @Test
      @TestMetadata("comparisonUnderAnd.kt")
      public void testComparisonUnderAnd() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/comparisonUnderAnd.kt");
      }

      @Test
      @TestMetadata("complexComparison.kt")
      public void testComplexComparison() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/complexComparison.kt");
      }

      @Test
      @TestMetadata("complexConditionsWithExcl.kt")
      public void testComplexConditionsWithExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/complexConditionsWithExcl.kt");
      }

      @Test
      @TestMetadata("disableDfaBooleanVariables.kt")
      public void testDisableDfaBooleanVariables() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/disableDfaBooleanVariables.kt");
      }

      @Test
      @TestMetadata("elvisExclExcl.kt")
      public void testElvisExclExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/elvisExclExcl.kt");
      }

      @Test
      @TestMetadata("elvisExclExclPlatform.kt")
      public void testElvisExclExclPlatform() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/elvisExclExclPlatform.kt");
      }

      @Test
      @TestMetadata("elvisExprNotNull.kt")
      public void testElvisExprNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/elvisExprNotNull.kt");
      }

      @Test
      @TestMetadata("elvisNothingRHS.kt")
      public void testElvisNothingRHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/elvisNothingRHS.kt");
      }

      @Test
      @TestMetadata("enumEntryMembers_after.kt")
      public void testEnumEntryMembers_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/enumEntryMembers_after.kt");
      }

      @Test
      @TestMetadata("enumEntryMembers_before.kt")
      public void testEnumEntryMembers_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/enumEntryMembers_before.kt");
      }

      @Test
      @TestMetadata("equalitySmartcast.kt")
      public void testEqualitySmartcast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/equalitySmartcast.kt");
      }

      @Test
      @TestMetadata("exclUnderAnd.kt")
      public void testExclUnderAnd() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/exclUnderAnd.kt");
      }

      @Test
      @TestMetadata("extensionSafeCall.kt")
      public void testExtensionSafeCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/extensionSafeCall.kt");
      }

      @Test
      @TestMetadata("fakeSmartCastOnEquality.kt")
      public void testFakeSmartCastOnEquality() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/fakeSmartCastOnEquality.kt");
      }

      @Test
      @TestMetadata("fieldExclExcl.kt")
      public void testFieldExclExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/fieldExclExcl.kt");
      }

      @Test
      @TestMetadata("fieldPlus.kt")
      public void testFieldPlus() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/fieldPlus.kt");
      }

      @Test
      @TestMetadata("implicitReceiverAcrossFunctions.kt")
      public void testImplicitReceiverAcrossFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/implicitReceiverAcrossFunctions.kt");
      }

      @Test
      @TestMetadata("implicitThisOnRefInLambdaInSmartcast.kt")
      public void testImplicitThisOnRefInLambdaInSmartcast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/implicitThisOnRefInLambdaInSmartcast.kt");
      }

      @Test
      @TestMetadata("implicitThisOrLocalVar.kt")
      public void testImplicitThisOrLocalVar() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/implicitThisOrLocalVar.kt");
      }

      @Test
      @TestMetadata("incDecToNull.kt")
      public void testIncDecToNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/incDecToNull.kt");
      }

      @Test
      @TestMetadata("kt2422.kt")
      public void testKt2422() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt2422.kt");
      }

      @Test
      @TestMetadata("kt2865.kt")
      public void testKt2865() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt2865.kt");
      }

      @Test
      @TestMetadata("kt30826.kt")
      public void testKt30826() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt30826.kt");
      }

      @Test
      @TestMetadata("kt30927.kt")
      public void testKt30927() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt30927.kt");
      }

      @Test
      @TestMetadata("kt32358_2.kt")
      public void testKt32358_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt32358_2.kt");
      }

      @Test
      @TestMetadata("kt3899.kt")
      public void testKt3899() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt3899.kt");
      }

      @Test
      @TestMetadata("kt6819.kt")
      public void testKt6819() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/kt6819.kt");
      }

      @Test
      @TestMetadata("lambdaAndArgumentFun.kt")
      public void testLambdaAndArgumentFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdaAndArgumentFun.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentWithBoundWithoutType.kt")
      public void testLambdaArgumentWithBoundWithoutType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdaArgumentWithBoundWithoutType.kt");
      }

      @Test
      @TestMetadata("localClassChanges.kt")
      public void testLocalClassChanges() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/localClassChanges.kt");
      }

      @Test
      @TestMetadata("localDelegatedPropertyAfter.kt")
      public void testLocalDelegatedPropertyAfter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/localDelegatedPropertyAfter.kt");
      }

      @Test
      @TestMetadata("localDelegatedPropertyBefore.kt")
      public void testLocalDelegatedPropertyBefore() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/localDelegatedPropertyBefore.kt");
      }

      @Test
      @TestMetadata("localFunChanges.kt")
      public void testLocalFunChanges() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/localFunChanges.kt");
      }

      @Test
      @TestMetadata("localObjectChanges.kt")
      public void testLocalObjectChanges() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/localObjectChanges.kt");
      }

      @Test
      @TestMetadata("noErrorCheckForPackageLevelVal.kt")
      public void testNoErrorCheckForPackageLevelVal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/noErrorCheckForPackageLevelVal.kt");
      }

      @Test
      @TestMetadata("noSmartcastForNonFinalMembersFromJava.kt")
      public void testNoSmartcastForNonFinalMembersFromJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/noSmartcastForNonFinalMembersFromJava.kt");
      }

      @Test
      @TestMetadata("NullableFunctionTypeAsMemberMutableProperty.kt")
      public void testNullableFunctionTypeAsMemberMutableProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/NullableFunctionTypeAsMemberMutableProperty.kt");
      }

      @Test
      @TestMetadata("NullableFunctionTypeAsMemberMutablePropertyFromConstructor.kt")
      public void testNullableFunctionTypeAsMemberMutablePropertyFromConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/NullableFunctionTypeAsMemberMutablePropertyFromConstructor.kt");
      }

      @Test
      @TestMetadata("nullableLambda.kt")
      public void testNullableLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/nullableLambda.kt");
      }

      @Test
      @TestMetadata("openInSealed.kt")
      public void testOpenInSealed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/openInSealed.kt");
      }

      @Test
      @TestMetadata("ownerDeclaresBothModifies.kt")
      public void testOwnerDeclaresBothModifies() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/ownerDeclaresBothModifies.kt");
      }

      @Test
      @TestMetadata("propertyAsCondition.kt")
      public void testPropertyAsCondition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/propertyAsCondition.kt");
      }

      @Test
      @TestMetadata("propertyToNotNull.kt")
      public void testPropertyToNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/propertyToNotNull.kt");
      }

      @Test
      @TestMetadata("savedSmartcastResult.kt")
      public void testSavedSmartcastResult() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/savedSmartcastResult.kt");
      }

      @Test
      @TestMetadata("smartCastOnAlienPropertyFromInvisibleClass.kt")
      public void testSmartCastOnAlienPropertyFromInvisibleClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastOnAlienPropertyFromInvisibleClass.kt");
      }

      @Test
      @TestMetadata("smartCastOnAlienPropertyFromInvisibleClassForbidden.kt")
      public void testSmartCastOnAlienPropertyFromInvisibleClassForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastOnAlienPropertyFromInvisibleClassForbidden.kt");
      }

      @Test
      @TestMetadata("smartCastOnWhen.kt")
      public void testSmartCastOnWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastOnWhen.kt");
      }

      @Test
      @TestMetadata("smartCastWithAndTrue.kt")
      public void testSmartCastWithAndTrue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastWithAndTrue.kt");
      }

      @Test
      @TestMetadata("smartCastWithOrFalse.kt")
      public void testSmartCastWithOrFalse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastWithOrFalse.kt");
      }

      @Test
      @TestMetadata("smartCastWithOrFalse_InferMoreImplicationsFromBooleanExpressions.kt")
      public void testSmartCastWithOrFalse_InferMoreImplicationsFromBooleanExpressions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartCastWithOrFalse_InferMoreImplicationsFromBooleanExpressions.kt");
      }

      @Test
      @TestMetadata("smartcastOnSameFieldOfDifferentInstances.kt")
      public void testSmartcastOnSameFieldOfDifferentInstances() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartcastOnSameFieldOfDifferentInstances.kt");
      }

      @Test
      @TestMetadata("smartcastToInvisibleType_java.kt")
      public void testSmartcastToInvisibleType_java() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartcastToInvisibleType_java.kt");
      }

      @Test
      @TestMetadata("smartcastToInvisibleType_kotlin.kt")
      public void testSmartcastToInvisibleType_kotlin() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartcastToInvisibleType_kotlin.kt");
      }

      @Test
      @TestMetadata("smartcastToNothingAfterCheckingForNull.kt")
      public void testSmartcastToNothingAfterCheckingForNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/smartcastToNothingAfterCheckingForNull.kt");
      }

      @Test
      @TestMetadata("stabilityOnReceiverWithDifferentModality.kt")
      public void testStabilityOnReceiverWithDifferentModality() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/stabilityOnReceiverWithDifferentModality.kt");
      }

      @Test
      @TestMetadata("throwInTry.kt")
      public void testThrowInTry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/throwInTry.kt");
      }

      @Test
      @TestMetadata("toInvisible.kt")
      public void testToInvisible() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/toInvisible.kt");
      }

      @Test
      @TestMetadata("typeInComparison.kt")
      public void testTypeInComparison() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/typeInComparison.kt");
      }

      @Test
      @TestMetadata("unstableSmartCastOnInvokeReceiver.kt")
      public void testUnstableSmartCastOnInvokeReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/unstableSmartCastOnInvokeReceiver.kt");
      }

      @Test
      @TestMetadata("unstableToStable.kt")
      public void testUnstableToStable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/unstableToStable.kt");
      }

      @Test
      @TestMetadata("unstableToStableTypes.kt")
      public void testUnstableToStableTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/unstableToStableTypes.kt");
      }

      @Test
      @TestMetadata("varOnFinalReceiver.kt")
      public void testVarOnFinalReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varOnFinalReceiver.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/castchecks")
      @TestDataPath("$PROJECT_ROOT")
      public class Castchecks {
        @Test
        @TestMetadata("basicOn.kt")
        public void testBasicOn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/castchecks/basicOn.kt");
        }

        @Test
        @TestMetadata("castInTryWithCatch.kt")
        public void testCastInTryWithCatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithCatch.kt");
        }

        @Test
        @TestMetadata("castInTryWithJump.kt")
        public void testCastInTryWithJump() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithJump.kt");
        }

        @Test
        @TestMetadata("castInTryWithoutCatch.kt")
        public void testCastInTryWithoutCatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/castchecks/castInTryWithoutCatch.kt");
        }

        @Test
        @TestMetadata("variables.kt")
        public void testVariables() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/castchecks/variables.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/elvis")
      @TestDataPath("$PROJECT_ROOT")
      public class Elvis {
        @Test
        @TestMetadata("elvisResultSavedInVal.kt")
        public void testElvisResultSavedInVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/elvis/elvisResultSavedInVal.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("intersectionTypes.kt")
        public void testIntersectionTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/inference/intersectionTypes.kt");
        }

        @Test
        @TestMetadata("kt1275.kt")
        public void testKt1275() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/inference/kt1275.kt");
        }

        @Test
        @TestMetadata("kt39010.kt")
        public void testKt39010() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/inference/kt39010.kt");
        }

        @Test
        @TestMetadata("kt39010_2.kt")
        public void testKt39010_2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/inference/kt39010_2.kt");
        }

        @Test
        @TestMetadata("syntheticPropertyOnUnstableSmartcast.kt")
        public void testSyntheticPropertyOnUnstableSmartcast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/inference/syntheticPropertyOnUnstableSmartcast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/intersectionScope")
      @TestDataPath("$PROJECT_ROOT")
      public class IntersectionScope {
        @Test
        @TestMetadata("conflictingReturnType.kt")
        public void testConflictingReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/conflictingReturnType.kt");
        }

        @Test
        @TestMetadata("flexibleTypes.kt")
        public void testFlexibleTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/flexibleTypes.kt");
        }

        @Test
        @TestMetadata("mostSpecific.kt")
        public void testMostSpecific() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecific.kt");
        }

        @Test
        @TestMetadata("mostSpecificIrrelevant.kt")
        public void testMostSpecificIrrelevant() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/mostSpecificIrrelevant.kt");
        }

        @Test
        @TestMetadata("properties.kt")
        public void testProperties() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/properties.kt");
        }

        @Test
        @TestMetadata("propertiesConflict.kt")
        public void testPropertiesConflict() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/propertiesConflict.kt");
        }

        @Test
        @TestMetadata("refineReturnType.kt")
        public void testRefineReturnType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/refineReturnType.kt");
        }

        @Test
        @TestMetadata("unstableSmartCast.kt")
        public void testUnstableSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/unstableSmartCast.kt");
        }

        @Test
        @TestMetadata("validTypeParameters.kt")
        public void testValidTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParameters.kt");
        }

        @Test
        @TestMetadata("validTypeParametersNoSmartCast.kt")
        public void testValidTypeParametersNoSmartCast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/intersectionScope/validTypeParametersNoSmartCast.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts")
      @TestDataPath("$PROJECT_ROOT")
      public class LambdasWithContracts {
        @Test
        @TestMetadata("lambdaWithCallInPlace.kt")
        public void testLambdaWithCallInPlace() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlace.kt");
        }

        @Test
        @TestMetadata("lambdaWithCallInPlaceAndAssignmentOperator.kt")
        public void testLambdaWithCallInPlaceAndAssignmentOperator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndAssignmentOperator.kt");
        }

        @Test
        @TestMetadata("lambdaWithCallInPlaceAndBounds.kt")
        public void testLambdaWithCallInPlaceAndBounds() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndBounds.kt");
        }

        @Test
        @TestMetadata("lambdaWithCallInPlaceAndCycles.kt")
        public void testLambdaWithCallInPlaceAndCycles() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndCycles.kt");
        }

        @Test
        @TestMetadata("lambdaWithCallInPlaceAndDelegate.kt")
        public void testLambdaWithCallInPlaceAndDelegate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAndDelegate.kt");
        }

        @Test
        @TestMetadata("lambdaWithCallInPlaceAssignmnetsAndCycles.kt")
        public void testLambdaWithCallInPlaceAssignmnetsAndCycles() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/lambdasWithContracts/lambdaWithCallInPlaceAssignmnetsAndCycles.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @Test
        @TestMetadata("assignElvisIfBreakInsideWhileTrue.kt")
        public void testAssignElvisIfBreakInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/assignElvisIfBreakInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("assignWhenInsideWhileTrue.kt")
        public void testAssignWhenInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/assignWhenInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("callBreakBetweenInsideDoWhile.kt")
        public void testCallBreakBetweenInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/callBreakBetweenInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("callBreakFirstInsideDoWhile.kt")
        public void testCallBreakFirstInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/callBreakFirstInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("callBreakInsideDoWhile.kt")
        public void testCallBreakInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/callBreakInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("callBreakSecondInsideDoWhile.kt")
        public void testCallBreakSecondInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/callBreakSecondInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("callBreakThirdInsideDoWhile.kt")
        public void testCallBreakThirdInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/callBreakThirdInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("doWhileEarlyBreak.kt")
        public void testDoWhileEarlyBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyBreak.kt");
        }

        @Test
        @TestMetadata("doWhileEarlyContinue.kt")
        public void testDoWhileEarlyContinue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileEarlyContinue.kt");
        }

        @Test
        @TestMetadata("doWhileInConditionWithBreak.kt")
        public void testDoWhileInConditionWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileInConditionWithBreak.kt");
        }

        @Test
        @TestMetadata("doWhileLiteral.kt")
        public void testDoWhileLiteral() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileLiteral.kt");
        }

        @Test
        @TestMetadata("doWhileNotNullBreak.kt")
        public void testDoWhileNotNullBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNotNullBreak.kt");
        }

        @Test
        @TestMetadata("doWhileNullWithBreak.kt")
        public void testDoWhileNullWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileNullWithBreak.kt");
        }

        @Test
        @TestMetadata("doWhileWithAssignment.kt")
        public void testDoWhileWithAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/doWhileWithAssignment.kt");
        }

        @Test
        @TestMetadata("elvisBreakInsideDoWhile.kt")
        public void testElvisBreakInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/elvisBreakInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("elvisIfBreakInsideWhileTrue.kt")
        public void testElvisIfBreakInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/elvisIfBreakInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("elvisLeftBreakInsideWhileTrue.kt")
        public void testElvisLeftBreakInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/elvisLeftBreakInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("forLoopWithAssignment.kt")
        public void testForLoopWithAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/forLoopWithAssignment.kt");
        }

        @Test
        @TestMetadata("ifBreakAssignInsideDoWhile.kt")
        public void testIfBreakAssignInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("ifBreakAssignInsideWhileTrue.kt")
        public void testIfBreakAssignInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakAssignInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("ifBreakExprInsideWhileTrue.kt")
        public void testIfBreakExprInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/ifBreakExprInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("leftElvisBreakInsideWhileTrue.kt")
        public void testLeftElvisBreakInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/leftElvisBreakInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("nestedDoWhileWithLongContinue.kt")
        public void testNestedDoWhileWithLongContinue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/nestedDoWhileWithLongContinue.kt");
        }

        @Test
        @TestMetadata("nestedLoopsWithLongBreak.kt")
        public void testNestedLoopsWithLongBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/nestedLoopsWithLongBreak.kt");
        }

        @Test
        @TestMetadata("plusAssignWhenInsideDoWhile.kt")
        public void testPlusAssignWhenInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/plusAssignWhenInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("safeCallBreakInsideDoWhile.kt")
        public void testSafeCallBreakInsideDoWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/safeCallBreakInsideDoWhile.kt");
        }

        @Test
        @TestMetadata("whenInsideWhileTrue.kt")
        public void testWhenInsideWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whenInsideWhileTrue.kt");
        }

        @Test
        @TestMetadata("whileNullWithBreak.kt")
        public void testWhileNullWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileNullWithBreak.kt");
        }

        @Test
        @TestMetadata("whileSimple.kt")
        public void testWhileSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileSimple.kt");
        }

        @Test
        @TestMetadata("whileTrivial.kt")
        public void testWhileTrivial() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileTrivial.kt");
        }

        @Test
        @TestMetadata("whileTrueBreakReturn.kt")
        public void testWhileTrueBreakReturn() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueBreakReturn.kt");
        }

        @Test
        @TestMetadata("whileTrueEarlyBreak.kt")
        public void testWhileTrueEarlyBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileTrueEarlyBreak.kt");
        }

        @Test
        @TestMetadata("WhileTrueWithBreakInIfCondition.kt")
        public void testWhileTrueWithBreakInIfCondition() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/WhileTrueWithBreakInIfCondition.kt");
        }

        @Test
        @TestMetadata("whileWithAssertInConditionAndBreak.kt")
        public void testWhileWithAssertInConditionAndBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/loops/whileWithAssertInConditionAndBreak.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/objectLiterals")
      @TestDataPath("$PROJECT_ROOT")
      public class ObjectLiterals {
        @Test
        @TestMetadata("captured.kt")
        public void testCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/objectLiterals/captured.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/publicVals")
      @TestDataPath("$PROJECT_ROOT")
      public class PublicVals {
        @Test
        @TestMetadata("accessThrowOtherModule.kt")
        public void testAccessThrowOtherModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/accessThrowOtherModule.kt");
        }

        @Test
        @TestMetadata("customGetter.kt")
        public void testCustomGetter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/customGetter.kt");
        }

        @Test
        @TestMetadata("delegate.kt")
        public void testDelegate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/delegate.kt");
        }

        @Test
        @TestMetadata("open.kt")
        public void testOpen() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/open.kt");
        }

        @Test
        @TestMetadata("otherModule.kt")
        public void testOtherModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModule.kt");
        }

        @Test
        @TestMetadata("otherModuleInheritance.kt")
        public void testOtherModuleInheritance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModuleInheritance.kt");
        }

        @Test
        @TestMetadata("otherModuleInheritance_after.kt")
        public void testOtherModuleInheritance_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModuleInheritance_after.kt");
        }

        @Test
        @TestMetadata("otherModuleOpenVal.kt")
        public void testOtherModuleOpenVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/otherModuleOpenVal.kt");
        }

        @Test
        @TestMetadata("var.kt")
        public void testVar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/publicVals/var.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/safecalls")
      @TestDataPath("$PROJECT_ROOT")
      public class Safecalls {
        @Test
        @TestMetadata("anotherVal.kt")
        public void testAnotherVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/anotherVal.kt");
        }

        @Test
        @TestMetadata("argument.kt")
        public void testArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/argument.kt");
        }

        @Test
        @TestMetadata("chainMixedUnsafe.kt")
        public void testChainMixedUnsafe() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/chainMixedUnsafe.kt");
        }

        @Test
        @TestMetadata("doubleCall.kt")
        public void testDoubleCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/doubleCall.kt");
        }

        @Test
        @TestMetadata("falseSecondArgument.kt")
        public void testFalseSecondArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/falseSecondArgument.kt");
        }

        @Test
        @TestMetadata("innerReceiver.kt")
        public void testInnerReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/innerReceiver.kt");
        }

        @Test
        @TestMetadata("insideIfExpr.kt")
        public void testInsideIfExpr() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/insideIfExpr.kt");
        }

        @Test
        @TestMetadata("nullableReceiver.kt")
        public void testNullableReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiver.kt");
        }

        @Test
        @TestMetadata("nullableReceiverInLongChain.kt")
        public void testNullableReceiverInLongChain() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverInLongChain.kt");
        }

        @Test
        @TestMetadata("nullableReceiverWithFlexible.kt")
        public void testNullableReceiverWithFlexible() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/nullableReceiverWithFlexible.kt");
        }

        @Test
        @TestMetadata("receiverAndChainFalse.kt")
        public void testReceiverAndChainFalse() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/receiverAndChainFalse.kt");
        }

        @Test
        @TestMetadata("safeCallIsAlwaysNullable.kt")
        public void testSafeCallIsAlwaysNullable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/safeCallIsAlwaysNullable.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/simple.kt");
        }

        @Test
        @TestMetadata("simpleNullableReceiver.kt")
        public void testSimpleNullableReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/simpleNullableReceiver.kt");
        }

        @Test
        @TestMetadata("twoArgs.kt")
        public void testTwoArgs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/safecalls/twoArgs.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/variables")
      @TestDataPath("$PROJECT_ROOT")
      public class Variables {
        @Test
        @TestMetadata("aliasing.kt")
        public void testAliasing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/aliasing.kt");
        }

        @Test
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/assignment.kt");
        }

        @Test
        @TestMetadata("capturedByAtLeastOnce.kt")
        public void testCapturedByAtLeastOnce() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/capturedByAtLeastOnce.kt");
        }

        @Test
        @TestMetadata("capturedByMultipleLambdas.kt")
        public void testCapturedByMultipleLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/capturedByMultipleLambdas.kt");
        }

        @Test
        @TestMetadata("capturedByNested.kt")
        public void testCapturedByNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/capturedByNested.kt");
        }

        @Test
        @TestMetadata("capturedLoopVariable.kt")
        public void testCapturedLoopVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/capturedLoopVariable.kt");
        }

        @Test
        @TestMetadata("capturedWithControlJumps.kt")
        public void testCapturedWithControlJumps() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/capturedWithControlJumps.kt");
        }

        @Test
        @TestMetadata("classMembers.kt")
        public void testClassMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/classMembers.kt");
        }

        @Test
        @TestMetadata("doWhileWithMiddleBreak.kt")
        public void testDoWhileWithMiddleBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/doWhileWithMiddleBreak.kt");
        }

        @Test
        @TestMetadata("ifElseBlockInsideDoWhileWithBreak.kt")
        public void testIfElseBlockInsideDoWhileWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/ifElseBlockInsideDoWhileWithBreak.kt");
        }

        @Test
        @TestMetadata("ifVarIsChanged.kt")
        public void testIfVarIsChanged() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/ifVarIsChanged.kt");
        }

        @Test
        @TestMetadata("initialization.kt")
        public void testInitialization() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/initialization.kt");
        }

        @Test
        @TestMetadata("lambdaBetweenArguments.kt")
        public void testLambdaBetweenArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/lambdaBetweenArguments.kt");
        }

        @Test
        @TestMetadata("localDelegatedProperty.kt")
        public void testLocalDelegatedProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/localDelegatedProperty.kt");
        }

        @Test
        @TestMetadata("objectMembers.kt")
        public void testObjectMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/objectMembers.kt");
        }

        @Test
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/property.kt");
        }

        @Test
        @TestMetadata("reassignedDependency.kt")
        public void testReassignedDependency() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/reassignedDependency.kt");
        }

        @Test
        @TestMetadata("reassignedDependency_unstable.kt")
        public void testReassignedDependency_unstable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/reassignedDependency_unstable.kt");
        }

        @Test
        @TestMetadata("reassignedInRhs.kt")
        public void testReassignedInRhs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/reassignedInRhs.kt");
        }

        @Test
        @TestMetadata("reassignment.kt")
        public void testReassignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/reassignment.kt");
        }

        @Test
        @TestMetadata("staticJavaFieldFromOtherModule.kt")
        public void testStaticJavaFieldFromOtherModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/staticJavaFieldFromOtherModule.kt");
        }

        @Test
        @TestMetadata("staticJavaFieldFromSameModule.kt")
        public void testStaticJavaFieldFromSameModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/staticJavaFieldFromSameModule.kt");
        }

        @Test
        @TestMetadata("unstableAliasing.kt")
        public void testUnstableAliasing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/unstableAliasing.kt");
        }

        @Test
        @TestMetadata("varChangedInLoop.kt")
        public void testVarChangedInLoop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/varChangedInLoop.kt");
        }

        @Test
        @TestMetadata("whileTrue.kt")
        public void testWhileTrue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/variables/whileTrue.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/smartCasts/varnotnull")
      @TestDataPath("$PROJECT_ROOT")
      public class Varnotnull {
        @Test
        @TestMetadata("assignNestedWhile.kt")
        public void testAssignNestedWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignNestedWhile.kt");
        }

        @Test
        @TestMetadata("assignment.kt")
        public void testAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/assignment.kt");
        }

        @Test
        @TestMetadata("boundInitializer.kt")
        public void testBoundInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializer.kt");
        }

        @Test
        @TestMetadata("boundInitializerWrong.kt")
        public void testBoundInitializerWrong() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/boundInitializerWrong.kt");
        }

        @Test
        @TestMetadata("capturedInClosureModifiedBefore.kt")
        public void testCapturedInClosureModifiedBefore() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/capturedInClosureModifiedBefore.kt");
        }

        @Test
        @TestMetadata("classDelegationError.kt")
        public void testClassDelegationError() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/classDelegationError.kt");
        }

        @Test
        @TestMetadata("doWhileWithBreak.kt")
        public void testDoWhileWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithBreak.kt");
        }

        @Test
        @TestMetadata("doWhileWithMiddleBreak.kt")
        public void testDoWhileWithMiddleBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/doWhileWithMiddleBreak.kt");
        }

        @Test
        @TestMetadata("forEach.kt")
        public void testForEach() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEach.kt");
        }

        @Test
        @TestMetadata("forEachWithBreak.kt")
        public void testForEachWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithBreak.kt");
        }

        @Test
        @TestMetadata("forEachWithContinue.kt")
        public void testForEachWithContinue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/forEachWithContinue.kt");
        }

        @Test
        @TestMetadata("infiniteWhileWithBreak.kt")
        public void testInfiniteWhileWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/infiniteWhileWithBreak.kt");
        }

        @Test
        @TestMetadata("initInTryReturnInCatch.kt")
        public void testInitInTryReturnInCatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/initInTryReturnInCatch.kt");
        }

        @Test
        @TestMetadata("initialization.kt")
        public void testInitialization() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/initialization.kt");
        }

        @Test
        @TestMetadata("leakingLambdaInCalledInPlace.kt")
        public void testLeakingLambdaInCalledInPlace() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/leakingLambdaInCalledInPlace.kt");
        }

        @Test
        @TestMetadata("nestedWhile.kt")
        public void testNestedWhile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/nestedWhile.kt");
        }

        @Test
        @TestMetadata("plusplusMinusminus.kt")
        public void testPlusplusMinusminus() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/plusplusMinusminus.kt");
        }

        @Test
        @TestMetadata("postfixNullableIncrement.kt")
        public void testPostfixNullableIncrement() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/postfixNullableIncrement.kt");
        }

        @Test
        @TestMetadata("prefixNullableClassIncrement.kt")
        public void testPrefixNullableClassIncrement() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableClassIncrement.kt");
        }

        @Test
        @TestMetadata("prefixNullableIncrement.kt")
        public void testPrefixNullableIncrement() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/prefixNullableIncrement.kt");
        }

        @Test
        @TestMetadata("setNotNullInTry.kt")
        public void testSetNotNullInTry() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNotNullInTry.kt");
        }

        @Test
        @TestMetadata("setNullInTry.kt")
        public void testSetNullInTry() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTry.kt");
        }

        @Test
        @TestMetadata("setNullInTryFinally.kt")
        public void testSetNullInTryFinally() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/setNullInTryFinally.kt");
        }

        @Test
        @TestMetadata("unnecessaryWithMap.kt")
        public void testUnnecessaryWithMap() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/unnecessaryWithMap.kt");
        }

        @Test
        @TestMetadata("varCapturedInClosure.kt")
        public void testVarCapturedInClosure() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/varCapturedInClosure.kt");
        }

        @Test
        @TestMetadata("varChangedInLoop.kt")
        public void testVarChangedInLoop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/varChangedInLoop.kt");
        }

        @Test
        @TestMetadata("varIntNull.kt")
        public void testVarIntNull() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/varIntNull.kt");
        }

        @Test
        @TestMetadata("varNull.kt")
        public void testVarNull() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/varNull.kt");
        }

        @Test
        @TestMetadata("whileWithBreak.kt")
        public void testWhileWithBreak() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/smartCasts/varnotnull/whileWithBreak.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility")
    @TestDataPath("$PROJECT_ROOT")
    public class SourceCompatibility {
      @Test
      @TestMetadata("noMultiplatformProjects.kt")
      public void testNoMultiplatformProjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/noMultiplatformProjects.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion")
      @TestDataPath("$PROJECT_ROOT")
      public class ApiVersion {
        @Test
        @TestMetadata("annotations.kt")
        public void testAnnotations() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/annotations.kt");
        }

        @Test
        @TestMetadata("classesAndConstructors.kt")
        public void testClassesAndConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/classesAndConstructors.kt");
        }

        @Test
        @TestMetadata("overriddenMembers.kt")
        public void testOverriddenMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/overriddenMembers.kt");
        }

        @Test
        @TestMetadata("propertyAccessors.kt")
        public void testPropertyAccessors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/propertyAccessors.kt");
        }

        @Test
        @TestMetadata("simpleMembers.kt")
        public void testSimpleMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/simpleMembers.kt");
        }

        @Test
        @TestMetadata("typealiasesAsCompanionObjects.kt")
        public void testTypealiasesAsCompanionObjects() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsCompanionObjects.kt");
        }

        @Test
        @TestMetadata("typealiasesAsConstructors.kt")
        public void testTypealiasesAsConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsConstructors.kt");
        }

        @Test
        @TestMetadata("typealiasesAsObjects.kt")
        public void testTypealiasesAsObjects() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsObjects.kt");
        }

        @Test
        @TestMetadata("typealiasesAsTypes.kt")
        public void testTypealiasesAsTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesAsTypes.kt");
        }

        @Test
        @TestMetadata("typealiasesOnImport.kt")
        public void testTypealiasesOnImport() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/sourceCompatibility/apiVersion/typealiasesOnImport.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/substitutions")
    @TestDataPath("$PROJECT_ROOT")
    public class Substitutions {
      @Test
      @TestMetadata("kt1558-short.kt")
      public void testKt1558_short() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/substitutions/kt1558-short.kt");
      }

      @Test
      @TestMetadata("starProjections.kt")
      public void testStarProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/substitutions/starProjections.kt");
      }

      @Test
      @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt")
      public void testUpperBoundsSubstitutionForOverloadResolutionWithAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithAmbiguity.kt");
      }

      @Test
      @TestMetadata("upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt")
      public void testUpperBoundsSubstitutionForOverloadResolutionWithErrorTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/substitutions/upperBoundsSubstitutionForOverloadResolutionWithErrorTypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/subtyping")
    @TestDataPath("$PROJECT_ROOT")
    public class Subtyping {
      @Test
      @TestMetadata("extFunctionTypeAsSuperType.kt")
      public void testExtFunctionTypeAsSuperType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/extFunctionTypeAsSuperType.kt");
      }

      @Test
      @TestMetadata("findClosestCorrespondingSupertype.kt")
      public void testFindClosestCorrespondingSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/findClosestCorrespondingSupertype.kt");
      }

      @Test
      @TestMetadata("javaAndKotlinSuperType.kt")
      public void testJavaAndKotlinSuperType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/javaAndKotlinSuperType.kt");
      }

      @Test
      @TestMetadata("kFunctionalCST.kt")
      public void testKFunctionalCST() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/kFunctionalCST.kt");
      }

      @Test
      @TestMetadata("kt2744.kt")
      public void testKt2744() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/kt2744.kt");
      }

      @Test
      @TestMetadata("kt304.kt")
      public void testKt304() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/kt304.kt");
      }

      @Test
      @TestMetadata("kt3159.kt")
      public void testKt3159() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/kt3159.kt");
      }

      @Test
      @TestMetadata("kt-1457.kt")
      public void testKt_1457() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/kt-1457.kt");
      }

      @Test
      @TestMetadata("localAnonymousObjects.kt")
      public void testLocalAnonymousObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/localAnonymousObjects.kt");
      }

      @Test
      @TestMetadata("localClasses.kt")
      public void testLocalClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/localClasses.kt");
      }

      @Test
      @TestMetadata("memberAnonymousObjects.kt")
      public void testMemberAnonymousObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/memberAnonymousObjects.kt");
      }

      @Test
      @TestMetadata("nestedIntoLocalClasses.kt")
      public void testNestedIntoLocalClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/nestedIntoLocalClasses.kt");
      }

      @Test
      @TestMetadata("nestedLocalClasses.kt")
      public void testNestedLocalClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/nestedLocalClasses.kt");
      }

      @Test
      @TestMetadata("suspendExtFunctionTypeAsSuperType.kt")
      public void testSuspendExtFunctionTypeAsSuperType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/suspendExtFunctionTypeAsSuperType.kt");
      }

      @Test
      @TestMetadata("topLevelAnonymousObjects.kt")
      public void testTopLevelAnonymousObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/topLevelAnonymousObjects.kt");
      }

      @Test
      @TestMetadata("unresolvedSupertype.kt")
      public void testUnresolvedSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/subtyping/unresolvedSupertype.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suppress")
    @TestDataPath("$PROJECT_ROOT")
    public class Suppress {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/suppress/allWarnings")
      @TestDataPath("$PROJECT_ROOT")
      public class AllWarnings {
        @Test
        @TestMetadata("suppressWarningsOnClass.kt")
        public void testSuppressWarningsOnClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suppress/allWarnings/suppressWarningsOnClass.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/suspendConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class SuspendConversion {
      @Test
      @TestMetadata("basicSuspendConversion.kt")
      public void testBasicSuspendConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversion.kt");
      }

      @Test
      @TestMetadata("basicSuspendConversionForCallableReference.kt")
      public void testBasicSuspendConversionForCallableReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/basicSuspendConversionForCallableReference.kt");
      }

      @Test
      @TestMetadata("implicitInvokeWithSpecificType.kt")
      public void testImplicitInvokeWithSpecificType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/implicitInvokeWithSpecificType.kt");
      }

      @Test
      @TestMetadata("overloadResolutionBySuspendModifier.kt")
      public void testOverloadResolutionBySuspendModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/overloadResolutionBySuspendModifier.kt");
      }

      @Test
      @TestMetadata("suspendAnonymousAsNonSuspend.kt")
      public void testSuspendAnonymousAsNonSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/suspendAnonymousAsNonSuspend.kt");
      }

      @Test
      @TestMetadata("suspendCallFromAnonymousSuspend.kt")
      public void testSuspendCallFromAnonymousSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/suspendCallFromAnonymousSuspend.kt");
      }

      @Test
      @TestMetadata("suspendConversionDisabled.kt")
      public void testSuspendConversionDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/suspendConversion/suspendConversionDisabled.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntax")
    @TestDataPath("$PROJECT_ROOT")
    public class Syntax {
      @Test
      @TestMetadata("complicatedLTGT.kt")
      public void testComplicatedLTGT() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntax/complicatedLTGT.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions")
    @TestDataPath("$PROJECT_ROOT")
    public class SyntheticExtensions {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties")
      @TestDataPath("$PROJECT_ROOT")
      public class JavaProperties {
        @Test
        @TestMetadata("AbbreviationName.kt")
        public void testAbbreviationName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/AbbreviationName.kt");
        }

        @Test
        @TestMetadata("Bases.kt")
        public void testBases() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Bases.kt");
        }

        @Test
        @TestMetadata("FalseGetters.kt")
        public void testFalseGetters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseGetters.kt");
        }

        @Test
        @TestMetadata("FalseSetters.kt")
        public void testFalseSetters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/FalseSetters.kt");
        }

        @Test
        @TestMetadata("GetA.kt")
        public void testGetA() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/GetA.kt");
        }

        @Test
        @TestMetadata("Getter.kt")
        public void testGetter() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/Getter.kt");
        }

        @Test
        @TestMetadata("IsNaming.kt")
        public void testIsNaming() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/IsNaming.kt");
        }

        @Test
        @TestMetadata("KotlinOverridesJava.kt")
        public void testKotlinOverridesJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava.kt");
        }

        @Test
        @TestMetadata("KotlinOverridesJava2.kt")
        public void testKotlinOverridesJava2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/KotlinOverridesJava2.kt");
        }

        @Test
        @TestMetadata("nonValidFirstChar.kt")
        public void testNonValidFirstChar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/nonValidFirstChar.kt");
        }

        @Test
        @TestMetadata("OnlyAscii.kt")
        public void testOnlyAscii() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyAscii.kt");
        }

        @Test
        @TestMetadata("OnlyPublic.kt")
        public void testOnlyPublic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OnlyPublic.kt");
        }

        @Test
        @TestMetadata("OverrideGetterOnly.kt")
        public void testOverrideGetterOnly() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/OverrideGetterOnly.kt");
        }

        @Test
        @TestMetadata("SetterHasHigherAccess.kt")
        public void testSetterHasHigherAccess() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterHasHigherAccess.kt");
        }

        @Test
        @TestMetadata("SetterOnly.kt")
        public void testSetterOnly() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SetterOnly.kt");
        }

        @Test
        @TestMetadata("SyntheticJavaPropertyReference.kt")
        public void testSyntheticJavaPropertyReference() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/SyntheticJavaPropertyReference.kt");
        }

        @Test
        @TestMetadata("TypeAnnotation.kt")
        public void testTypeAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/javaProperties/TypeAnnotation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters")
      @TestDataPath("$PROJECT_ROOT")
      public class SamAdapters {
        @Test
        @TestMetadata("InnerClassInGeneric.kt")
        public void testInnerClassInGeneric() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/InnerClassInGeneric.kt");
        }

        @Test
        @TestMetadata("NoNamedArgsAllowed.kt")
        public void testNoNamedArgsAllowed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/NoNamedArgsAllowed.kt");
        }

        @Test
        @TestMetadata("overloadResolution.kt")
        public void testOverloadResolution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolution.kt");
        }

        @Test
        @TestMetadata("overloadResolutionStatic.kt")
        public void testOverloadResolutionStatic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/overloadResolutionStatic.kt");
        }

        @Test
        @TestMetadata("PackageLocal.kt")
        public void testPackageLocal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/PackageLocal.kt");
        }

        @Test
        @TestMetadata("ParameterTypeAnnotation.kt")
        public void testParameterTypeAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ParameterTypeAnnotation.kt");
        }

        @Test
        @TestMetadata("Private.kt")
        public void testPrivate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Private.kt");
        }

        @Test
        @TestMetadata("Protected.kt")
        public void testProtected() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Protected.kt");
        }

        @Test
        @TestMetadata("ReturnTypeAnnotation.kt")
        public void testReturnTypeAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/ReturnTypeAnnotation.kt");
        }

        @Test
        @TestMetadata("Simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/syntheticExtensions/samAdapters/Simple.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns")
    @TestDataPath("$PROJECT_ROOT")
    public class TargetedBuiltIns {
      @Test
      @TestMetadata("concurrentMapRemove.kt")
      public void testConcurrentMapRemove() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/concurrentMapRemove.kt");
      }

      @Test
      @TestMetadata("forEachRemainingNullability.kt")
      public void testForEachRemainingNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/forEachRemainingNullability.kt");
      }

      @Test
      @TestMetadata("getOrDefault.kt")
      public void testGetOrDefault() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/getOrDefault.kt");
      }

      @Test
      @TestMetadata("mutableMapRemove.kt")
      public void testMutableMapRemove() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/mutableMapRemove.kt");
      }

      @Test
      @TestMetadata("optionalGetOrNullOnProjections.kt")
      public void testOptionalGetOrNullOnProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/optionalGetOrNullOnProjections.kt");
      }

      @Test
      @TestMetadata("optionalGetOrNullOnStarProjection.kt")
      public void testOptionalGetOrNullOnStarProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/optionalGetOrNullOnStarProjection.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility")
      @TestDataPath("$PROJECT_ROOT")
      public class BackwardCompatibility {
        @Test
        @TestMetadata("basic.kt")
        public void testBasic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/basic.kt");
        }

        @Test
        @TestMetadata("delegation.kt")
        public void testDelegation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/delegation.kt");
        }

        @Test
        @TestMetadata("derivedInterfacesWithKotlinFun.kt")
        public void testDerivedInterfacesWithKotlinFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/derivedInterfacesWithKotlinFun.kt");
        }

        @Test
        @TestMetadata("finalize.kt")
        public void testFinalize() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/targetedBuiltIns/backwardCompatibility/finalize.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testWithModifiedMockJdk")
    @TestDataPath("$PROJECT_ROOT")
    public class TestWithModifiedMockJdk {
      @Test
      @TestMetadata("newStringMethods.kt")
      public void testNewStringMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testWithModifiedMockJdk/newStringMethods.kt");
      }

      @Test
      @TestMetadata("notConsideredGetter.kt")
      public void testNotConsideredGetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testWithModifiedMockJdk/notConsideredGetter.kt");
      }

      @Test
      @TestMetadata("notConsideredMethod.kt")
      public void testNotConsideredMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testWithModifiedMockJdk/notConsideredMethod.kt");
      }

      @Test
      @TestMetadata("throwableConstructor.kt")
      public void testThrowableConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testWithModifiedMockJdk/throwableConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithExplicitApi")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithExplicitApi {
      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/annotations.kt");
      }

      @Test
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/classes.kt");
      }

      @Test
      @TestMetadata("companionObject.kt")
      public void testCompanionObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/companionObject.kt");
      }

      @Test
      @TestMetadata("constructors.kt")
      public void testConstructors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/constructors.kt");
      }

      @Test
      @TestMetadata("inlineClasses.kt")
      public void testInlineClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/inlineClasses.kt");
      }

      @Test
      @TestMetadata("interfaces.kt")
      public void testInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/interfaces.kt");
      }

      @Test
      @TestMetadata("kt56505.kt")
      public void testKt56505() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/kt56505.kt");
      }

      @Test
      @TestMetadata("localFunctions.kt")
      public void testLocalFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/localFunctions.kt");
      }

      @Test
      @TestMetadata("properties.kt")
      public void testProperties() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/properties.kt");
      }

      @Test
      @TestMetadata("publishedApi.kt")
      public void testPublishedApi() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/publishedApi.kt");
      }

      @Test
      @TestMetadata("toplevel.kt")
      public void testToplevel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitApi/toplevel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithExplicitReturnTypes {
      @Test
      @TestMetadata("classes.kt")
      public void testClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/classes.kt");
      }

      @Test
      @TestMetadata("interfaces.kt")
      public void testInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/interfaces.kt");
      }

      @Test
      @TestMetadata("kt56505.kt")
      public void testKt56505() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/kt56505.kt");
      }

      @Test
      @TestMetadata("publishedApi.kt")
      public void testPublishedApi() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/publishedApi.kt");
      }

      @Test
      @TestMetadata("toplevel.kt")
      public void testToplevel() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithExplicitReturnTypes/toplevel.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava17 {
      @Test
      @TestMetadata("newListMethods.kt")
      public void testNewListMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/newListMethods.kt");
      }

      @Test
      @TestMetadata("nullSourceInJvmModuleChecker.kt")
      public void testNullSourceInJvmModuleChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/nullSourceInJvmModuleChecker.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmRecord {
        @Test
        @TestMetadata("diagnostics.kt")
        public void testDiagnostics() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/diagnostics.kt");
        }

        @Test
        @TestMetadata("explicitSuperConstructorCall.kt")
        public void testExplicitSuperConstructorCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/explicitSuperConstructorCall.kt");
        }

        @Test
        @TestMetadata("irrelevantFields.kt")
        public void testIrrelevantFields() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/irrelevantFields.kt");
        }

        @Test
        @TestMetadata("jvmRecordDescriptorStructure.kt")
        public void testJvmRecordDescriptorStructure() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/jvmRecordDescriptorStructure.kt");
        }

        @Test
        @TestMetadata("simpleRecordsDefaultConstructor.kt")
        public void testSimpleRecordsDefaultConstructor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/simpleRecordsDefaultConstructor.kt");
        }

        @Test
        @TestMetadata("supertypesCheck.kt")
        public void testSupertypesCheck() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/jvmRecord/supertypesCheck.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses")
      @TestDataPath("$PROJECT_ROOT")
      public class SealedClasses {
        @Test
        @TestMetadata("flexibleSealedInSubject.kt")
        public void testFlexibleSealedInSubject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/flexibleSealedInSubject.kt");
        }

        @Test
        @TestMetadata("javaSealedClassExhaustiveness.kt")
        public void testJavaSealedClassExhaustiveness() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/javaSealedClassExhaustiveness.kt");
        }

        @Test
        @TestMetadata("javaSealedInterfaceExhaustiveness.kt")
        public void testJavaSealedInterfaceExhaustiveness() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/javaSealedInterfaceExhaustiveness.kt");
        }

        @Test
        @TestMetadata("kotlinInheritsJavaClass.kt")
        public void testKotlinInheritsJavaClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/kotlinInheritsJavaClass.kt");
        }

        @Test
        @TestMetadata("kotlinInheritsJavaInterface.kt")
        public void testKotlinInheritsJavaInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava17/sealedClasses/kotlinInheritsJavaInterface.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/testsWithJava21")
    @TestDataPath("$PROJECT_ROOT")
    public class TestsWithJava21 {
      @Test
      @TestMetadata("globalExtensionForHiddenInDeclaringMethod.kt")
      public void testGlobalExtensionForHiddenInDeclaringMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/globalExtensionForHiddenInDeclaringMethod.kt");
      }

      @Test
      @TestMetadata("hiddenInDeclaringMethods.kt")
      public void testHiddenInDeclaringMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/hiddenInDeclaringMethods.kt");
      }

      @Test
      @TestMetadata("implementationsForSequencedCollection.kt")
      public void testImplementationsForSequencedCollection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/implementationsForSequencedCollection.kt");
      }

      @Test
      @TestMetadata("memberExtensionForHiddenInDeclaringMethod.kt")
      public void testMemberExtensionForHiddenInDeclaringMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/memberExtensionForHiddenInDeclaringMethod.kt");
      }

      @Test
      @TestMetadata("newLinkedHashMapMethods.kt")
      public void testNewLinkedHashMapMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newLinkedHashMapMethods.kt");
      }

      @Test
      @TestMetadata("newListMethods.kt")
      public void testNewListMethods() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethods.kt");
      }

      @Test
      @TestMetadata("newListMethodsImmutable20.kt")
      public void testNewListMethodsImmutable20() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsImmutable20.kt");
      }

      @Test
      @TestMetadata("newListMethodsImmutable21.kt")
      public void testNewListMethodsImmutable21() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsImmutable21.kt");
      }

      @Test
      @TestMetadata("newListMethodsImmutable22.kt")
      public void testNewListMethodsImmutable22() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsImmutable22.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullability21.kt")
      public void testNewListMethodsNullability21() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullability21.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityLatest.kt")
      public void testNewListMethodsNullabilityLatest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityLatest.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityLinkedList21.kt")
      public void testNewListMethodsNullabilityLinkedList21() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityLinkedList21.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityLinkedListLatest.kt")
      public void testNewListMethodsNullabilityLinkedListLatest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityLinkedListLatest.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverrides21.kt")
      public void testNewListMethodsNullabilityOverrides21() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverrides21.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverridesLatest.kt")
      public void testNewListMethodsNullabilityOverridesLatest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverridesLatest.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverridesLinkedList21.kt")
      public void testNewListMethodsNullabilityOverridesLinkedList21() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverridesLinkedList21.kt");
      }

      @Test
      @TestMetadata("newListMethodsNullabilityOverridesLinkedListLatest.kt")
      public void testNewListMethodsNullabilityOverridesLinkedListLatest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/testsWithJava21/newListMethodsNullabilityOverridesLinkedListLatest.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper")
    @TestDataPath("$PROJECT_ROOT")
    public class ThisAndSuper {
      @Test
      @TestMetadata("implicitInvokeOnSuper.kt")
      public void testImplicitInvokeOnSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/implicitInvokeOnSuper.kt");
      }

      @Test
      @TestMetadata("notAccessibleSuperInTrait.kt")
      public void testNotAccessibleSuperInTrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/notAccessibleSuperInTrait.kt");
      }

      @Test
      @TestMetadata("QualifiedThis.kt")
      public void testQualifiedThis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/QualifiedThis.kt");
      }

      @Test
      @TestMetadata("Super.kt")
      public void testSuper() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/Super.kt");
      }

      @Test
      @TestMetadata("superInExtensionFunction.kt")
      public void testSuperInExtensionFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunction.kt");
      }

      @Test
      @TestMetadata("superInExtensionFunctionCall.kt")
      public void testSuperInExtensionFunctionCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/superInExtensionFunctionCall.kt");
      }

      @Test
      @TestMetadata("superInToplevelFunction.kt")
      public void testSuperInToplevelFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/superInToplevelFunction.kt");
      }

      @Test
      @TestMetadata("superIsNotAnExpression.kt")
      public void testSuperIsNotAnExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/superIsNotAnExpression.kt");
      }

      @Test
      @TestMetadata("thisInFunctionLiterals.kt")
      public void testThisInFunctionLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/thisInFunctionLiterals.kt");
      }

      @Test
      @TestMetadata("thisInInnerClasses.kt")
      public void testThisInInnerClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/thisInInnerClasses.kt");
      }

      @Test
      @TestMetadata("thisInPropertyInitializer.kt")
      public void testThisInPropertyInitializer() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/thisInPropertyInitializer.kt");
      }

      @Test
      @TestMetadata("thisInToplevelFunction.kt")
      public void testThisInToplevelFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/thisInToplevelFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper")
      @TestDataPath("$PROJECT_ROOT")
      public class UnqualifiedSuper {
        @Test
        @TestMetadata("ambiguousSuperWithGenerics.kt")
        public void testAmbiguousSuperWithGenerics() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/ambiguousSuperWithGenerics.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuper.kt")
        public void testUnqualifiedSuper() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuper.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithAbstractMembers.kt")
        public void testUnqualifiedSuperWithAbstractMembers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithAbstractMembers.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithCallableProperty.kt")
        public void testUnqualifiedSuperWithCallableProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithCallableProperty.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithInnerClass.kt")
        public void testUnqualifiedSuperWithInnerClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInnerClass.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithInterfaces.kt")
        public void testUnqualifiedSuperWithInterfaces() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithInterfaces.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithLocalClass.kt")
        public void testUnqualifiedSuperWithLocalClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithLocalClass.kt");
        }

        @Test
        @TestMetadata("unqualifiedSuperWithUnresolvedBase.kt")
        public void testUnqualifiedSuperWithUnresolvedBase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/unqualifiedSuperWithUnresolvedBase.kt");
        }

        @Test
        @TestMetadata("withMethodOverriddenInAnotherSupertype.kt")
        public void testWithMethodOverriddenInAnotherSupertype() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/thisAndSuper/unqualifiedSuper/withMethodOverriddenInAnotherSupertype.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/traitWithRequired")
    @TestDataPath("$PROJECT_ROOT")
    public class TraitWithRequired {
      @Test
      @TestMetadata("traitRequiresAny.kt")
      public void testTraitRequiresAny() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/traitWithRequired/traitRequiresAny.kt");
      }

      @Test
      @TestMetadata("traitSupertypeList.kt")
      public void testTraitSupertypeList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/traitWithRequired/traitSupertypeList.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @Test
      @TestMetadata("cannotHaveManyClassUpperBounds.kt")
      public void testCannotHaveManyClassUpperBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/cannotHaveManyClassUpperBounds.kt");
      }

      @Test
      @TestMetadata("companionPropertyAndTypeParameter.kt")
      public void testCompanionPropertyAndTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/companionPropertyAndTypeParameter.kt");
      }

      @Test
      @TestMetadata("deprecatedSyntax.kt")
      public void testDeprecatedSyntax() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/deprecatedSyntax.kt");
      }

      @Test
      @TestMetadata("destructuringDeclarations.kt")
      public void testDestructuringDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/destructuringDeclarations.kt");
      }

      @Test
      @TestMetadata("extFunctionTypeAsUpperBound.kt")
      public void testExtFunctionTypeAsUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/extFunctionTypeAsUpperBound.kt");
      }

      @Test
      @TestMetadata("functionTypeAsUpperBound.kt")
      public void testFunctionTypeAsUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/functionTypeAsUpperBound.kt");
      }

      @Test
      @TestMetadata("implicitNothingAgainstNotNothingExpectedType.kt")
      public void testImplicitNothingAgainstNotNothingExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/implicitNothingAgainstNotNothingExpectedType.kt");
      }

      @Test
      @TestMetadata("implicitNothingInReturnPosition.kt")
      public void testImplicitNothingInReturnPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/implicitNothingInReturnPosition.kt");
      }

      @Test
      @TestMetadata("inProjectedDnnParameter.kt")
      public void testInProjectedDnnParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/inProjectedDnnParameter.kt");
      }

      @Test
      @TestMetadata("kt42042Error.kt")
      public void testKt42042Error() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/kt42042Error.kt");
      }

      @Test
      @TestMetadata("kt42396.kt")
      public void testKt42396() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/kt42396.kt");
      }

      @Test
      @TestMetadata("kt46186.kt")
      public void testKt46186() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/kt46186.kt");
      }

      @Test
      @TestMetadata("memberTypeParameterVsNestedClass.kt")
      public void testMemberTypeParameterVsNestedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClass.kt");
      }

      @Test
      @TestMetadata("memberTypeParameterVsNestedClass2.kt")
      public void testMemberTypeParameterVsNestedClass2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClass2.kt");
      }

      @Test
      @TestMetadata("memberTypeParameterVsNestedClassReference.kt")
      public void testMemberTypeParameterVsNestedClassReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/memberTypeParameterVsNestedClassReference.kt");
      }

      @Test
      @TestMetadata("misplacedConstraints.kt")
      public void testMisplacedConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/misplacedConstraints.kt");
      }

      @Test
      @TestMetadata("propertyTypeParameters.kt")
      public void testPropertyTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/propertyTypeParameters.kt");
      }

      @Test
      @TestMetadata("propertyTypeParametersWithUpperBounds.kt")
      public void testPropertyTypeParametersWithUpperBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/propertyTypeParametersWithUpperBounds.kt");
      }

      @Test
      @TestMetadata("repeatedBound.kt")
      public void testRepeatedBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/repeatedBound.kt");
      }

      @Test
      @TestMetadata("typeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter.kt")
      public void testTypeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/typeMismatchErrorHasExpectedGenericTypeArgumentInsteadOfTypeParameter.kt");
      }

      @Test
      @TestMetadata("typeParameterChainInReceiver.kt")
      public void testTypeParameterChainInReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/typeParameterChainInReceiver.kt");
      }

      @Test
      @TestMetadata("typeParameterChainInReturnType.kt")
      public void testTypeParameterChainInReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/typeParameterChainInReturnType.kt");
      }

      @Test
      @TestMetadata("upperBoundCannotBeArray.kt")
      public void testUpperBoundCannotBeArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typeParameters/upperBoundCannotBeArray.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @Test
      @TestMetadata("abbreviatedSupertypes.kt")
      public void testAbbreviatedSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/abbreviatedSupertypes.kt");
      }

      @Test
      @TestMetadata("abbreviatedSupertypesErrors.kt")
      public void testAbbreviatedSupertypesErrors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/abbreviatedSupertypesErrors.kt");
      }

      @Test
      @TestMetadata("aliasToNotKnownAnnotation.kt")
      public void testAliasToNotKnownAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/aliasToNotKnownAnnotation.kt");
      }

      @Test
      @TestMetadata("aliasToNotKnownJavaAnnotation.kt")
      public void testAliasToNotKnownJavaAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/aliasToNotKnownJavaAnnotation.kt");
      }

      @Test
      @TestMetadata("aliasesOnly.kt")
      public void testAliasesOnly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/aliasesOnly.kt");
      }

      @Test
      @TestMetadata("annotationsOnTypeAliases.kt")
      public void testAnnotationsOnTypeAliases() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/annotationsOnTypeAliases.kt");
      }

      @Test
      @TestMetadata("boundViolationInTypeAliasConstructor.kt")
      public void testBoundViolationInTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/boundViolationInTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("boundsViolationInDeepTypeAliasExpansion.kt")
      public void testBoundsViolationInDeepTypeAliasExpansion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/boundsViolationInDeepTypeAliasExpansion.kt");
      }

      @Test
      @TestMetadata("boundsViolationInTypeAliasExpansion.kt")
      public void testBoundsViolationInTypeAliasExpansion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasExpansion.kt");
      }

      @Test
      @TestMetadata("boundsViolationInTypeAliasRHS.kt")
      public void testBoundsViolationInTypeAliasRHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/boundsViolationInTypeAliasRHS.kt");
      }

      @Test
      @TestMetadata("boundsViolationRecursive.kt")
      public void testBoundsViolationRecursive() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/boundsViolationRecursive.kt");
      }

      @Test
      @TestMetadata("capturingTypeParametersFromOuterClass.kt")
      public void testCapturingTypeParametersFromOuterClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/capturingTypeParametersFromOuterClass.kt");
      }

      @Test
      @TestMetadata("conflictingProjections.kt")
      public void testConflictingProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/conflictingProjections.kt");
      }

      @Test
      @TestMetadata("constructorCallThroughPrivateAlias.kt")
      public void testConstructorCallThroughPrivateAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/constructorCallThroughPrivateAlias.kt");
      }

      @Test
      @TestMetadata("cyclicInheritanceViaTypeAlias.kt")
      public void testCyclicInheritanceViaTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/cyclicInheritanceViaTypeAlias.kt");
      }

      @Test
      @TestMetadata("exposedExpandedType.kt")
      public void testExposedExpandedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/exposedExpandedType.kt");
      }

      @Test
      @TestMetadata("functionalTypeWithParameterNameVisibility.kt")
      public void testFunctionalTypeWithParameterNameVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/functionalTypeWithParameterNameVisibility.kt");
      }

      @Test
      @TestMetadata("illegalTypeInTypeAliasExpansion.kt")
      public void testIllegalTypeInTypeAliasExpansion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/illegalTypeInTypeAliasExpansion.kt");
      }

      @Test
      @TestMetadata("illegalTypeInTypeAliasExpansionDisabled.kt")
      public void testIllegalTypeInTypeAliasExpansionDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/illegalTypeInTypeAliasExpansionDisabled.kt");
      }

      @Test
      @TestMetadata("import.kt")
      public void testImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/import.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasExtendedInvokableObject.kt")
      public void testImportFromTypeAliasExtendedInvokableObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasExtendedInvokableObject.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasFunctionReference.kt")
      public void testImportFromTypeAliasFunctionReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasFunctionReference.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasInvokableObject.kt")
      public void testImportFromTypeAliasInvokableObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasInvokableObject.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasNestedObjectFunMember.kt")
      public void testImportFromTypeAliasNestedObjectFunMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasNestedObjectFunMember.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasObject.kt")
      public void testImportFromTypeAliasObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasObject.kt");
      }

      @Test
      @TestMetadata("importFromTypeAliasObjectProperties.kt")
      public void testImportFromTypeAliasObjectProperties() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importFromTypeAliasObjectProperties.kt");
      }

      @Test
      @TestMetadata("importMemberFromJavaViaAlias.kt")
      public void testImportMemberFromJavaViaAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importMemberFromJavaViaAlias.kt");
      }

      @Test
      @TestMetadata("importNestedTypeFromTypeAlias.kt")
      public void testImportNestedTypeFromTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/importNestedTypeFromTypeAlias.kt");
      }

      @Test
      @TestMetadata("inSupertypesList.kt")
      public void testInSupertypesList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/inSupertypesList.kt");
      }

      @Test
      @TestMetadata("inheritedNestedTypeAlias.kt")
      public void testInheritedNestedTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/inheritedNestedTypeAlias.kt");
      }

      @Test
      @TestMetadata("inhreritedTypeAliasQualifiedByDerivedClass.kt")
      public void testInhreritedTypeAliasQualifiedByDerivedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/inhreritedTypeAliasQualifiedByDerivedClass.kt");
      }

      @Test
      @TestMetadata("innerClassTypeAliasConstructor.kt")
      public void testInnerClassTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("innerClassTypeAliasConstructorInSupertypes.kt")
      public void testInnerClassTypeAliasConstructorInSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/innerClassTypeAliasConstructorInSupertypes.kt");
      }

      @Test
      @TestMetadata("innerTypeAliasAsType.kt")
      public void testInnerTypeAliasAsType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType.kt");
      }

      @Test
      @TestMetadata("innerTypeAliasAsType2.kt")
      public void testInnerTypeAliasAsType2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/innerTypeAliasAsType2.kt");
      }

      @Test
      @TestMetadata("innerTypeAliasConstructor.kt")
      public void testInnerTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/innerTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("javaStaticMembersViaTypeAlias.kt")
      public void testJavaStaticMembersViaTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/javaStaticMembersViaTypeAlias.kt");
      }

      @Test
      @TestMetadata("kt14498.kt")
      public void testKt14498() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt14498.kt");
      }

      @Test
      @TestMetadata("kt14498a.kt")
      public void testKt14498a() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt14498a.kt");
      }

      @Test
      @TestMetadata("kt14518.kt")
      public void testKt14518() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt14518.kt");
      }

      @Test
      @TestMetadata("kt14612.kt")
      public void testKt14612() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt14612.kt");
      }

      @Test
      @TestMetadata("kt14641.kt")
      public void testKt14641() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt14641.kt");
      }

      @Test
      @TestMetadata("kt15734.kt")
      public void testKt15734() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt15734.kt");
      }

      @Test
      @TestMetadata("kt19601.kt")
      public void testKt19601() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/kt19601.kt");
      }

      @Test
      @TestMetadata("localTypeAlias.kt")
      public void testLocalTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/localTypeAlias.kt");
      }

      @Test
      @TestMetadata("localTypeAliasConstructor.kt")
      public void testLocalTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/localTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("localTypeAliasModifiers.kt")
      public void testLocalTypeAliasModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/localTypeAliasModifiers.kt");
      }

      @Test
      @TestMetadata("localTypeAliasRecursive.kt")
      public void testLocalTypeAliasRecursive() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/localTypeAliasRecursive.kt");
      }

      @Test
      @TestMetadata("nested.kt")
      public void testNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/nested.kt");
      }

      @Test
      @TestMetadata("nestedCapturingTypeParameters.kt")
      public void testNestedCapturingTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/nestedCapturingTypeParameters.kt");
      }

      @Test
      @TestMetadata("nestedSubstituted.kt")
      public void testNestedSubstituted() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/nestedSubstituted.kt");
      }

      @Test
      @TestMetadata("noApproximationInTypeAliasArgumentSubstitution.kt")
      public void testNoApproximationInTypeAliasArgumentSubstitution() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/noApproximationInTypeAliasArgumentSubstitution.kt");
      }

      @Test
      @TestMetadata("noRHS.kt")
      public void testNoRHS() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/noRHS.kt");
      }

      @Test
      @TestMetadata("parameterRestrictions.kt")
      public void testParameterRestrictions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/parameterRestrictions.kt");
      }

      @Test
      @TestMetadata("privateInFile.kt")
      public void testPrivateInFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/privateInFile.kt");
      }

      @Test
      @TestMetadata("privateInFileInDifferentModule.kt")
      public void testPrivateInFileInDifferentModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/privateInFileInDifferentModule.kt");
      }

      @Test
      @TestMetadata("projectionsInTypeAliasConstructor.kt")
      public void testProjectionsInTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/projectionsInTypeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("recursive.kt")
      public void testRecursive() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/recursive.kt");
      }

      @Test
      @TestMetadata("returnTypeNothingShouldBeSpecifiedExplicitly.kt")
      public void testReturnTypeNothingShouldBeSpecifiedExplicitly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/returnTypeNothingShouldBeSpecifiedExplicitly.kt");
      }

      @Test
      @TestMetadata("starImportOnTypeAlias.kt")
      public void testStarImportOnTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/starImportOnTypeAlias.kt");
      }

      @Test
      @TestMetadata("starProjection.kt")
      public void testStarProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/starProjection.kt");
      }

      @Test
      @TestMetadata("substitutionVariance.kt")
      public void testSubstitutionVariance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/substitutionVariance.kt");
      }

      @Test
      @TestMetadata("throwJLException.kt")
      public void testThrowJLException() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/throwJLException.kt");
      }

      @Test
      @TestMetadata("topLevelTypeAliasesOnly.kt")
      public void testTopLevelTypeAliasesOnly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/topLevelTypeAliasesOnly.kt");
      }

      @Test
      @TestMetadata("typeAliasArgumentsInCompanionObject.kt")
      public void testTypeAliasArgumentsInCompanionObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasArgumentsInCompanionObject.kt");
      }

      @Test
      @TestMetadata("typeAliasAsBareType.kt")
      public void testTypeAliasAsBareType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasAsBareType.kt");
      }

      @Test
      @TestMetadata("typeAliasAsQualifier.kt")
      public void testTypeAliasAsQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasAsQualifier.kt");
      }

      @Test
      @TestMetadata("typeAliasAsSuperQualifier.kt")
      public void testTypeAliasAsSuperQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasAsSuperQualifier.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructor.kt")
      public void testTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructor.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorCrazyProjections.kt")
      public void testTypeAliasConstructorCrazyProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorCrazyProjections.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorForInterface.kt")
      public void testTypeAliasConstructorForInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForInterface.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorForProjection.kt")
      public void testTypeAliasConstructorForProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjection.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorForProjectionInSupertypes.kt")
      public void testTypeAliasConstructorForProjectionInSupertypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorForProjectionInSupertypes.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorInferenceInSupertypesList.kt")
      public void testTypeAliasConstructorInferenceInSupertypesList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorInferenceInSupertypesList.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorTypeArgumentsInference.kt")
      public void testTypeAliasConstructorTypeArgumentsInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInference.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt")
      public void testTypeAliasConstructorTypeArgumentsInferenceWithNestedCalls() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorTypeArgumentsInferenceWithNestedCalls.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorVsFunction.kt")
      public void testTypeAliasConstructorVsFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorVsFunction.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorWrongClass.kt")
      public void testTypeAliasConstructorWrongClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongClass.kt");
      }

      @Test
      @TestMetadata("typeAliasConstructorWrongVisibility.kt")
      public void testTypeAliasConstructorWrongVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasConstructorWrongVisibility.kt");
      }

      @Test
      @TestMetadata("typeAliasExpansionRepeatedAnnotations.kt")
      public void testTypeAliasExpansionRepeatedAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasExpansionRepeatedAnnotations.kt");
      }

      @Test
      @TestMetadata("typeAliasForProjectionInSuperInterfaces.kt")
      public void testTypeAliasForProjectionInSuperInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasForProjectionInSuperInterfaces.kt");
      }

      @Test
      @TestMetadata("typeAliasInvisibleObject.kt")
      public void testTypeAliasInvisibleObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasInvisibleObject.kt");
      }

      @Test
      @TestMetadata("typeAliasObjectWithInvoke.kt")
      public void testTypeAliasObjectWithInvoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasObjectWithInvoke.kt");
      }

      @Test
      @TestMetadata("typeAliasShouldExpandToClass.kt")
      public void testTypeAliasShouldExpandToClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasShouldExpandToClass.kt");
      }

      @Test
      @TestMetadata("typeAliasesInImportDirectives.kt")
      public void testTypeAliasesInImportDirectives() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasesInImportDirectives.kt");
      }

      @Test
      @TestMetadata("typeAliasesInQualifiers.kt")
      public void testTypeAliasesInQualifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typeAliasesInQualifiers.kt");
      }

      @Test
      @TestMetadata("typealiasRhsRepeatedAnnotationInArguments.kt")
      public void testTypealiasRhsRepeatedAnnotationInArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotationInArguments.kt");
      }

      @Test
      @TestMetadata("typealiasRhsRepeatedAnnotations.kt")
      public void testTypealiasRhsRepeatedAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/typealiasRhsRepeatedAnnotations.kt");
      }

      @Test
      @TestMetadata("wrongNumberOfArgumentsInTypeAliasConstructor.kt")
      public void testWrongNumberOfArgumentsInTypeAliasConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/typealias/wrongNumberOfArgumentsInTypeAliasConstructor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/underscoresInNumericLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class UnderscoresInNumericLiterals {
      @Test
      @TestMetadata("illegalUnderscores.kt")
      public void testIllegalUnderscores() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/underscoresInNumericLiterals/illegalUnderscores.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unit")
    @TestDataPath("$PROJECT_ROOT")
    public class Unit {
      @Test
      @TestMetadata("nullableUnit.kt")
      public void testNullableUnit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unit/nullableUnit.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unitConversion")
    @TestDataPath("$PROJECT_ROOT")
    public class UnitConversion {
      @Test
      @TestMetadata("chainedFunSuspendUnitConversion.kt")
      public void testChainedFunSuspendUnitConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/chainedFunSuspendUnitConversion.kt");
      }

      @Test
      @TestMetadata("chainedFunUnitConversion.kt")
      public void testChainedFunUnitConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/chainedFunUnitConversion.kt");
      }

      @Test
      @TestMetadata("chainedUnitSuspendConversion.kt")
      public void testChainedUnitSuspendConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/chainedUnitSuspendConversion.kt");
      }

      @Test
      @TestMetadata("expressionsOnVariablesAndInvokeResolution.kt")
      public void testExpressionsOnVariablesAndInvokeResolution() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/expressionsOnVariablesAndInvokeResolution.kt");
      }

      @Test
      @TestMetadata("kt49394.kt")
      public void testKt49394() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/kt49394.kt");
      }

      @Test
      @TestMetadata("unitConversionCompatibility.kt")
      public void testUnitConversionCompatibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/unitConversionCompatibility.kt");
      }

      @Test
      @TestMetadata("unitConversionDisabledForSimpleArguments.kt")
      public void testUnitConversionDisabledForSimpleArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/unitConversionDisabledForSimpleArguments.kt");
      }

      @Test
      @TestMetadata("unitConversionForAllKinds.kt")
      public void testUnitConversionForAllKinds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/unitConversionForAllKinds.kt");
      }

      @Test
      @TestMetadata("unitConversionForSubtypes.kt")
      public void testUnitConversionForSubtypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unitConversion/unitConversionForSubtypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes")
    @TestDataPath("$PROJECT_ROOT")
    public class UnsignedTypes {
      @Test
      @TestMetadata("allowedVarargsOfUnsignedTypes.kt")
      public void testAllowedVarargsOfUnsignedTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/allowedVarargsOfUnsignedTypes.kt");
      }

      @Test
      @TestMetadata("callDefaultConstructorOfUnsignedType.kt")
      public void testCallDefaultConstructorOfUnsignedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/callDefaultConstructorOfUnsignedType.kt");
      }

      @Test
      @TestMetadata("explicitUnsignedLongTypeCheck.kt")
      public void testExplicitUnsignedLongTypeCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/explicitUnsignedLongTypeCheck.kt");
      }

      @Test
      @TestMetadata("forbiddenEqualsOnUnsignedTypes.kt")
      public void testForbiddenEqualsOnUnsignedTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/forbiddenEqualsOnUnsignedTypes.kt");
      }

      @Test
      @TestMetadata("lateinitUnsignedType.kt")
      public void testLateinitUnsignedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/lateinitUnsignedType.kt");
      }

      @Test
      @TestMetadata("numberReceiverNotValid.kt")
      public void testNumberReceiverNotValid() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/numberReceiverNotValid.kt");
      }

      @Test
      @TestMetadata("overloadsWithUnsigned.kt")
      public void testOverloadsWithUnsigned() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/overloadsWithUnsigned.kt");
      }

      @Test
      @TestMetadata("unsignedLiteralsOverflowSignedBorder.kt")
      public void testUnsignedLiteralsOverflowSignedBorder() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsOverflowSignedBorder.kt");
      }

      @Test
      @TestMetadata("unsignedLiteralsTypeCheck.kt")
      public void testUnsignedLiteralsTypeCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/unsignedLiteralsTypeCheck.kt");
      }

      @Test
      @TestMetadata("varargTypeToArrayTypeCheck.kt")
      public void testVarargTypeToArrayTypeCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/varargTypeToArrayTypeCheck.kt");
      }

      @Test
      @TestMetadata("wrongLongSuffixForULong.kt")
      public void testWrongLongSuffixForULong() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/wrongLongSuffixForULong.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/unsignedTypes/conversions")
      @TestDataPath("$PROJECT_ROOT")
      public class Conversions {
        @Test
        @TestMetadata("conversionOfSignedToUnsigned.kt")
        public void testConversionOfSignedToUnsigned() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/conversionOfSignedToUnsigned.kt");
        }

        @Test
        @TestMetadata("implicitIntegerCoercionOverloading.kt")
        public void testImplicitIntegerCoercionOverloading() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/implicitIntegerCoercionOverloading.kt");
        }

        @Test
        @TestMetadata("inferenceForSignedAndUnsignedTypes.kt")
        public void testInferenceForSignedAndUnsignedTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/inferenceForSignedAndUnsignedTypes.kt");
        }

        @Test
        @TestMetadata("noConversionForUnsignedTypesOnReceiver.kt")
        public void testNoConversionForUnsignedTypesOnReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/noConversionForUnsignedTypesOnReceiver.kt");
        }

        @Test
        @TestMetadata("overloadResolutionForSignedAndUnsignedTypes.kt")
        public void testOverloadResolutionForSignedAndUnsignedTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/overloadResolutionForSignedAndUnsignedTypes.kt");
        }

        @Test
        @TestMetadata("signedToUnsignedConversionWithExpectedType.kt")
        public void testSignedToUnsignedConversionWithExpectedType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/unsignedTypes/conversions/signedToUnsignedConversionWithExpectedType.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/valueClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class ValueClasses {
      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/annotations.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
      }

      @Test
      @TestMetadata("basicValueClassDeclaration.kt")
      public void testBasicValueClassDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/basicValueClassDeclaration.kt");
      }

      @Test
      @TestMetadata("basicValueClassDeclarationDisabled.kt")
      public void testBasicValueClassDeclarationDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/basicValueClassDeclarationDisabled.kt");
      }

      @Test
      @TestMetadata("defaultParameters.kt")
      public void testDefaultParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/defaultParameters.kt", TransformersFunctions.getReplaceOptionalJvmInlineAnnotationWithUniversal());
      }

      @Test
      @TestMetadata("delegatedPropertyInValueClass.kt")
      public void testDelegatedPropertyInValueClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/delegatedPropertyInValueClass.kt");
      }

      @Test
      @TestMetadata("identityComparisonWithValueClasses.kt")
      public void testIdentityComparisonWithValueClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/identityComparisonWithValueClasses.kt");
      }

      @Test
      @TestMetadata("inlineKeywordForMfvc.kt")
      public void testInlineKeywordForMfvc() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/inlineKeywordForMfvc.kt");
      }

      @Test
      @TestMetadata("jvmInlineApplicability.kt")
      public void testJvmInlineApplicability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/jvmInlineApplicability.kt");
      }

      @Test
      @TestMetadata("kt51366.kt")
      public void testKt51366() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/kt51366.kt");
      }

      @Test
      @TestMetadata("kt57527.kt")
      public void testKt57527() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/kt57527.kt");
      }

      @Test
      @TestMetadata("lateinitValueClasses.kt")
      public void testLateinitValueClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/lateinitValueClasses.kt");
      }

      @Test
      @TestMetadata("propertiesWithBackingFieldsInsideValueClass.kt")
      public void testPropertiesWithBackingFieldsInsideValueClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/propertiesWithBackingFieldsInsideValueClass.kt");
      }

      @Test
      @TestMetadata("recursiveMultiFieldValueClasses.kt")
      public void testRecursiveMultiFieldValueClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/recursiveMultiFieldValueClasses.kt");
      }

      @Test
      @TestMetadata("recursiveValueClasses.kt")
      public void testRecursiveValueClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/recursiveValueClasses.kt");
      }

      @Test
      @TestMetadata("reservedMembersAndConstructsInsideMfvc.kt")
      public void testReservedMembersAndConstructsInsideMfvc() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/reservedMembersAndConstructsInsideMfvc.kt");
      }

      @Test
      @TestMetadata("typedEqualsOperatorModifierInMfvc.kt")
      public void testTypedEqualsOperatorModifierInMfvc() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/typedEqualsOperatorModifierInMfvc.kt");
      }

      @Test
      @TestMetadata("unsignedLiteralsWithoutArtifactOnClasspath.kt")
      public void testUnsignedLiteralsWithoutArtifactOnClasspath() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/unsignedLiteralsWithoutArtifactOnClasspath.kt");
      }

      @Test
      @TestMetadata("valueClassCanOnlyImplementInterfaces.kt")
      public void testValueClassCanOnlyImplementInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassCanOnlyImplementInterfaces.kt");
      }

      @Test
      @TestMetadata("valueClassCannotImplementInterfaceByDelegation.kt")
      public void testValueClassCannotImplementInterfaceByDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassCannotImplementInterfaceByDelegation.kt");
      }

      @Test
      @TestMetadata("valueClassDeclarationCheck.kt")
      public void testValueClassDeclarationCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassDeclarationCheck.kt");
      }

      @Test
      @TestMetadata("valueClassWithForbiddenUnderlyingType.kt")
      public void testValueClassWithForbiddenUnderlyingType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassWithForbiddenUnderlyingType.kt");
      }

      @Test
      @TestMetadata("valueClassWithForbiddenUnderlyingTypeMultiField.kt")
      public void testValueClassWithForbiddenUnderlyingTypeMultiField() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassWithForbiddenUnderlyingTypeMultiField.kt");
      }

      @Test
      @TestMetadata("valueClassWithGenericUnderlyingTypeNoFeature.kt")
      public void testValueClassWithGenericUnderlyingTypeNoFeature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassWithGenericUnderlyingTypeNoFeature.kt");
      }

      @Test
      @TestMetadata("valueClassesInsideAnnotations.kt")
      public void testValueClassesInsideAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/valueClassesInsideAnnotations.kt");
      }

      @Test
      @TestMetadata("varargsOnParametersOfValueClassType.kt")
      public void testVarargsOnParametersOfValueClassType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/valueClasses/varargsOnParametersOfValueClassType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @Test
      @TestMetadata("AmbiguousVararg.kt")
      public void testAmbiguousVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/AmbiguousVararg.kt");
      }

      @Test
      @TestMetadata("assignArrayToVararagInNamedForm_1_4.kt")
      public void testAssignArrayToVararagInNamedForm_1_4() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assignArrayToVararagInNamedForm_1_4.kt");
      }

      @Test
      @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotation.kt")
      public void testAssignNonConstSingleArrayElementAsVarargInAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotation.kt");
      }

      @Test
      @TestMetadata("assignNonConstSingleArrayElementAsVarargInAnnotationError.kt")
      public void testAssignNonConstSingleArrayElementAsVarargInAnnotationError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assignNonConstSingleArrayElementAsVarargInAnnotationError.kt");
      }

      @Test
      @TestMetadata("assigningArraysToVarargsInAnnotations.kt")
      public void testAssigningArraysToVarargsInAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assigningArraysToVarargsInAnnotations.kt");
      }

      @Test
      @TestMetadata("assigningSingleElementsInNamedFormAnnDeprecation_after.kt")
      public void testAssigningSingleElementsInNamedFormAnnDeprecation_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormAnnDeprecation_after.kt");
      }

      @Test
      @TestMetadata("assigningSingleElementsInNamedFormAnnDeprecation_before.kt")
      public void testAssigningSingleElementsInNamedFormAnnDeprecation_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormAnnDeprecation_before.kt");
      }

      @Test
      @TestMetadata("assigningSingleElementsInNamedFormFunDeprecation_after.kt")
      public void testAssigningSingleElementsInNamedFormFunDeprecation_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/assigningSingleElementsInNamedFormFunDeprecation_after.kt");
      }

      @Test
      @TestMetadata("inferredNullableArrayAsVararg.kt")
      public void testInferredNullableArrayAsVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/inferredNullableArrayAsVararg.kt");
      }

      @Test
      @TestMetadata("kt48162.kt")
      public void testKt48162() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/kt48162.kt");
      }

      @Test
      @TestMetadata("MostSepcificVarargsWithJava.kt")
      public void testMostSepcificVarargsWithJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/MostSepcificVarargsWithJava.kt");
      }

      @Test
      @TestMetadata("NullableTypeForVarargArgument.kt")
      public void testNullableTypeForVarargArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/NullableTypeForVarargArgument.kt");
      }

      @Test
      @TestMetadata("prohibitAssigningSingleElementsInNamedForm.kt")
      public void testProhibitAssigningSingleElementsInNamedForm() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/prohibitAssigningSingleElementsInNamedForm.kt");
      }

      @Test
      @TestMetadata("unresolvedVarargType.kt")
      public void testUnresolvedVarargType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/unresolvedVarargType.kt");
      }

      @Test
      @TestMetadata("varargInSetter.kt")
      public void testVarargInSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/varargInSetter.kt");
      }

      @Test
      @TestMetadata("varargOfNothing.kt")
      public void testVarargOfNothing() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/varargOfNothing.kt");
      }

      @Test
      @TestMetadata("varargViewedAsArray.kt")
      public void testVarargViewedAsArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/varargViewedAsArray.kt");
      }

      @Test
      @TestMetadata("varargsAndOut1.kt")
      public void testVarargsAndOut1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/varargsAndOut1.kt");
      }

      @Test
      @TestMetadata("varargsAndPair.kt")
      public void testVarargsAndPair() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/varargs/varargsAndPair.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/variance")
    @TestDataPath("$PROJECT_ROOT")
    public class Variance {
      @Test
      @TestMetadata("Class.kt")
      public void testClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/Class.kt");
      }

      @Test
      @TestMetadata("ea1337846.kt")
      public void testEa1337846() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/ea1337846.kt");
      }

      @Test
      @TestMetadata("Function.kt")
      public void testFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/Function.kt");
      }

      @Test
      @TestMetadata("FunctionTypes.kt")
      public void testFunctionTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/FunctionTypes.kt");
      }

      @Test
      @TestMetadata("InPosition.kt")
      public void testInPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/InPosition.kt");
      }

      @Test
      @TestMetadata("InvariantPosition.kt")
      public void testInvariantPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/InvariantPosition.kt");
      }

      @Test
      @TestMetadata("NullableTypes.kt")
      public void testNullableTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/NullableTypes.kt");
      }

      @Test
      @TestMetadata("OutPosition.kt")
      public void testOutPosition() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/OutPosition.kt");
      }

      @Test
      @TestMetadata("PrimaryConstructor.kt")
      public void testPrimaryConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/PrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("ValProperty.kt")
      public void testValProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/ValProperty.kt");
      }

      @Test
      @TestMetadata("VarProperty.kt")
      public void testVarProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/VarProperty.kt");
      }

      @Test
      @TestMetadata("Visibility.kt")
      public void testVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/Visibility.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/variance/privateToThis")
      @TestDataPath("$PROJECT_ROOT")
      public class PrivateToThis {
        @Test
        @TestMetadata("FunctionCall.kt")
        public void testFunctionCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/privateToThis/FunctionCall.kt");
        }

        @Test
        @TestMetadata("GetVal.kt")
        public void testGetVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/privateToThis/GetVal.kt");
        }

        @Test
        @TestMetadata("SetVar.kt")
        public void testSetVar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/variance/privateToThis/SetVar.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/visibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Visibility {
      @Test
      @TestMetadata("abstractInvisibleMemberFromJava.kt")
      public void testAbstractInvisibleMemberFromJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/abstractInvisibleMemberFromJava.kt");
      }

      @Test
      @TestMetadata("abstractInvisibleMemberFromKotlin.kt")
      public void testAbstractInvisibleMemberFromKotlin() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/abstractInvisibleMemberFromKotlin.kt");
      }

      @Test
      @TestMetadata("checkCastToInaccessibleInterface.kt")
      public void testCheckCastToInaccessibleInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/checkCastToInaccessibleInterface.kt");
      }

      @Test
      @TestMetadata("innerNestedAndAnonymousClasses.kt")
      public void testInnerNestedAndAnonymousClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/innerNestedAndAnonymousClasses.kt");
      }

      @Test
      @TestMetadata("invisiblePrivateThroughSubClass.kt")
      public void testInvisiblePrivateThroughSubClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClass.kt");
      }

      @Test
      @TestMetadata("invisiblePrivateThroughSubClassDoubleSmartCast.kt")
      public void testInvisiblePrivateThroughSubClassDoubleSmartCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/invisiblePrivateThroughSubClassDoubleSmartCast.kt");
      }

      @Test
      @TestMetadata("invisibleSetterOfJavaClass.kt")
      public void testInvisibleSetterOfJavaClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/invisibleSetterOfJavaClass.kt");
      }

      @Test
      @TestMetadata("javaInterfaceFieldDirectAccess.kt")
      public void testJavaInterfaceFieldDirectAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/javaInterfaceFieldDirectAccess.kt");
      }

      @Test
      @TestMetadata("lackOfInvisibleSetterOfJavaClassInSamePackage.kt")
      public void testLackOfInvisibleSetterOfJavaClassInSamePackage() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/lackOfInvisibleSetterOfJavaClassInSamePackage.kt");
      }

      @Test
      @TestMetadata("moreSpecificProtected.kt")
      public void testMoreSpecificProtected() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/moreSpecificProtected.kt");
      }

      @Test
      @TestMetadata("moreSpecificProtectedSimple.kt")
      public void testMoreSpecificProtectedSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/moreSpecificProtectedSimple.kt");
      }

      @Test
      @TestMetadata("packagePrivateStaticInterfaceFieldViaKotlinClass.kt")
      public void testPackagePrivateStaticInterfaceFieldViaKotlinClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/packagePrivateStaticInterfaceFieldViaKotlinClass.kt");
      }

      @Test
      @TestMetadata("packagePrivateStaticInterfaceMethod.kt")
      public void testPackagePrivateStaticInterfaceMethod() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/packagePrivateStaticInterfaceMethod.kt");
      }

      @Test
      @TestMetadata("packagePrivateStaticViaInternal.kt")
      public void testPackagePrivateStaticViaInternal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/packagePrivateStaticViaInternal.kt");
      }

      @Test
      @TestMetadata("privateCompanionInSuperClass.kt")
      public void testPrivateCompanionInSuperClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateCompanionInSuperClass.kt");
      }

      @Test
      @TestMetadata("privateDeclarationInAnotherFile.kt")
      public void testPrivateDeclarationInAnotherFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateDeclarationInAnotherFile.kt");
      }

      @Test
      @TestMetadata("privateSealedNested.kt")
      public void testPrivateSealedNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateSealedNested.kt");
      }

      @Test
      @TestMetadata("privateToThis.kt")
      public void testPrivateToThis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateToThis.kt");
      }

      @Test
      @TestMetadata("privateToThisExotic.kt")
      public void testPrivateToThisExotic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateToThisExotic.kt");
      }

      @Test
      @TestMetadata("privateTypeInProjection.kt")
      public void testPrivateTypeInProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/privateTypeInProjection.kt");
      }

      @Test
      @TestMetadata("protectedVisibilityAndSmartcast_overrideChangesType.kt")
      public void testProtectedVisibilityAndSmartcast_overrideChangesType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/protectedVisibilityAndSmartcast_overrideChangesType.kt");
      }

      @Test
      @TestMetadata("visibleDeclarationThroughInvisibleTypeAlias.kt")
      public void testVisibleDeclarationThroughInvisibleTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/visibility/visibleDeclarationThroughInvisibleTypeAlias.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges")
    @TestDataPath("$PROJECT_ROOT")
    public class WarningsForBreakingChanges {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes")
      @TestDataPath("$PROJECT_ROOT")
      public class CapturedTypes {
        @Test
        @TestMetadata("incorrectCapturedApproximationForValueParameters.kt")
        public void testIncorrectCapturedApproximationForValueParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/warningsForBreakingChanges/capturedTypes/incorrectCapturedApproximationForValueParameters.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @Test
      @TestMetadata("AnnotatedWhenStatement.kt")
      public void testAnnotatedWhenStatement() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/AnnotatedWhenStatement.kt");
      }

      @Test
      @TestMetadata("BranchBypassVal.kt")
      public void testBranchBypassVal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/BranchBypassVal.kt");
      }

      @Test
      @TestMetadata("BranchBypassVar.kt")
      public void testBranchBypassVar() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/BranchBypassVar.kt");
      }

      @Test
      @TestMetadata("CommaInWhenConditionWithoutArgument.kt")
      public void testCommaInWhenConditionWithoutArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/CommaInWhenConditionWithoutArgument.kt");
      }

      @Test
      @TestMetadata("deprecatedSyntaxInConditionsNoSubject.kt")
      public void testDeprecatedSyntaxInConditionsNoSubject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditionsNoSubject.kt");
      }

      @Test
      @TestMetadata("deprecatedSyntaxInConditions_after.kt")
      public void testDeprecatedSyntaxInConditions_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditions_after.kt");
      }

      @Test
      @TestMetadata("deprecatedSyntaxInConditions_before.kt")
      public void testDeprecatedSyntaxInConditions_before() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/deprecatedSyntaxInConditions_before.kt");
      }

      @Test
      @TestMetadata("DuplicatedLabels.kt")
      public void testDuplicatedLabels() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/DuplicatedLabels.kt");
      }

      @Test
      @TestMetadata("ElseOnNullableEnum.kt")
      public void testElseOnNullableEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ElseOnNullableEnum.kt");
      }

      @Test
      @TestMetadata("EmptyConditionWithExpression.kt")
      public void testEmptyConditionWithExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/EmptyConditionWithExpression.kt");
      }

      @Test
      @TestMetadata("EmptyConditionWithExpressionEnum.kt")
      public void testEmptyConditionWithExpressionEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/EmptyConditionWithExpressionEnum.kt");
      }

      @Test
      @TestMetadata("ExhaustiveBooleanComplex.kt")
      public void testExhaustiveBooleanComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveBooleanComplex.kt");
      }

      @Test
      @TestMetadata("exhaustiveBooleanWhenWithUntrivialConst_error.kt")
      public void testExhaustiveBooleanWhenWithUntrivialConst_error() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/exhaustiveBooleanWhenWithUntrivialConst_error.kt");
      }

      @Test
      @TestMetadata("exhaustiveBooleanWhenWithUntrivialConst_warning.kt")
      public void testExhaustiveBooleanWhenWithUntrivialConst_warning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/exhaustiveBooleanWhenWithUntrivialConst_warning.kt");
      }

      @Test
      @TestMetadata("ExhaustiveDynamicType.kt")
      public void testExhaustiveDynamicType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveDynamicType.kt");
      }

      @Test
      @TestMetadata("ExhaustiveEnumIs.kt")
      public void testExhaustiveEnumIs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveEnumIs.kt");
      }

      @Test
      @TestMetadata("ExhaustiveEnumMixed.kt")
      public void testExhaustiveEnumMixed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveEnumMixed.kt");
      }

      @Test
      @TestMetadata("ExhaustiveOnTypeParameterWithSealedUpperBound.kt")
      public void testExhaustiveOnTypeParameterWithSealedUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveOnTypeParameterWithSealedUpperBound.kt");
      }

      @Test
      @TestMetadata("ExhaustivePlatformAnnotated.kt")
      public void testExhaustivePlatformAnnotated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustivePlatformAnnotated.kt");
      }

      @Test
      @TestMetadata("ExhaustiveSealedInterface.kt")
      public void testExhaustiveSealedInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveSealedInterface.kt");
      }

      @Test
      @TestMetadata("ExhaustiveSealedIntersection.kt")
      public void testExhaustiveSealedIntersection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveSealedIntersection.kt");
      }

      @Test
      @TestMetadata("ExhaustiveSelftype.kt")
      public void testExhaustiveSelftype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveSelftype.kt");
      }

      @Test
      @TestMetadata("ExhaustiveValOverConditionalInit.kt")
      public void testExhaustiveValOverConditionalInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveValOverConditionalInit.kt");
      }

      @Test
      @TestMetadata("ExhaustiveVarOverConditionalInit.kt")
      public void testExhaustiveVarOverConditionalInit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ExhaustiveVarOverConditionalInit.kt");
      }

      @Test
      @TestMetadata("exhaustiveWhenWithConstVal.kt")
      public void testExhaustiveWhenWithConstVal() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/exhaustiveWhenWithConstVal.kt");
      }

      @Test
      @TestMetadata("flexibleEnumInSubject.kt")
      public void testFlexibleEnumInSubject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/flexibleEnumInSubject.kt");
      }

      @Test
      @TestMetadata("intersectionExhaustivenessComplex.kt")
      public void testIntersectionExhaustivenessComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/intersectionExhaustivenessComplex.kt");
      }

      @Test
      @TestMetadata("intersectionExhaustivenessSimple.kt")
      public void testIntersectionExhaustivenessSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/intersectionExhaustivenessSimple.kt");
      }

      @Test
      @TestMetadata("kt10439.kt")
      public void testKt10439() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt10439.kt");
      }

      @Test
      @TestMetadata("kt4434.kt")
      public void testKt4434() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt4434.kt");
      }

      @Test
      @TestMetadata("kt47922.kt")
      public void testKt47922() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt47922.kt");
      }

      @Test
      @TestMetadata("kt48653_after.kt")
      public void testKt48653_after() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt48653_after.kt");
      }

      @Test
      @TestMetadata("kt49702.kt")
      public void testKt49702() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt49702.kt");
      }

      @Test
      @TestMetadata("kt9929.kt")
      public void testKt9929() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt9929.kt");
      }

      @Test
      @TestMetadata("kt9972.kt")
      public void testKt9972() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/kt9972.kt");
      }

      @Test
      @TestMetadata("NoElseExpectedUnit.kt")
      public void testNoElseExpectedUnit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NoElseExpectedUnit.kt");
      }

      @Test
      @TestMetadata("NoElseNoExpectedType.kt")
      public void testNoElseNoExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NoElseNoExpectedType.kt");
      }

      @Test
      @TestMetadata("NoElseReturnedFromLambdaExpectedInt.kt")
      public void testNoElseReturnedFromLambdaExpectedInt() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NoElseReturnedFromLambdaExpectedInt.kt");
      }

      @Test
      @TestMetadata("NoElseReturnedNonUnit.kt")
      public void testNoElseReturnedNonUnit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NoElseReturnedNonUnit.kt");
      }

      @Test
      @TestMetadata("NoElseReturnedUnit.kt")
      public void testNoElseReturnedUnit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NoElseReturnedUnit.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveBooleanNullable.kt")
      public void testNonExhaustiveBooleanNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustiveBooleanNullable.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveDependentContext.kt")
      public void testNonExhaustiveDependentContext() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/nonExhaustiveDependentContext.kt");
      }

      @Test
      @TestMetadata("NonExhaustivePlatformEnum.kt")
      public void testNonExhaustivePlatformEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustivePlatformEnum.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWarning.kt")
      public void testNonExhaustiveWarning() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustiveWarning.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWarningForSealedClass.kt")
      public void testNonExhaustiveWarningForSealedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustiveWarningForSealedClass.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWarningNull.kt")
      public void testNonExhaustiveWarningNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustiveWarningNull.kt");
      }

      @Test
      @TestMetadata("nonExhaustiveWhenStatement_1_7.kt")
      public void testNonExhaustiveWhenStatement_1_7() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/nonExhaustiveWhenStatement_1_7.kt");
      }

      @Test
      @TestMetadata("NonExhaustiveWithNullabilityCheck.kt")
      public void testNonExhaustiveWithNullabilityCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/NonExhaustiveWithNullabilityCheck.kt");
      }

      @Test
      @TestMetadata("ReservedExhaustiveWhen.kt")
      public void testReservedExhaustiveWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/ReservedExhaustiveWhen.kt");
      }

      @Test
      @TestMetadata("TopLevelSealed.kt")
      public void testTopLevelSealed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/TopLevelSealed.kt");
      }

      @Test
      @TestMetadata("TypeParameterError.kt")
      public void testTypeParameterError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/TypeParameterError.kt");
      }

      @Test
      @TestMetadata("When.kt")
      public void testWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/When.kt");
      }

      @Test
      @TestMetadata("whenAndLambdaWithExpectedType.kt")
      public void testWhenAndLambdaWithExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/whenAndLambdaWithExpectedType.kt");
      }

      @Test
      @TestMetadata("whenOnNothing.kt")
      public void testWhenOnNothing() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/whenOnNothing.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/when/guard")
      @TestDataPath("$PROJECT_ROOT")
      public class Guard {
        @Test
        @TestMetadata("diverseBooleanExpression.kt")
        public void testDiverseBooleanExpression() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/diverseBooleanExpression.kt");
        }

        @Test
        @TestMetadata("elvisOperator.kt")
        public void testElvisOperator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/elvisOperator.kt");
        }

        @Test
        @TestMetadata("exhaustiveness.kt")
        public void testExhaustiveness() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/exhaustiveness.kt");
        }

        @Test
        @TestMetadata("expectedTypeInGuard.kt")
        public void testExpectedTypeInGuard() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/expectedTypeInGuard.kt");
        }

        @Test
        @TestMetadata("guardWithNoSubject.kt")
        public void testGuardWithNoSubject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/guardWithNoSubject.kt");
        }

        @Test
        @TestMetadata("ifElseExpressions.kt")
        public void testIfElseExpressions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/ifElseExpressions.kt");
        }

        @Test
        @TestMetadata("initializationAnalyses.kt")
        public void testInitializationAnalyses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/initializationAnalyses.kt");
        }

        @Test
        @TestMetadata("multipleCondition.kt")
        public void testMultipleCondition() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/multipleCondition.kt");
        }

        @Test
        @TestMetadata("returnAnalysis.kt")
        public void testReturnAnalysis() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/returnAnalysis.kt");
        }

        @Test
        @TestMetadata("smartCasts.kt")
        public void testSmartCasts() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/smartCasts.kt");
        }

        @Test
        @TestMetadata("suggestGuard.kt")
        public void testSuggestGuard() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/suggestGuard.kt");
        }

        @Test
        @TestMetadata("typeCheckerBehaves.kt")
        public void testTypeCheckerBehaves() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/typeCheckerBehaves.kt");
        }

        @Test
        @TestMetadata("whenWithGuardDisabled.kt")
        public void testWhenWithGuardDisabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/whenWithGuardDisabled.kt");
        }

        @Test
        @TestMetadata("whenWithGuardEnabled.kt")
        public void testWhenWithGuardEnabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/whenWithGuardEnabled.kt");
        }

        @Test
        @TestMetadata("whenWithGuardSyntax.kt")
        public void testWhenWithGuardSyntax() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/guard/whenWithGuardSyntax.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/when/withSubjectVariable")
      @TestDataPath("$PROJECT_ROOT")
      public class WithSubjectVariable {
        @Test
        @TestMetadata("capturingInInitializer.kt")
        public void testCapturingInInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/capturingInInitializer.kt");
        }

        @Test
        @TestMetadata("invisibleOutsideOfWhen.kt")
        public void testInvisibleOutsideOfWhen() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/invisibleOutsideOfWhen.kt");
        }

        @Test
        @TestMetadata("jumpoutInInitializer.kt")
        public void testJumpoutInInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/jumpoutInInitializer.kt");
        }

        @Test
        @TestMetadata("noSubjectVariableName.kt")
        public void testNoSubjectVariableName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/noSubjectVariableName.kt");
        }

        @Test
        @TestMetadata("reassignmentToWhenSubjectVariable.kt")
        public void testReassignmentToWhenSubjectVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/reassignmentToWhenSubjectVariable.kt");
        }

        @Test
        @TestMetadata("smartCastOnValueBoundToSubjectVariable.kt")
        public void testSmartCastOnValueBoundToSubjectVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/smartCastOnValueBoundToSubjectVariable.kt");
        }

        @Test
        @TestMetadata("smartCastsOnSubjectVariable.kt")
        public void testSmartCastsOnSubjectVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/smartCastsOnSubjectVariable.kt");
        }

        @Test
        @TestMetadata("smartcastToEnum.kt")
        public void testSmartcastToEnum() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/smartcastToEnum.kt");
        }

        @Test
        @TestMetadata("smartcastToSealed.kt")
        public void testSmartcastToSealed() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/smartcastToSealed.kt");
        }

        @Test
        @TestMetadata("unnamedSubject.kt")
        public void testUnnamedSubject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/unnamedSubject.kt");
        }

        @Test
        @TestMetadata("unsupportedFeature.kt")
        public void testUnsupportedFeature() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/unsupportedFeature.kt");
        }

        @Test
        @TestMetadata("unsupportedVariableDeclarationsInWhenSubject.kt")
        public void testUnsupportedVariableDeclarationsInWhenSubject() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/when/withSubjectVariable/unsupportedVariableDeclarationsInWhenSubject.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/testsWithStdLib")
  @TestDataPath("$PROJECT_ROOT")
  public class TestsWithStdLib {
    @Test
    @TestMetadata("addAllProjection.kt")
    public void testAddAllProjection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/addAllProjection.kt");
    }

    @Test
    @TestMetadata("ArrayOfNothing.kt")
    public void testArrayOfNothing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/ArrayOfNothing.kt");
    }

    @Test
    @TestMetadata("ArrayOfNothingDisabled.kt")
    public void testArrayOfNothingDisabled() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/ArrayOfNothingDisabled.kt");
    }

    @Test
    @TestMetadata("CallCompanionProtectedNonStatic.kt")
    public void testCallCompanionProtectedNonStatic() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/CallCompanionProtectedNonStatic.kt");
    }

    @Test
    @TestMetadata("CallToMainRedeclaredInMultiFile.kt")
    public void testCallToMainRedeclaredInMultiFile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/CallToMainRedeclaredInMultiFile.kt");
    }

    @Test
    @TestMetadata("commonCollections.kt")
    public void testCommonCollections() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/commonCollections.kt");
    }

    @Test
    @TestMetadata("comparingDifferentSubclassesCommonInterface.kt")
    public void testComparingDifferentSubclassesCommonInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/comparingDifferentSubclassesCommonInterface.kt");
    }

    @Test
    @TestMetadata("comparingPlatformTypes.kt")
    public void testComparingPlatformTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/comparingPlatformTypes.kt");
    }

    @Test
    @TestMetadata("comparingSmartCastValueToBoolean.kt")
    public void testComparingSmartCastValueToBoolean() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/comparingSmartCastValueToBoolean.kt");
    }

    @Test
    @TestMetadata("comparingTripleWithPair.kt")
    public void testComparingTripleWithPair() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/comparingTripleWithPair.kt");
    }

    @Test
    @TestMetadata("elvisOnJavaList.kt")
    public void testElvisOnJavaList() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/elvisOnJavaList.kt");
    }

    @Test
    @TestMetadata("equalityCompatibilityCommonCases.kt")
    public void testEqualityCompatibilityCommonCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityCommonCases.kt");
    }

    @Test
    @TestMetadata("equalityCompatibilityOldBehavior_Off.kt")
    public void testEqualityCompatibilityOldBehavior_Off() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityOldBehavior_Off.kt");
    }

    @Test
    @TestMetadata("equalityCompatibilityOldBehavior_On.kt")
    public void testEqualityCompatibilityOldBehavior_On() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/equalityCompatibilityOldBehavior_On.kt");
    }

    @Test
    @TestMetadata("hugeUnresolvedKotlinxHtml.kt")
    public void testHugeUnresolvedKotlinxHtml() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/hugeUnresolvedKotlinxHtml.kt");
    }

    @Test
    @TestMetadata("InaccessibleInternalClass.kt")
    public void testInaccessibleInternalClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/InaccessibleInternalClass.kt");
    }

    @Test
    @TestMetadata("incorrectComparatorInvocation.kt")
    public void testIncorrectComparatorInvocation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/incorrectComparatorInvocation.kt");
    }

    @Test
    @TestMetadata("instar.kt")
    public void testInstar() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/instar.kt");
    }

    @Test
    @TestMetadata("javaClassOnCompanion.kt")
    public void testJavaClassOnCompanion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/javaClassOnCompanion.kt");
    }

    @Test
    @TestMetadata("javaForKClass.kt")
    public void testJavaForKClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/javaForKClass.kt");
    }

    @Test
    @TestMetadata("kt54410.kt")
    public void testKt54410() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/kt54410.kt");
    }

    @Test
    @TestMetadata("kt55503.kt")
    public void testKt55503() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/kt55503.kt");
    }

    @Test
    @TestMetadata("kt55747.kt")
    public void testKt55747() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/kt55747.kt");
    }

    @Test
    @TestMetadata("kt9078.kt")
    public void testKt9078() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/kt9078.kt");
    }

    @Test
    @TestMetadata("labelClashes.kt")
    public void testLabelClashes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/labelClashes.kt");
    }

    @Test
    @TestMetadata("labelClashesWithContextReceivers.kt")
    public void testLabelClashesWithContextReceivers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/labelClashesWithContextReceivers.kt");
    }

    @Test
    @TestMetadata("listAssignmentInWhen.kt")
    public void testListAssignmentInWhen() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/listAssignmentInWhen.kt");
    }

    @Test
    @TestMetadata("outstar.kt")
    public void testOutstar() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/outstar.kt");
    }

    @Test
    @TestMetadata("PropertyDelegateWithPrivateSet.kt")
    public void testPropertyDelegateWithPrivateSet() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/PropertyDelegateWithPrivateSet.kt");
    }

    @Test
    @TestMetadata("RenameOnImportHidesDefaultImport.kt")
    public void testRenameOnImportHidesDefaultImport() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/RenameOnImportHidesDefaultImport.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("annotationTargetResolvedAmbiguously.kt")
      public void testAnnotationTargetResolvedAmbiguously() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationTargetResolvedAmbiguously.kt");
      }

      @Test
      @TestMetadata("defaultValueMustBeConstant.kt")
      public void testDefaultValueMustBeConstant() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/defaultValueMustBeConstant.kt");
      }

      @Test
      @TestMetadata("explicitMetadata.kt")
      public void testExplicitMetadata() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/explicitMetadata.kt");
      }

      @Test
      @TestMetadata("jvmRecordWithoutJdk15.kt")
      public void testJvmRecordWithoutJdk15() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmRecordWithoutJdk15.kt");
      }

      @Test
      @TestMetadata("JvmSyntheticOnDelegate.kt")
      public void testJvmSyntheticOnDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/JvmSyntheticOnDelegate.kt");
      }

      @Test
      @TestMetadata("multipleRepeatables.kt")
      public void testMultipleRepeatables() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/multipleRepeatables.kt");
      }

      @Test
      @TestMetadata("qualifiedCallValue.kt")
      public void testQualifiedCallValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/qualifiedCallValue.kt");
      }

      @Test
      @TestMetadata("strictfpOnClass.kt")
      public void testStrictfpOnClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/strictfpOnClass.kt");
      }

      @Test
      @TestMetadata("Synchronized.kt")
      public void testSynchronized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/Synchronized.kt");
      }

      @Test
      @TestMetadata("throws.kt")
      public void testThrows() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/throws.kt");
      }

      @Test
      @TestMetadata("Volatile.kt")
      public void testVolatile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/Volatile.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationApplicability {
        @Test
        @TestMetadata("annotationPropertyGettersDisabled.kt")
        public void testAnnotationPropertyGettersDisabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/annotationPropertyGettersDisabled.kt");
        }

        @Test
        @TestMetadata("annotationPropertyGettersEnabled.kt")
        public void testAnnotationPropertyGettersEnabled() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/annotationPropertyGettersEnabled.kt");
        }

        @Test
        @TestMetadata("annotationsOnUseSiteTargets.kt")
        public void testAnnotationsOnUseSiteTargets() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/annotationsOnUseSiteTargets.kt");
        }

        @Test
        @TestMetadata("illegalPlatformName.kt")
        public void testIllegalPlatformName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/illegalPlatformName.kt");
        }

        @Test
        @TestMetadata("jvmName.kt")
        public void testJvmName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmName.kt");
        }

        @Test
        @TestMetadata("jvmNameOnFile.kt")
        public void testJvmNameOnFile() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmNameOnFile.kt");
        }

        @Test
        @TestMetadata("jvmNameOnMangledNames.kt")
        public void testJvmNameOnMangledNames() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationApplicability/jvmNameOnMangledNames.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameterMustBeConstant {
        @Test
        @TestMetadata("array.kt")
        public void testArray() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/array.kt");
        }

        @Test
        @TestMetadata("simple.kt")
        public void testSimple() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/simple.kt");
        }

        @Test
        @TestMetadata("useOfNonConstVal.kt")
        public void testUseOfNonConstVal() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/useOfNonConstVal.kt");
        }

        @Test
        @TestMetadata("vararg.kt")
        public void testVararg() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameterMustBeConstant/vararg.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationParameters {
        @Test
        @TestMetadata("kt10136.kt")
        public void testKt10136() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/kt10136.kt");
        }

        @Test
        @TestMetadata("nonConstValAsArgument.kt")
        public void testNonConstValAsArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/nonConstValAsArgument.kt");
        }

        @Test
        @TestMetadata("valueArray.kt")
        public void testValueArray() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArray.kt");
        }

        @Test
        @TestMetadata("valueArrayAndOtherDefault.kt")
        public void testValueArrayAndOtherDefault() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationParameters/valueArrayAndOtherDefault.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationWithVarargParameter {
        @Test
        @TestMetadata("javaAnnotationWithVarargArgument.kt")
        public void testJavaAnnotationWithVarargArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/javaAnnotationWithVarargArgument.kt");
        }

        @Test
        @TestMetadata("kotlinAnnotationWithVarargArgument.kt")
        public void testKotlinAnnotationWithVarargArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/annotationWithVarargParameter/kotlinAnnotationWithVarargArgument.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmDefault {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class JvmDefaultWithCompatibility {
          @Test
          @TestMetadata("target8.kt")
          public void testTarget8() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility/target8.kt");
          }

          @Test
          @TestMetadata("target8Disabled.kt")
          public void testTarget8Disabled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithCompatibility/target8Disabled.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility")
        @TestDataPath("$PROJECT_ROOT")
        public class JvmDefaultWithoutCompatibility {
          @Test
          @TestMetadata("target8Disabled.kt")
          public void testTarget8Disabled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmDefault/jvmDefaultWithoutCompatibility/target8Disabled.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmField {
        @Test
        @TestMetadata("inMultiFileFacade.kt")
        public void testInMultiFileFacade() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/inMultiFileFacade.kt");
        }

        @Test
        @TestMetadata("interface13.kt")
        public void testInterface13() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/interface13.kt");
        }

        @Test
        @TestMetadata("jvmFieldApplicability_1_6.kt")
        public void testJvmFieldApplicability_1_6() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmField/jvmFieldApplicability_1_6.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmOverloads {
        @Test
        @TestMetadata("jvmOverloadsOnAbstractMethods.kt")
        public void testJvmOverloadsOnAbstractMethods() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAbstractMethods.kt");
        }

        @Test
        @TestMetadata("jvmOverloadsOnAnnotationClassConstructor_1_4.kt")
        public void testJvmOverloadsOnAnnotationClassConstructor_1_4() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnAnnotationClassConstructor_1_4.kt");
        }

        @Test
        @TestMetadata("jvmOverloadsOnPrivate.kt")
        public void testJvmOverloadsOnPrivate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmOverloads/jvmOverloadsOnPrivate.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmPackageName")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmPackageName {
        @Test
        @TestMetadata("incorrectJvmPackageName.kt")
        public void testIncorrectJvmPackageName() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmPackageName/incorrectJvmPackageName.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic")
      @TestDataPath("$PROJECT_ROOT")
      public class JvmStatic {
        @Test
        @TestMetadata("constOrJvmFieldProperty.kt")
        public void testConstOrJvmFieldProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constOrJvmFieldProperty.kt");
        }

        @Test
        @TestMetadata("constructorProperty.kt")
        public void testConstructorProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructorProperty.kt");
        }

        @Test
        @TestMetadata("constructorProperty_LL13.kt")
        public void testConstructorProperty_LL13() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructorProperty_LL13.kt");
        }

        @Test
        @TestMetadata("constructors.kt")
        public void testConstructors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/constructors.kt");
        }

        @Test
        @TestMetadata("finalAndAbstract.kt")
        public void testFinalAndAbstract() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/finalAndAbstract.kt");
        }

        @Test
        @TestMetadata("functions.kt")
        public void testFunctions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/functions.kt");
        }

        @Test
        @TestMetadata("functions_LL13.kt")
        public void testFunctions_LL13() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/functions_LL13.kt");
        }

        @Test
        @TestMetadata("interfaceCompanion_LL12.kt")
        public void testInterfaceCompanion_LL12() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/interfaceCompanion_LL12.kt");
        }

        @Test
        @TestMetadata("interfaceCompanion_LL13_18.kt")
        public void testInterfaceCompanion_LL13_18() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/interfaceCompanion_LL13_18.kt");
        }

        @Test
        @TestMetadata("localFun.kt")
        public void testLocalFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/localFun.kt");
        }

        @Test
        @TestMetadata("localFun_LL13.kt")
        public void testLocalFun_LL13() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/localFun_LL13.kt");
        }

        @Test
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/property.kt");
        }

        @Test
        @TestMetadata("property_LL13.kt")
        public void testProperty_LL13() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/jvmStatic/property_LL13.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/kClass")
      @TestDataPath("$PROJECT_ROOT")
      public class KClass {
        @Test
        @TestMetadata("kClassArrayInAnnotationsInVariance.kt")
        public void testKClassArrayInAnnotationsInVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsInVariance.kt");
        }

        @Test
        @TestMetadata("kClassArrayInAnnotationsOutVariance.kt")
        public void testKClassArrayInAnnotationsOutVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassArrayInAnnotationsOutVariance.kt");
        }

        @Test
        @TestMetadata("kClassInAnnotation.kt")
        public void testKClassInAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotation.kt");
        }

        @Test
        @TestMetadata("kClassInAnnotationsInVariance.kt")
        public void testKClassInAnnotationsInVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsInVariance.kt");
        }

        @Test
        @TestMetadata("kClassInAnnotationsOutVariance.kt")
        public void testKClassInAnnotationsOutVariance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInAnnotationsOutVariance.kt");
        }

        @Test
        @TestMetadata("kClassInvariantTP.kt")
        public void testKClassInvariantTP() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/kClass/kClassInvariantTP.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument")
      @TestDataPath("$PROJECT_ROOT")
      public class ProhibitPositionedArgument {
        @Test
        @TestMetadata("tooManyArgs.kt")
        public void testTooManyArgs() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/tooManyArgs.kt");
        }

        @Test
        @TestMetadata("typeMismatch.kt")
        public void testTypeMismatch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/typeMismatch.kt");
        }

        @Test
        @TestMetadata("withValue.kt")
        public void testWithValue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withValue.kt");
        }

        @Test
        @TestMetadata("withoutValue.kt")
        public void testWithoutValue() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/prohibitPositionedArgument/withoutValue.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired")
      @TestDataPath("$PROJECT_ROOT")
      public class SubclassOptInRequired {
        @Test
        @TestMetadata("DiagnosticCustomMessage_error.kt")
        public void testDiagnosticCustomMessage_error() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/DiagnosticCustomMessage_error.kt");
        }

        @Test
        @TestMetadata("DiagnosticDefaultMessage_error.kt")
        public void testDiagnosticDefaultMessage_error() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/DiagnosticDefaultMessage_error.kt");
        }

        @Test
        @TestMetadata("differentDiagnosticsOnSameMarker.kt")
        public void testDifferentDiagnosticsOnSameMarker() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/differentDiagnosticsOnSameMarker.kt");
        }

        @Test
        @TestMetadata("Experimentality.kt")
        public void testExperimentality() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Experimentality.kt");
        }

        @Test
        @TestMetadata("IncorrectApplicability.kt")
        public void testIncorrectApplicability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/IncorrectApplicability.kt");
        }

        @Test
        @TestMetadata("InheritingByLocalClassifiers.kt")
        public void testInheritingByLocalClassifiers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InheritingByLocalClassifiers.kt");
        }

        @Test
        @TestMetadata("InheritingDifferentOptInLevels.kt")
        public void testInheritingDifferentOptInLevels() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InheritingDifferentOptInLevels.kt");
        }

        @Test
        @TestMetadata("InnerAndNestedClasses.kt")
        public void testInnerAndNestedClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/InnerAndNestedClasses.kt");
        }

        @Test
        @TestMetadata("JavaKotlinInterop.kt")
        public void testJavaKotlinInterop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/JavaKotlinInterop.kt");
        }

        @Test
        @TestMetadata("Module.kt")
        public void testModule() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Module.kt");
        }

        @Test
        @TestMetadata("NotApiMarkerAsArgument.kt")
        public void testNotApiMarkerAsArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/NotApiMarkerAsArgument.kt");
        }

        @Test
        @TestMetadata("SeveralExperimentalMarkers.kt")
        public void testSeveralExperimentalMarkers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/SeveralExperimentalMarkers.kt");
        }

        @Test
        @TestMetadata("Typealias.kt")
        public void testTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/Typealias.kt");
        }

        @Test
        @TestMetadata("UsageOptInIsNotImplied.kt")
        public void testUsageOptInIsNotImplied() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/UsageOptInIsNotImplied.kt");
        }

        @Test
        @TestMetadata("WithAbstractClasses.kt")
        public void testWithAbstractClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithAbstractClasses.kt");
        }

        @Test
        @TestMetadata("WithInheritanceByDelegation.kt")
        public void testWithInheritanceByDelegation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithInheritanceByDelegation.kt");
        }

        @Test
        @TestMetadata("WithInterfaces.kt")
        public void testWithInterfaces() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithInterfaces.kt");
        }

        @Test
        @TestMetadata("WithOpenClasses.kt")
        public void testWithOpenClasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/annotations/subclassOptInRequired/WithOpenClasses.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/builtins")
    @TestDataPath("$PROJECT_ROOT")
    public class Builtins {
      @Test
      @TestMetadata("arraysAreCloneable.kt")
      public void testArraysAreCloneable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/builtins/arraysAreCloneable.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/cast")
    @TestDataPath("$PROJECT_ROOT")
    public class Cast {
      @Test
      @TestMetadata("AsInsideIn.kt")
      public void testAsInsideIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/cast/AsInsideIn.kt");
      }

      @Test
      @TestMetadata("IsArray.kt")
      public void testIsArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/cast/IsArray.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow")
      @TestDataPath("$PROJECT_ROOT")
      public class Controlflow {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining")
        @TestDataPath("$PROJECT_ROOT")
        public class FlowInlining {
          @Test
          @TestMetadata("breakContinuesInInlinedLambda.kt")
          public void testBreakContinuesInInlinedLambda() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/breakContinuesInInlinedLambda.kt");
          }

          @Test
          @TestMetadata("labeledReturns.kt")
          public void testLabeledReturns() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/labeledReturns.kt");
          }

          @Test
          @TestMetadata("nestedTryCatchFinally.kt")
          public void testNestedTryCatchFinally() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nestedTryCatchFinally.kt");
          }

          @Test
          @TestMetadata("nestedTryCatchs.kt")
          public void testNestedTryCatchs() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nestedTryCatchs.kt");
          }

          @Test
          @TestMetadata("nonReturningInlinedLambda.kt")
          public void testNonReturningInlinedLambda() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/nonReturningInlinedLambda.kt");
          }

          @Test
          @TestMetadata("safeCallAndInPlaceReturn.kt")
          public void testSafeCallAndInPlaceReturn() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/safeCallAndInPlaceReturn.kt");
          }

          @Test
          @TestMetadata("severalJumpOutsFromInlinedLambda.kt")
          public void testSeveralJumpOutsFromInlinedLambda() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/severalJumpOutsFromInlinedLambda.kt");
          }

          @Test
          @TestMetadata("throwIfNotCalled.kt")
          public void testThrowIfNotCalled() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/throwIfNotCalled.kt");
          }

          @Test
          @TestMetadata("tryCatch.kt")
          public void testTryCatch() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/tryCatch.kt");
          }

          @Test
          @TestMetadata("tryCatchFinally.kt")
          public void testTryCatchFinally() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/tryCatchFinally.kt");
          }

          @Test
          @TestMetadata("typeMismatch.kt")
          public void testTypeMismatch() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/flowInlining/typeMismatch.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization")
        @TestDataPath("$PROJECT_ROOT")
        public class Initialization {
          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce")
          @TestDataPath("$PROJECT_ROOT")
          public class AtLeastOnce {
            @Test
            @TestMetadata("valDefiniteReassignment.kt")
            public void testValDefiniteReassignment() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/valDefiniteReassignment.kt");
            }

            @Test
            @TestMetadata("varDefiniteInitialization.kt")
            public void testVarDefiniteInitialization() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/varDefiniteInitialization.kt");
            }

            @Test
            @TestMetadata("varIndefiniteInitialization.kt")
            public void testVarIndefiniteInitialization() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/atLeastOnce/varIndefiniteInitialization.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce")
          @TestDataPath("$PROJECT_ROOT")
          public class ExactlyOnce {
            @Test
            @TestMetadata("valDefiniteInitialization.kt")
            public void testValDefiniteInitialization() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valDefiniteInitialization.kt");
            }

            @Test
            @TestMetadata("valDefiniteReassignment.kt")
            public void testValDefiniteReassignment() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valDefiniteReassignment.kt");
            }

            @Test
            @TestMetadata("valIndefiniteInitialization.kt")
            public void testValIndefiniteInitialization() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/valIndefiniteInitialization.kt");
            }

            @Test
            @TestMetadata("varIndefiniteInitialization.kt")
            public void testVarIndefiniteInitialization() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/varIndefiniteInitialization.kt");
            }

            @Test
            @TestMetadata("withReceiver.kt")
            public void testWithReceiver() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/exactlyOnce/withReceiver.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/unknown")
          @TestDataPath("$PROJECT_ROOT")
          public class Unknown {
            @Test
            @TestMetadata("unknownInvocations.kt")
            public void testUnknownInvocations() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/controlflow/initialization/unknown/unknownInvocations.kt");
            }
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl")
      @TestDataPath("$PROJECT_ROOT")
      public class Dsl {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors")
        @TestDataPath("$PROJECT_ROOT")
        public class Errors {
          @Test
          @TestMetadata("accessToOuterThis.kt")
          public void testAccessToOuterThis() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/accessToOuterThis.kt");
          }

          @Test
          @TestMetadata("booleanComparisons.kt")
          public void testBooleanComparisons() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/booleanComparisons.kt");
          }

          @Test
          @TestMetadata("callInContractDescription.kt")
          public void testCallInContractDescription() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/callInContractDescription.kt");
          }

          @Test
          @TestMetadata("contractCallSites.1.4.kt")
          public void testContractCallSites_1_4() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/contractCallSites.1.4.kt");
          }

          @Test
          @TestMetadata("emptyContract.kt")
          public void testEmptyContract() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/emptyContract.kt");
          }

          @Test
          @TestMetadata("illegalConstructionInContractBlock.kt")
          public void testIllegalConstructionInContractBlock() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/illegalConstructionInContractBlock.kt");
          }

          @Test
          @TestMetadata("illegalEqualsCondition.kt")
          public void testIllegalEqualsCondition() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/illegalEqualsCondition.kt");
          }

          @Test
          @TestMetadata("nestedConditionalEffects.kt")
          public void testNestedConditionalEffects() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/nestedConditionalEffects.kt");
          }

          @Test
          @TestMetadata("nonLambdaLiteralAsArgument.kt")
          public void testNonLambdaLiteralAsArgument() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/nonLambdaLiteralAsArgument.kt");
          }

          @Test
          @TestMetadata("notFirstStatement.kt")
          public void testNotFirstStatement() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/notFirstStatement.kt");
          }

          @Test
          @TestMetadata("recursiveContract.kt")
          public void testRecursiveContract() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/recursiveContract.kt");
          }

          @Test
          @TestMetadata("referenceToProperty.1.4.kt")
          public void testReferenceToProperty_1_4() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/referenceToProperty.1.4.kt");
          }

          @Test
          @TestMetadata("typeReferences.1.4.kt")
          public void testTypeReferences_1_4() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/typeReferences.1.4.kt");
          }

          @Test
          @TestMetadata("unlabeledReceiver.kt")
          public void testUnlabeledReceiver() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/dsl/errors/unlabeledReceiver.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib")
      @TestDataPath("$PROJECT_ROOT")
      public class FromStdlib {
        @Test
        @TestMetadata("contractWithSubstitution.kt")
        public void testContractWithSubstitution() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/contractWithSubstitution.kt");
        }

        @Test
        @TestMetadata("fromStandardKt.kt")
        public void testFromStandardKt() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/fromStandardKt.kt");
        }

        @Test
        @TestMetadata("isNullOrBlank.kt")
        public void testIsNullOrBlank() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/isNullOrBlank.kt");
        }

        @Test
        @TestMetadata("isNullOrEmpty.kt")
        public void testIsNullOrEmpty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/fromStdlib/isNullOrEmpty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax")
      @TestDataPath("$PROJECT_ROOT")
      public class NewSyntax {
        @Test
        @TestMetadata("propertyAccessorsContractDescription.kt")
        public void testPropertyAccessorsContractDescription() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/newSyntax/propertyAccessorsContractDescription.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class Smartcasts {
        @Test
        @TestMetadata("catchExceptionSpilling.kt")
        public void testCatchExceptionSpilling() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/catchExceptionSpilling.kt");
        }

        @Test
        @TestMetadata("compositions.kt")
        public void testCompositions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/compositions.kt");
        }

        @Test
        @TestMetadata("deeplyNested.kt")
        public void testDeeplyNested() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/deeplyNested.kt");
        }

        @Test
        @TestMetadata("extensionReceiver_after.kt")
        public void testExtensionReceiver_after() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/extensionReceiver_after.kt");
        }

        @Test
        @TestMetadata("intersectingInfo.kt")
        public void testIntersectingInfo() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/intersectingInfo.kt");
        }

        @Test
        @TestMetadata("intersectionTypes.kt")
        public void testIntersectionTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/intersectionTypes.kt");
        }

        @Test
        @TestMetadata("nullabilitySmartcastWhenNullability.kt")
        public void testNullabilitySmartcastWhenNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/nullabilitySmartcastWhenNullability.kt");
        }

        @Test
        @TestMetadata("partiallyIncorrect.kt")
        public void testPartiallyIncorrect() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/partiallyIncorrect.kt");
        }

        @Test
        @TestMetadata("receiver.kt")
        public void testReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/receiver.kt");
        }

        @Test
        @TestMetadata("returnsImpliesAndSafeCalls.kt")
        public void testReturnsImpliesAndSafeCalls() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/returnsImpliesAndSafeCalls.kt");
        }

        @Test
        @TestMetadata("safecallAndReturnsNull.kt")
        public void testSafecallAndReturnsNull() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/safecallAndReturnsNull.kt");
        }

        @Test
        @TestMetadata("throwsEffect.kt")
        public void testThrowsEffect() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/throwsEffect.kt");
        }

        @Test
        @TestMetadata("typeSmartcastWhenNullability.kt")
        public void testTypeSmartcastWhenNullability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/typeSmartcastWhenNullability.kt");
        }

        @Test
        @TestMetadata("unreachableBranches.kt")
        public void testUnreachableBranches() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/unreachableBranches.kt");
        }

        @Test
        @TestMetadata("valueOfContractedFunctionIngored.kt")
        public void testValueOfContractedFunctionIngored() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/valueOfContractedFunctionIngored.kt");
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect")
        @TestDataPath("$PROJECT_ROOT")
        public class Multieffect {
          @Test
          @TestMetadata("implicitIff.kt")
          public void testImplicitIff() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect/implicitIff.kt");
          }

          @Test
          @TestMetadata("returnsAndCalls.kt")
          public void testReturnsAndCalls() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/multieffect/returnsAndCalls.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests")
        @TestDataPath("$PROJECT_ROOT")
        public class OperatorsTests {
          @Test
          @TestMetadata("andOperator.kt")
          public void testAndOperator() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperator.kt");
          }

          @Test
          @TestMetadata("andOperatorWithConstant.kt")
          public void testAndOperatorWithConstant() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperatorWithConstant.kt");
          }

          @Test
          @TestMetadata("andOperatorWithUnknown.kt")
          public void testAndOperatorWithUnknown() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/andOperatorWithUnknown.kt");
          }

          @Test
          @TestMetadata("equalsOperator.kt")
          public void testEqualsOperator() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/equalsOperator.kt");
          }

          @Test
          @TestMetadata("equalsWithNullableBoolean.kt")
          public void testEqualsWithNullableBoolean() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/equalsWithNullableBoolean.kt");
          }

          @Test
          @TestMetadata("isInstanceOperator.kt")
          public void testIsInstanceOperator() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/isInstanceOperator.kt");
          }

          @Test
          @TestMetadata("orOperator.kt")
          public void testOrOperator() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperator.kt");
          }

          @Test
          @TestMetadata("orOperatorWithConstant.kt")
          public void testOrOperatorWithConstant() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperatorWithConstant.kt");
          }

          @Test
          @TestMetadata("orOperatorWithUnknown.kt")
          public void testOrOperatorWithUnknown() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/operatorsTests/orOperatorWithUnknown.kt");
          }
        }

        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when")
        @TestDataPath("$PROJECT_ROOT")
        public class When {
          @Test
          @TestMetadata("withSubject.kt")
          public void testWithSubject() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withSubject.kt");
          }

          @Test
          @TestMetadata("withSubjectNullableBoolean.kt")
          public void testWithSubjectNullableBoolean() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withSubjectNullableBoolean.kt");
          }

          @Test
          @TestMetadata("withoutSubject.kt")
          public void testWithoutSubject() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/contracts/smartcasts/when/withoutSubject.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines")
    @TestDataPath("$PROJECT_ROOT")
    public class Coroutines {
      @Test
      @TestMetadata("coroutineContext.kt")
      public void testCoroutineContext() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/coroutineContext.kt");
      }

      @Test
      @TestMetadata("illegalSuspendCalls.kt")
      public void testIllegalSuspendCalls() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/illegalSuspendCalls.kt");
      }

      @Test
      @TestMetadata("illegalSuspendCallsForDelegated.kt")
      public void testIllegalSuspendCallsForDelegated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/illegalSuspendCallsForDelegated.kt");
      }

      @Test
      @TestMetadata("irrelevantSuspendDeclarations.kt")
      public void testIrrelevantSuspendDeclarations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/irrelevantSuspendDeclarations.kt");
      }

      @Test
      @TestMetadata("kSuspendFunctionAsSupertype.kt")
      public void testKSuspendFunctionAsSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kSuspendFunctionAsSupertype.kt");
      }

      @Test
      @TestMetadata("kt18292.kt")
      public void testKt18292() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kt18292.kt");
      }

      @Test
      @TestMetadata("kt28658.kt")
      public void testKt28658() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kt28658.kt");
      }

      @Test
      @TestMetadata("kt36947.kt")
      public void testKt36947() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kt36947.kt");
      }

      @Test
      @TestMetadata("kt37309.kt")
      public void testKt37309() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kt37309.kt");
      }

      @Test
      @TestMetadata("kt55072.kt")
      public void testKt55072() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/kt55072.kt");
      }

      @Test
      @TestMetadata("lambdaExpectedType.kt")
      public void testLambdaExpectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/lambdaExpectedType.kt");
      }

      @Test
      @TestMetadata("mixingSuspendability.kt")
      public void testMixingSuspendability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/mixingSuspendability.kt");
      }

      @Test
      @TestMetadata("modifierFormForNonBuiltInSuspend.kt")
      public void testModifierFormForNonBuiltInSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/modifierFormForNonBuiltInSuspend.kt");
      }

      @Test
      @TestMetadata("modifierFormForNonBuiltInSuspendWithAnyParameter.kt")
      public void testModifierFormForNonBuiltInSuspendWithAnyParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/modifierFormForNonBuiltInSuspendWithAnyParameter.kt");
      }

      @Test
      @TestMetadata("noDefaultCoroutineImports.kt")
      public void testNoDefaultCoroutineImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/noDefaultCoroutineImports.kt");
      }

      @Test
      @TestMetadata("nonLocalSuspension.kt")
      public void testNonLocalSuspension() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/nonLocalSuspension.kt");
      }

      @Test
      @TestMetadata("nonModifierFormForBuiltIn.kt")
      public void testNonModifierFormForBuiltIn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltIn.kt");
      }

      @Test
      @TestMetadata("nonModifierFormForBuiltInRenameOnImport.kt")
      public void testNonModifierFormForBuiltInRenameOnImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltInRenameOnImport.kt");
      }

      @Test
      @TestMetadata("nonModifierFormForBuiltInWithFun.kt")
      public void testNonModifierFormForBuiltInWithFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/nonModifierFormForBuiltInWithFun.kt");
      }

      @Test
      @TestMetadata("operators.kt")
      public void testOperators() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/operators.kt");
      }

      @Test
      @TestMetadata("returnLabelForBuiltInSuspend.kt")
      public void testReturnLabelForBuiltInSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/returnLabelForBuiltInSuspend.kt");
      }

      @Test
      @TestMetadata("suspendConflictsWithNoSuspend.kt")
      public void testSuspendConflictsWithNoSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendConflictsWithNoSuspend.kt");
      }

      @Test
      @TestMetadata("suspendCoroutineOrReturn.kt")
      public void testSuspendCoroutineOrReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendCoroutineOrReturn.kt");
      }

      @Test
      @TestMetadata("suspendExternalFunctions.kt")
      public void testSuspendExternalFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendExternalFunctions.kt");
      }

      @Test
      @TestMetadata("suspendFunctionN.kt")
      public void testSuspendFunctionN() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionN.kt");
      }

      @Test
      @TestMetadata("suspendFunctions.kt")
      public void testSuspendFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctions.kt");
      }

      @Test
      @TestMetadata("suspendJavaImplementationFromDifferentClass.kt")
      public void testSuspendJavaImplementationFromDifferentClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendJavaImplementationFromDifferentClass.kt");
      }

      @Test
      @TestMetadata("suspendJavaOverrides.kt")
      public void testSuspendJavaOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendJavaOverrides.kt");
      }

      @Test
      @TestMetadata("suspendNotImplemented.kt")
      public void testSuspendNotImplemented() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendNotImplemented.kt");
      }

      @Test
      @TestMetadata("suspendOverridability.kt")
      public void testSuspendOverridability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendOverridability.kt");
      }

      @Test
      @TestMetadata("suspendTest.kt")
      public void testSuspendTest() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendTest.kt");
      }

      @Test
      @TestMetadata("suspensionPointInMonitor.kt")
      public void testSuspensionPointInMonitor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspensionPointInMonitor.kt");
      }

      @Test
      @TestMetadata("suspensionPointInMonitorNewInf.kt")
      public void testSuspensionPointInMonitorNewInf() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspensionPointInMonitorNewInf.kt");
      }

      @Test
      @TestMetadata("suspesionInDefaultValue.kt")
      public void testSuspesionInDefaultValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspesionInDefaultValue.kt");
      }

      @Test
      @TestMetadata("synchronizedOnSuspend.kt")
      public void testSynchronizedOnSuspend() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/synchronizedOnSuspend.kt");
      }

      @Test
      @TestMetadata("synchronizedOnSuspendError.kt")
      public void testSynchronizedOnSuspendError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/synchronizedOnSuspendError.kt");
      }

      @Test
      @TestMetadata("tryCatchLambda.kt")
      public void testTryCatchLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/tryCatchLambda.kt");
      }

      @Test
      @TestMetadata("usageOfResultTypeInReturnType.kt")
      public void testUsageOfResultTypeInReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/usageOfResultTypeInReturnType.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference")
      @TestDataPath("$PROJECT_ROOT")
      public class CallableReference {
        @Test
        @TestMetadata("callableReferenceOnUnresolvedLHS.kt")
        public void testCallableReferenceOnUnresolvedLHS() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/callableReferenceOnUnresolvedLHS.kt");
        }

        @Test
        @TestMetadata("property.kt")
        public void testProperty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/property.kt");
        }

        @Test
        @TestMetadata("suspendConversionForCallableReferences.kt")
        public void testSuspendConversionForCallableReferences() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/callableReference/suspendConversionForCallableReferences.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("callableReferenceToASuspendFunction.kt")
        public void testCallableReferenceToASuspendFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/callableReferenceToASuspendFunction.kt");
        }

        @Test
        @TestMetadata("expectedSomeTypesOnIllegalSelector.kt")
        public void testExpectedSomeTypesOnIllegalSelector() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/expectedSomeTypesOnIllegalSelector.kt");
        }

        @Test
        @TestMetadata("extensionWithNonValuableConstraints.kt")
        public void testExtensionWithNonValuableConstraints() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionWithNonValuableConstraints.kt");
        }

        @Test
        @TestMetadata("extensionsWithNonValuableConstraintsGenericBase.kt")
        public void testExtensionsWithNonValuableConstraintsGenericBase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/extensionsWithNonValuableConstraintsGenericBase.kt");
        }

        @Test
        @TestMetadata("kt33542.kt")
        public void testKt33542() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt33542.kt");
        }

        @Test
        @TestMetadata("kt35684.kt")
        public void testKt35684() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/kt35684.kt");
        }

        @Test
        @TestMetadata("plusAssignInCoroutineContext.kt")
        public void testPlusAssignInCoroutineContext() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignInCoroutineContext.kt");
        }

        @Test
        @TestMetadata("plusAssignWithLambda.kt")
        public void testPlusAssignWithLambda() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignWithLambda.kt");
        }

        @Test
        @TestMetadata("plusAssignWithLambda2.kt")
        public void testPlusAssignWithLambda2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/plusAssignWithLambda2.kt");
        }

        @Test
        @TestMetadata("suspendCallsWithErrors.kt")
        public void testSuspendCallsWithErrors() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/suspendCallsWithErrors.kt");
        }

        @Test
        @TestMetadata("suspendCallsWrongUpperBound.kt")
        public void testSuspendCallsWrongUpperBound() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inference/suspendCallsWrongUpperBound.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline")
      @TestDataPath("$PROJECT_ROOT")
      public class InlineCrossinline {
        @Test
        @TestMetadata("inlineOrdinaryOfCrossinlineOrdinary.kt")
        public void testInlineOrdinaryOfCrossinlineOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfCrossinlineOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineOrdinaryOfCrossinlineSuspend.kt")
        public void testInlineOrdinaryOfCrossinlineSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfCrossinlineSuspend.kt");
        }

        @Test
        @TestMetadata("inlineOrdinaryOfNoinlineOrdinary.kt")
        public void testInlineOrdinaryOfNoinlineOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfNoinlineOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineOrdinaryOfNoinlineSuspend.kt")
        public void testInlineOrdinaryOfNoinlineSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfNoinlineSuspend.kt");
        }

        @Test
        @TestMetadata("inlineOrdinaryOfOrdinary.kt")
        public void testInlineOrdinaryOfOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineOrdinaryOfSuspend.kt")
        public void testInlineOrdinaryOfSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineOrdinaryOfSuspend.kt");
        }

        @Test
        @TestMetadata("inlineSuspendOfCrossinlineOrdinary.kt")
        public void testInlineSuspendOfCrossinlineOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfCrossinlineOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineSuspendOfCrossinlineSuspend.kt")
        public void testInlineSuspendOfCrossinlineSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfCrossinlineSuspend.kt");
        }

        @Test
        @TestMetadata("inlineSuspendOfNoinlineOrdinary.kt")
        public void testInlineSuspendOfNoinlineOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfNoinlineOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineSuspendOfOrdinary.kt")
        public void testInlineSuspendOfOrdinary() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfOrdinary.kt");
        }

        @Test
        @TestMetadata("inlineSuspendOfSuspend.kt")
        public void testInlineSuspendOfSuspend() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/inlineCrossinline/inlineSuspendOfSuspend.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension")
      @TestDataPath("$PROJECT_ROOT")
      public class RestrictSuspension {
        @Test
        @TestMetadata("extensions.kt")
        public void testExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/extensions.kt");
        }

        @Test
        @TestMetadata("invokeExtension.kt")
        public void testInvokeExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/invokeExtension.kt");
        }

        @Test
        @TestMetadata("memberExtension.kt")
        public void testMemberExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/memberExtension.kt");
        }

        @Test
        @TestMetadata("notRelatedFun.kt")
        public void testNotRelatedFun() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/notRelatedFun.kt");
        }

        @Test
        @TestMetadata("outerYield_1_3.kt")
        public void testOuterYield_1_3() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/outerYield_1_3.kt");
        }

        @Test
        @TestMetadata("sameInstance.kt")
        public void testSameInstance() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/sameInstance.kt");
        }

        @Test
        @TestMetadata("simpleForbidden.kt")
        public void testSimpleForbidden() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/simpleForbidden.kt");
        }

        @Test
        @TestMetadata("wrongEnclosingFunction.kt")
        public void testWrongEnclosingFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/restrictSuspension/wrongEnclosingFunction.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType")
      @TestDataPath("$PROJECT_ROOT")
      public class SuspendFunctionType {
        @Test
        @TestMetadata("functionVsSuspendFunction.kt")
        public void testFunctionVsSuspendFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/functionVsSuspendFunction.kt");
        }

        @Test
        @TestMetadata("inline.kt")
        public void testInline() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/inline.kt");
        }

        @Test
        @TestMetadata("invoke.kt")
        public void testInvoke() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/invoke.kt");
        }

        @Test
        @TestMetadata("lambdaInOverriddenValInitializer.kt")
        public void testLambdaInOverriddenValInitializer() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/lambdaInOverriddenValInitializer.kt");
        }

        @Test
        @TestMetadata("modifierApplicability.kt")
        public void testModifierApplicability() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/modifierApplicability.kt");
        }

        @Test
        @TestMetadata("noInvokeForSuspendFunction.kt")
        public void testNoInvokeForSuspendFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/noInvokeForSuspendFunction.kt");
        }

        @Test
        @TestMetadata("nullableSuspendFunction.kt")
        public void testNullableSuspendFunction() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/nullableSuspendFunction.kt");
        }

        @Test
        @TestMetadata("suspendFunctionN.kt")
        public void testSuspendFunctionN() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/coroutines/suspendFunctionType/suspendFunctionN.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/deprecated")
    @TestDataPath("$PROJECT_ROOT")
    public class Deprecated {
      @Test
      @TestMetadata("deprecationOnReadBytes.kt")
      public void testDeprecationOnReadBytes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/deprecated/deprecationOnReadBytes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/evaluate")
    @TestDataPath("$PROJECT_ROOT")
    public class Evaluate {
      @Test
      @TestMetadata("charCodeExpType.kt")
      public void testCharCodeExpType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/evaluate/charCodeExpType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/experimental")
    @TestDataPath("$PROJECT_ROOT")
    public class Experimental {
      @Test
      @TestMetadata("annotation.kt")
      public void testAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/annotation.kt");
      }

      @Test
      @TestMetadata("callOfBaseFunctionFromGeneric.kt")
      public void testCallOfBaseFunctionFromGeneric() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/callOfBaseFunctionFromGeneric.kt");
      }

      @Test
      @TestMetadata("constructorCheck.kt")
      public void testConstructorCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/constructorCheck.kt");
      }

      @Test
      @TestMetadata("diffrentModules.kt")
      public void testDiffrentModules() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/diffrentModules.kt");
      }

      @Test
      @TestMetadata("duration.kt")
      public void testDuration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/duration.kt");
      }

      @Test
      @TestMetadata("enumCompanion.kt")
      public void testEnumCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/enumCompanion.kt");
      }

      @Test
      @TestMetadata("errors.kt")
      public void testErrors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/errors.kt");
      }

      @Test
      @TestMetadata("experimentalIsNotEnabled.kt")
      public void testExperimentalIsNotEnabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalIsNotEnabled.kt");
      }

      @Test
      @TestMetadata("experimentalSetter.kt")
      public void testExperimentalSetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/experimentalSetter.kt");
      }

      @Test
      @TestMetadata("implicitUsages.kt")
      public void testImplicitUsages() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/implicitUsages.kt");
      }

      @Test
      @TestMetadata("implicitUsagesFuture.kt")
      public void testImplicitUsagesFuture() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/implicitUsagesFuture.kt");
      }

      @Test
      @TestMetadata("incorrectTargetsForExperimentalAnnotation.kt")
      public void testIncorrectTargetsForExperimentalAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/incorrectTargetsForExperimentalAnnotation.kt");
      }

      @Test
      @TestMetadata("insideSAM.kt")
      public void testInsideSAM() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/insideSAM.kt");
      }

      @Test
      @TestMetadata("overridableCheck.kt")
      public void testOverridableCheck() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/overridableCheck.kt");
      }

      @Test
      @TestMetadata("overrideErrorOnPrimaryConstructorProperty.kt")
      public void testOverrideErrorOnPrimaryConstructorProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/overrideErrorOnPrimaryConstructorProperty.kt");
      }

      @Test
      @TestMetadata("typealias.kt")
      public void testTypealias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/typealias.kt");
      }

      @Test
      @TestMetadata("usageNotAsAnnotation.kt")
      public void testUsageNotAsAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/usageNotAsAnnotation.kt");
      }

      @Test
      @TestMetadata("wasExperimental.kt")
      public void testWasExperimental() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/wasExperimental.kt");
      }

      @Test
      @TestMetadata("wasExperimentalCombined.kt")
      public void testWasExperimentalCombined() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/wasExperimentalCombined.kt");
      }

      @Test
      @TestMetadata("wrongTargetsWithoutExplicitTarget.kt")
      public void testWrongTargetsWithoutExplicitTarget() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/experimental/wrongTargetsWithoutExplicitTarget.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/factoryPattern")
    @TestDataPath("$PROJECT_ROOT")
    public class FactoryPattern {
      @Test
      @TestMetadata("overloadByLambdaReturnType_enabled.kt")
      public void testOverloadByLambdaReturnType_enabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/factoryPattern/overloadByLambdaReturnType_enabled.kt");
      }

      @Test
      @TestMetadata("overloadByLambdaReturnType_enabled_no_annotation.kt")
      public void testOverloadByLambdaReturnType_enabled_no_annotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/factoryPattern/overloadByLambdaReturnType_enabled_no_annotation.kt");
      }

      @Test
      @TestMetadata("returnFromInlineLambda.kt")
      public void testReturnFromInlineLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/factoryPattern/returnFromInlineLambda.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/functionLiterals")
    @TestDataPath("$PROJECT_ROOT")
    public class FunctionLiterals {
      @Test
      @TestMetadata("nullableUnitLiteral.kt")
      public void testNullableUnitLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/functionLiterals/nullableUnitLiteral.kt");
      }

      @Test
      @TestMetadata("pseudocodeMemoryOverhead.kt")
      public void testPseudocodeMemoryOverhead() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/functionLiterals/pseudocodeMemoryOverhead.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("arrayConstructor.kt")
      public void testArrayConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/arrayConstructor.kt");
      }

      @Test
      @TestMetadata("callableReferenceOnParameter.kt")
      public void testCallableReferenceOnParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/callableReferenceOnParameter.kt");
      }

      @Test
      @TestMetadata("kt11266.kt")
      public void testKt11266() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt11266.kt");
      }

      @Test
      @TestMetadata("kt1558.kt")
      public void testKt1558() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt1558.kt");
      }

      @Test
      @TestMetadata("kt3458.kt")
      public void testKt3458() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt3458.kt");
      }

      @Test
      @TestMetadata("kt36951.kt")
      public void testKt36951() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt36951.kt");
      }

      @Test
      @TestMetadata("kt42620.kt")
      public void testKt42620() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt42620.kt");
      }

      @Test
      @TestMetadata("kt4975.kt")
      public void testKt4975() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/kt4975.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationsForResolve {
        @Test
        @TestMetadata("exactAnnotationWithUpperBoundConstraint.kt")
        public void testExactAnnotationWithUpperBoundConstraint() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/exactAnnotationWithUpperBoundConstraint.kt");
        }

        @Test
        @TestMetadata("explicitTypeArgumentAsValidInputType.kt")
        public void testExplicitTypeArgumentAsValidInputType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/explicitTypeArgumentAsValidInputType.kt");
        }

        @Test
        @TestMetadata("kt26698.kt")
        public void testKt26698() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt26698.kt");
        }

        @Test
        @TestMetadata("kt29307.kt")
        public void testKt29307() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/kt29307.kt");
        }

        @Test
        @TestMetadata("noInferAndLowPriority.kt")
        public void testNoInferAndLowPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/noInferAndLowPriority.kt");
        }

        @Test
        @TestMetadata("noInferAnnotation.kt")
        public void testNoInferAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/noInferAnnotation.kt");
        }

        @Test
        @TestMetadata("notNullAnnotation.kt")
        public void testNotNullAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/notNullAnnotation.kt");
        }

        @Test
        @TestMetadata("onlyInputTypes.kt")
        public void testOnlyInputTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypes.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesAndLowPriority.kt")
        public void testOnlyInputTypesAndLowPriority() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndLowPriority.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesAndTopLevelCapturedTypes.kt")
        public void testOnlyInputTypesAndTopLevelCapturedTypes() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesAndTopLevelCapturedTypes.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesCaptured.kt")
        public void testOnlyInputTypesCaptured() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesCaptured.kt");
        }

        @Test
        @TestMetadata("onlyInputTypesCommonConstraintSystem.kt")
        public void testOnlyInputTypesCommonConstraintSystem() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/onlyInputTypesCommonConstraintSystem.kt");
        }

        @Test
        @TestMetadata("resolveWithOnlyInputTypesAnnotation.kt")
        public void testResolveWithOnlyInputTypesAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/annotationsForResolve/resolveWithOnlyInputTypesAnnotation.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion")
      @TestDataPath("$PROJECT_ROOT")
      public class Completion {
        @Nested
        @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis")
        @TestDataPath("$PROJECT_ROOT")
        public class PostponedArgumentsAnalysis {
          @Test
          @TestMetadata("callableReferences.kt")
          public void testCallableReferences() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/callableReferences.kt");
          }

          @Test
          @TestMetadata("suspendFunctions.kt")
          public void testSuspendFunctions() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/completion/postponedArgumentsAnalysis/suspendFunctions.kt");
          }
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inference/delegates")
      @TestDataPath("$PROJECT_ROOT")
      public class Delegates {
        @Test
        @TestMetadata("kt50994.kt")
        public void testKt50994() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inference/delegates/kt50994.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/inline")
    @TestDataPath("$PROJECT_ROOT")
    public class Inline {
      @Test
      @TestMetadata("inlineConstructorOfArray.kt")
      public void testInlineConstructorOfArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inline/inlineConstructorOfArray.kt");
      }

      @Test
      @TestMetadata("inlineOnlySuppressesNothingToInline.kt")
      public void testInlineOnlySuppressesNothingToInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/inline/inlineOnlySuppressesNothingToInline.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/java")
    @TestDataPath("$PROJECT_ROOT")
    public class Java {
      @Test
      @TestMetadata("checkEnhancedUpperBounds.kt")
      public void testCheckEnhancedUpperBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/java/checkEnhancedUpperBounds.kt");
      }

      @Test
      @TestMetadata("checkEnhancedUpperBoundsWithEnabledImprovements.kt")
      public void testCheckEnhancedUpperBoundsWithEnabledImprovements() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/java/checkEnhancedUpperBoundsWithEnabledImprovements.kt");
      }

      @Test
      @TestMetadata("concurrentHashMapContainsError.kt")
      public void testConcurrentHashMapContainsError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/java/concurrentHashMapContainsError.kt");
      }

      @Test
      @TestMetadata("inheritedFunctionN.kt")
      public void testInheritedFunctionN() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/java/inheritedFunctionN.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/lateinit")
    @TestDataPath("$PROJECT_ROOT")
    public class Lateinit {
      @Test
      @TestMetadata("isInitialized.kt")
      public void testIsInitialized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/lateinit/isInitialized.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/native")
    @TestDataPath("$PROJECT_ROOT")
    public class Native {
      @Test
      @TestMetadata("abstract.kt")
      public void testAbstract() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/abstract.kt");
      }

      @Test
      @TestMetadata("body.kt")
      public void testBody() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/body.kt");
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/constructor.kt");
      }

      @Test
      @TestMetadata("inline.kt")
      public void testInline() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/inline.kt");
      }

      @Test
      @TestMetadata("nonFunction.kt")
      public void testNonFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/nonFunction.kt");
      }

      @Test
      @TestMetadata("reified.kt")
      public void testReified() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/reified.kt");
      }

      @Test
      @TestMetadata("trait.kt")
      public void testTrait() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/native/trait.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/pcla")
    @TestDataPath("$PROJECT_ROOT")
    public class Pcla {
      @Test
      @TestMetadata("buildListRemoveAddInBranches.kt")
      public void testBuildListRemoveAddInBranches() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/buildListRemoveAddInBranches.kt");
      }

      @Test
      @TestMetadata("buildListToUpperBound.kt")
      public void testBuildListToUpperBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/buildListToUpperBound.kt");
      }

      @Test
      @TestMetadata("buildListToUpperBoundForbidden.kt")
      public void testBuildListToUpperBoundForbidden() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/buildListToUpperBoundForbidden.kt");
      }

      @Test
      @TestMetadata("inferCoroutineTypeInOldVersion.kt")
      public void testInferCoroutineTypeInOldVersion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/inferCoroutineTypeInOldVersion.kt");
      }

      @Test
      @TestMetadata("typeVariableShouldNotBeFixed.kt")
      public void testTypeVariableShouldNotBeFixed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/typeVariableShouldNotBeFixed.kt");
      }

      @Test
      @TestMetadata("unsafeAssignment.kt")
      public void testUnsafeAssignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/unsafeAssignment.kt");
      }

      @Test
      @TestMetadata("unsafeAssignmentExtra.kt")
      public void testUnsafeAssignmentExtra() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/unsafeAssignmentExtra.kt");
      }

      @Test
      @TestMetadata("unsafeAssignment_noReport.kt")
      public void testUnsafeAssignment_noReport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/unsafeAssignment_noReport.kt");
      }

      @Test
      @TestMetadata("upperBoundViolation.kt")
      public void testUpperBoundViolation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/upperBoundViolation.kt");
      }

      @Test
      @TestMetadata("upperBoundViolation_noReporting.kt")
      public void testUpperBoundViolation_noReporting() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/pcla/upperBoundViolation_noReporting.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection")
    @TestDataPath("$PROJECT_ROOT")
    public class PurelyImplementedCollection {
      @Test
      @TestMetadata("arrayList.kt")
      public void testArrayList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayList.kt");
      }

      @Test
      @TestMetadata("arrayListNullable.kt")
      public void testArrayListNullable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/arrayListNullable.kt");
      }

      @Test
      @TestMetadata("customClassMutableCollection.kt")
      public void testCustomClassMutableCollection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableCollection.kt");
      }

      @Test
      @TestMetadata("customClassMutableList.kt")
      public void testCustomClassMutableList() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/customClassMutableList.kt");
      }

      @Test
      @TestMetadata("intersectionOfPrimitiveBasedFunctions.kt")
      public void testIntersectionOfPrimitiveBasedFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/intersectionOfPrimitiveBasedFunctions.kt");
      }

      @Test
      @TestMetadata("maps.kt")
      public void testMaps() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/maps.kt");
      }

      @Test
      @TestMetadata("mapsWithNullableKey.kt")
      public void testMapsWithNullableKey() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableKey.kt");
      }

      @Test
      @TestMetadata("mapsWithNullableValues.kt")
      public void testMapsWithNullableValues() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/mapsWithNullableValues.kt");
      }

      @Test
      @TestMetadata("sets.kt")
      public void testSets() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/purelyImplementedCollection/sets.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reflection")
    @TestDataPath("$PROJECT_ROOT")
    public class Reflection {
      @Test
      @TestMetadata("lambdaInsteadOfKFunction.kt")
      public void testLambdaInsteadOfKFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reflection/lambdaInsteadOfKFunction.kt");
      }

      @Test
      @TestMetadata("noReflectionInClassPath.kt")
      public void testNoReflectionInClassPath() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reflection/noReflectionInClassPath.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/regression")
    @TestDataPath("$PROJECT_ROOT")
    public class Regression {
      @Test
      @TestMetadata("ea65206.kt")
      public void testEa65206() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/ea65206.kt");
      }

      @Test
      @TestMetadata("ea66827_dataClassWrongToString.kt")
      public void testEa66827_dataClassWrongToString() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/ea66827_dataClassWrongToString.kt");
      }

      @Test
      @TestMetadata("ea70485_functionTypeInheritor.kt")
      public void testEa70485_functionTypeInheritor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/ea70485_functionTypeInheritor.kt");
      }

      @Test
      @TestMetadata("ea70880_illegalJvmName.kt")
      public void testEa70880_illegalJvmName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/ea70880_illegalJvmName.kt");
      }

      @Test
      @TestMetadata("kt10001.kt")
      public void testKt10001() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/kt10001.kt");
      }

      @Test
      @TestMetadata("kt2082.kt")
      public void testKt2082() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/kt2082.kt");
      }

      @Test
      @TestMetadata("kt34391.kt")
      public void testKt34391() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/kt34391.kt");
      }

      @Test
      @TestMetadata("kt37727.kt")
      public void testKt37727() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/kt37727.kt");
      }

      @Test
      @TestMetadata("kt9820_javaFunctionTypeInheritor.kt")
      public void testKt9820_javaFunctionTypeInheritor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/regression/kt9820_javaFunctionTypeInheritor.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/reified")
    @TestDataPath("$PROJECT_ROOT")
    public class Reified {
      @Test
      @TestMetadata("arrayConstruction.kt")
      public void testArrayConstruction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reified/arrayConstruction.kt");
      }

      @Test
      @TestMetadata("arrayOfNullsReified.kt")
      public void testArrayOfNullsReified() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reified/arrayOfNullsReified.kt");
      }

      @Test
      @TestMetadata("kt11881.kt")
      public void testKt11881() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reified/kt11881.kt");
      }

      @Test
      @TestMetadata("reifiedNothingSubstitution.kt")
      public void testReifiedNothingSubstitution() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reified/reifiedNothingSubstitution.kt");
      }

      @Test
      @TestMetadata("reifiedNothingSubstitutionDisabled.kt")
      public void testReifiedNothingSubstitutionDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/reified/reifiedNothingSubstitutionDisabled.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve")
    @TestDataPath("$PROJECT_ROOT")
    public class Resolve {
      @Test
      @TestMetadata("forEachInLocalClass.kt")
      public void testForEachInLocalClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/forEachInLocalClass.kt");
      }

      @Test
      @TestMetadata("hidesMembers.kt")
      public void testHidesMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/hidesMembers.kt");
      }

      @Test
      @TestMetadata("hidesMembers2.kt")
      public void testHidesMembers2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/hidesMembers2.kt");
      }

      @Test
      @TestMetadata("javaStaticMembers.kt")
      public void testJavaStaticMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/javaStaticMembers.kt");
      }

      @Test
      @TestMetadata("kt4711.kt")
      public void testKt4711() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/kt4711.kt");
      }

      @Test
      @TestMetadata("lambdaArgumentOfInapplicableCall.kt")
      public void testLambdaArgumentOfInapplicableCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/lambdaArgumentOfInapplicableCall.kt");
      }

      @Test
      @TestMetadata("samAgainstFunctionalType.kt")
      public void testSamAgainstFunctionalType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/samAgainstFunctionalType.kt");
      }

      @Test
      @TestMetadata("samOverloadsWithGenerics.kt")
      public void testSamOverloadsWithGenerics() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/samOverloadsWithGenerics.kt");
      }

      @Test
      @TestMetadata("samOverloadsWithKtFunction.kt")
      public void testSamOverloadsWithKtFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/samOverloadsWithKtFunction.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences")
      @TestDataPath("$PROJECT_ROOT")
      public class AmbiguousTypeReferences {
        @Test
        @TestMetadata("constructorVsSyntheticValues.kt")
        public void testConstructorVsSyntheticValues() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsSyntheticValues.kt");
        }

        @Test
        @TestMetadata("constructorVsSyntheticValuesPrioritized.kt")
        public void testConstructorVsSyntheticValuesPrioritized() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/constructorVsSyntheticValuesPrioritized.kt");
        }

        @Test
        @TestMetadata("qualifierEnumEntryOrCompanionMemberCase2.kt")
        public void testQualifierEnumEntryOrCompanionMemberCase2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierEnumEntryOrCompanionMemberCase2.kt");
        }

        @Test
        @TestMetadata("qualifierForStaticCase.kt")
        public void testQualifierForStaticCase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierForStaticCase.kt");
        }

        @Test
        @TestMetadata("qualifierOrStaticObjectCase.kt")
        public void testQualifierOrStaticObjectCase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierOrStaticObjectCase.kt");
        }

        @Test
        @TestMetadata("qualifierStaticObjectOrCompanionMemberCase2.kt")
        public void testQualifierStaticObjectOrCompanionMemberCase2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/qualifierStaticObjectOrCompanionMemberCase2.kt");
        }

        @Test
        @TestMetadata("typeCase.kt")
        public void testTypeCase() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/resolve/ambiguousTypeReferences/typeCase.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @Test
      @TestMetadata("forEachUnsafe.kt")
      public void testForEachUnsafe() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/forEachUnsafe.kt");
      }

      @Test
      @TestMetadata("invokeRecieverUnsafe.kt")
      public void testInvokeRecieverUnsafe() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/invokeRecieverUnsafe.kt");
      }

      @Test
      @TestMetadata("lambdaInCallArgs.kt")
      public void testLambdaInCallArgs() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/lambdaInCallArgs.kt");
      }

      @Test
      @TestMetadata("letAlwaysChangesToNotNull.kt")
      public void testLetAlwaysChangesToNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/letAlwaysChangesToNotNull.kt");
      }

      @Test
      @TestMetadata("letChangesToNotNull.kt")
      public void testLetChangesToNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNotNull.kt");
      }

      @Test
      @TestMetadata("letChangesToNull.kt")
      public void testLetChangesToNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNull.kt");
      }

      @Test
      @TestMetadata("letChangesToNullComplex.kt")
      public void testLetChangesToNullComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/letChangesToNullComplex.kt");
      }

      @Test
      @TestMetadata("letMergeNotNull.kt")
      public void testLetMergeNotNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/letMergeNotNull.kt");
      }

      @Test
      @TestMetadata("unsoundSmartcast.kt")
      public void testUnsoundSmartcast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/unsoundSmartcast.kt");
      }

      @Test
      @TestMetadata("withChangesToNull.kt")
      public void testWithChangesToNull() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/smartcasts/withChangesToNull.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/targetedBuiltIns")
    @TestDataPath("$PROJECT_ROOT")
    public class TargetedBuiltIns {
      @Test
      @TestMetadata("blackListed.kt")
      public void testBlackListed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/targetedBuiltIns/blackListed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures")
    @TestDataPath("$PROJECT_ROOT")
    public class TieredFailures {
      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/fail")
      @TestDataPath("$PROJECT_ROOT")
      public class Fail {
        @Test
        @TestMetadata("isFirButFirPasses.kt")
        public void testIsFirButFirPasses() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tieredFailures/fail/isFirButFirPasses.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tieredFailures/good")
      @TestDataPath("$PROJECT_ROOT")
      public class Good {
        @Test
        @TestMetadata("isFirButFir2IrFails.kt")
        public void testIsFirButFir2IrFails() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tieredFailures/good/isFirButFir2IrFails.kt");
        }

        @Test
        @TestMetadata("isFirButFirFails.kt")
        public void testIsFirButFirFails() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tieredFailures/good/isFirButFirFails.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/trailingComma")
    @TestDataPath("$PROJECT_ROOT")
    public class TrailingComma {
      @Test
      @TestMetadata("noDisambiguation.kt")
      public void testNoDisambiguation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/trailingComma/noDisambiguation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/tryCatch")
    @TestDataPath("$PROJECT_ROOT")
    public class TryCatch {
      @Test
      @TestMetadata("assignTry.kt")
      public void testAssignTry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/assignTry.kt");
      }

      @Test
      @TestMetadata("boundedSmartcasts.kt")
      public void testBoundedSmartcasts() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/boundedSmartcasts.kt");
      }

      @Test
      @TestMetadata("catchRedeclaration.kt")
      public void testCatchRedeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/catchRedeclaration.kt");
      }

      @Test
      @TestMetadata("correctSmartcasts.kt")
      public void testCorrectSmartcasts() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/correctSmartcasts.kt");
      }

      @Test
      @TestMetadata("falsePositiveSmartcasts.kt")
      public void testFalsePositiveSmartcasts() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/falsePositiveSmartcasts.kt");
      }

      @Test
      @TestMetadata("tryExpression.kt")
      public void testTryExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/tryCatch/tryExpression.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/typealias")
    @TestDataPath("$PROJECT_ROOT")
    public class Typealias {
      @Test
      @TestMetadata("exceptionTypeAliasesInvisibleWithApiVersion1_0.kt")
      public void testExceptionTypeAliasesInvisibleWithApiVersion1_0() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/typealias/exceptionTypeAliasesInvisibleWithApiVersion1_0.kt");
      }

      @Test
      @TestMetadata("upperBoundViolated.kt")
      public void testUpperBoundViolated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/typealias/upperBoundViolated.kt");
      }

      @Test
      @TestMetadata("upperBoundViolated2.kt")
      public void testUpperBoundViolated2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/typealias/upperBoundViolated2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/varargs")
    @TestDataPath("$PROJECT_ROOT")
    public class Varargs {
      @Test
      @TestMetadata("kt3213.kt")
      public void testKt3213() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/varargs/kt3213.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/testsWithStdLib/when")
    @TestDataPath("$PROJECT_ROOT")
    public class When {
      @Test
      @TestMetadata("kt10192.kt")
      public void testKt10192() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/testsWithStdLib/when/kt10192.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolve")
  @TestDataPath("$PROJECT_ROOT")
  public class Resolve {
    @Test
    @TestMetadata("annotationOnDeclarationWithDifferentArguments.kt")
    public void testAnnotationOnDeclarationWithDifferentArguments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/annotationOnDeclarationWithDifferentArguments.kt");
    }

    @Test
    @TestMetadata("annotationOnGetClassCall.kt")
    public void testAnnotationOnGetClassCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/annotationOnGetClassCall.kt");
    }

    @Test
    @TestMetadata("annotationUsedAsAnnotationArgument.kt")
    public void testAnnotationUsedAsAnnotationArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/annotationUsedAsAnnotationArgument.kt");
    }

    @Test
    @TestMetadata("asImports.kt")
    public void testAsImports() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/asImports.kt");
    }

    @Test
    @TestMetadata("cast.kt")
    public void testCast() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cast.kt");
    }

    @Test
    @TestMetadata("catchParameter.kt")
    public void testCatchParameter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/catchParameter.kt");
    }

    @Test
    @TestMetadata("constantValues.kt")
    public void testConstantValues() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/constantValues.kt");
    }

    @Test
    @TestMetadata("covariantArrayAsReceiver.kt")
    public void testCovariantArrayAsReceiver() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/covariantArrayAsReceiver.kt");
    }

    @Test
    @TestMetadata("defaultJavaImportHiding.kt")
    public void testDefaultJavaImportHiding() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/defaultJavaImportHiding.kt");
    }

    @Test
    @TestMetadata("delegateByArrayLiteral.kt")
    public void testDelegateByArrayLiteral() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/delegateByArrayLiteral.kt");
    }

    @Test
    @TestMetadata("delegatingConstructorCall.kt")
    public void testDelegatingConstructorCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/delegatingConstructorCall.kt");
    }

    @Test
    @TestMetadata("enum.kt")
    public void testEnum() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/enum.kt");
    }

    @Test
    @TestMetadata("fakeRecursiveSupertype.kt")
    public void testFakeRecursiveSupertype() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/fakeRecursiveSupertype.kt");
    }

    @Test
    @TestMetadata("fakeRecursiveTypealias.kt")
    public void testFakeRecursiveTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/fakeRecursiveTypealias.kt");
    }

    @Test
    @TestMetadata("flexibleTypeRendering.kt")
    public void testFlexibleTypeRendering() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/flexibleTypeRendering.kt");
    }

    @Test
    @TestMetadata("funInterfaceDeclaration.kt")
    public void testFunInterfaceDeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/funInterfaceDeclaration.kt");
    }

    @Test
    @TestMetadata("functionTypes.kt")
    public void testFunctionTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/functionTypes.kt");
    }

    @Test
    @TestMetadata("incorrectDataClass.kt")
    public void testIncorrectDataClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/incorrectDataClass.kt");
    }

    @Test
    @TestMetadata("incorrectSuperCall.kt")
    public void testIncorrectSuperCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/incorrectSuperCall.kt");
    }

    @Test
    @TestMetadata("intersectionTypes.kt")
    public void testIntersectionTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/intersectionTypes.kt");
    }

    @Test
    @TestMetadata("KT-65044.kt")
    public void testKT_65044() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/KT-65044.kt");
    }

    @Test
    @TestMetadata("kt41984.kt")
    public void testKt41984() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/kt41984.kt");
    }

    @Test
    @TestMetadata("kt54220.kt")
    public void testKt54220() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/kt54220.kt");
    }

    @Test
    @TestMetadata("kt54775.kt")
    public void testKt54775() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/kt54775.kt");
    }

    @Test
    @TestMetadata("lambdaArgInScopeFunction.kt")
    public void testLambdaArgInScopeFunction() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/lambdaArgInScopeFunction.kt");
    }

    @Test
    @TestMetadata("lambdaPropertyTypeInference.kt")
    public void testLambdaPropertyTypeInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/lambdaPropertyTypeInference.kt");
    }

    @Test
    @TestMetadata("nestedClassContructor.kt")
    public void testNestedClassContructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/nestedClassContructor.kt");
    }

    @Test
    @TestMetadata("objectInnerClass.kt")
    public void testObjectInnerClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/objectInnerClass.kt");
    }

    @Test
    @TestMetadata("openInInterface.kt")
    public void testOpenInInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/openInInterface.kt");
    }

    @Test
    @TestMetadata("properLocalPackages.kt")
    public void testProperLocalPackages() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properLocalPackages.kt");
    }

    @Test
    @TestMetadata("propertyGetterWithoutType.kt")
    public void testPropertyGetterWithoutType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/propertyGetterWithoutType.kt");
    }

    @Test
    @TestMetadata("qualifierWithCompanion.kt")
    public void testQualifierWithCompanion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/qualifierWithCompanion.kt");
    }

    @Test
    @TestMetadata("recursiveTypeAlias.kt")
    public void testRecursiveTypeAlias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/recursiveTypeAlias.kt");
    }

    @Test
    @TestMetadata("returnFromDelegatedConstuctor.kt")
    public void testReturnFromDelegatedConstuctor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/returnFromDelegatedConstuctor.kt");
    }

    @Test
    @TestMetadata("sealedClass.kt")
    public void testSealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/sealedClass.kt");
    }

    @Test
    @TestMetadata("settersGetters.kt")
    public void testSettersGetters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/settersGetters.kt");
    }

    @Test
    @TestMetadata("simpleClass.kt")
    public void testSimpleClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/simpleClass.kt");
    }

    @Test
    @TestMetadata("supertypesForAnnotationClass.kt")
    public void testSupertypesForAnnotationClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/supertypesForAnnotationClass.kt");
    }

    @Test
    @TestMetadata("throwableSubclass.kt")
    public void testThrowableSubclass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/throwableSubclass.kt");
    }

    @Test
    @TestMetadata("topLevelDestruction.kt")
    public void testTopLevelDestruction() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/topLevelDestruction.kt");
    }

    @Test
    @TestMetadata("tryInference.kt")
    public void testTryInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/tryInference.kt");
    }

    @Test
    @TestMetadata("typeAliasWithTypeArguments.kt")
    public void testTypeAliasWithTypeArguments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/typeAliasWithTypeArguments.kt");
    }

    @Test
    @TestMetadata("typeParameterVsNested.kt")
    public void testTypeParameterVsNested() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/typeParameterVsNested.kt");
    }

    @Test
    @TestMetadata("whenElse.kt")
    public void testWhenElse() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/whenElse.kt");
    }

    @Test
    @TestMetadata("whenExpressionType.kt")
    public void testWhenExpressionType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/whenExpressionType.kt");
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/arguments")
    @TestDataPath("$PROJECT_ROOT")
    public class Arguments {
      @Test
      @TestMetadata("ambiguityOnJavaOverride.kt")
      public void testAmbiguityOnJavaOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/ambiguityOnJavaOverride.kt");
      }

      @Test
      @TestMetadata("argParamTypeMismatch.kt")
      public void testArgParamTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/argParamTypeMismatch.kt");
      }

      @Test
      @TestMetadata("argumentsOfAnnotations.kt")
      public void testArgumentsOfAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/argumentsOfAnnotations.kt");
      }

      @Test
      @TestMetadata("argumentsOfJavaAnnotation.kt")
      public void testArgumentsOfJavaAnnotation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/argumentsOfJavaAnnotation.kt");
      }

      @Test
      @TestMetadata("default.kt")
      public void testDefault() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/default.kt");
      }

      @Test
      @TestMetadata("defaultFromOverrides.kt")
      public void testDefaultFromOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/defaultFromOverrides.kt");
      }

      @Test
      @TestMetadata("destructuring.kt")
      public void testDestructuring() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/destructuring.kt");
      }

      @Test
      @TestMetadata("fieldPlusAssign.kt")
      public void testFieldPlusAssign() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/fieldPlusAssign.kt");
      }

      @Test
      @TestMetadata("integerLiteralTypes.kt")
      public void testIntegerLiteralTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/integerLiteralTypes.kt");
      }

      @Test
      @TestMetadata("javaAnnotationsWithArrayValue.kt")
      public void testJavaAnnotationsWithArrayValue() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/javaAnnotationsWithArrayValue.kt");
      }

      @Test
      @TestMetadata("javaArrayVariance.kt")
      public void testJavaArrayVariance() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/javaArrayVariance.kt");
      }

      @Test
      @TestMetadata("lambda.kt")
      public void testLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/lambda.kt");
      }

      @Test
      @TestMetadata("lambdaInLambda.kt")
      public void testLambdaInLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/lambdaInLambda.kt");
      }

      @Test
      @TestMetadata("lambdaInUnresolvedCall.kt")
      public void testLambdaInUnresolvedCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/lambdaInUnresolvedCall.kt");
      }

      @Test
      @TestMetadata("noParameterForName.kt")
      public void testNoParameterForName() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/noParameterForName.kt");
      }

      @Test
      @TestMetadata("operatorsOverLiterals.kt")
      public void testOperatorsOverLiterals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/operatorsOverLiterals.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/simple.kt");
      }

      @Test
      @TestMetadata("vararg.kt")
      public void testVararg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arguments/vararg.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/arrays")
    @TestDataPath("$PROJECT_ROOT")
    public class Arrays {
      @Test
      @TestMetadata("arraySetWithOperation.kt")
      public void testArraySetWithOperation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/arrays/arraySetWithOperation.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/callResolution")
    @TestDataPath("$PROJECT_ROOT")
    public class CallResolution {
      @Test
      @TestMetadata("arraySetWithPlusAssign.kt")
      public void testArraySetWithPlusAssign() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/arraySetWithPlusAssign.kt");
      }

      @Test
      @TestMetadata("errorCandidates.kt")
      public void testErrorCandidates() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/errorCandidates.kt");
      }

      @Test
      @TestMetadata("exponentialArraySetWithPlusAssign.kt")
      public void testExponentialArraySetWithPlusAssign() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/exponentialArraySetWithPlusAssign.kt");
      }

      @Test
      @TestMetadata("kt50386.kt")
      public void testKt50386() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/kt50386.kt");
      }

      @Test
      @TestMetadata("lambdaAsReceiver.kt")
      public void testLambdaAsReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/lambdaAsReceiver.kt");
      }

      @Test
      @TestMetadata("syntheticPropertiesWrongImplicitReceiver.kt")
      public void testSyntheticPropertiesWrongImplicitReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/callResolution/syntheticPropertiesWrongImplicitReceiver.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/cfa")
    @TestDataPath("$PROJECT_ROOT")
    public class Cfa {
      @Test
      @TestMetadata("reassignOfNonLocalProperty_initializedProperties.kt")
      public void testReassignOfNonLocalProperty_initializedProperties() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfa/reassignOfNonLocalProperty_initializedProperties.kt");
      }

      @Test
      @TestMetadata("reassignOfNonMemberProperty_lateInitialization.kt")
      public void testReassignOfNonMemberProperty_lateInitialization() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfa/reassignOfNonMemberProperty_lateInitialization.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/cfg")
    @TestDataPath("$PROJECT_ROOT")
    public class Cfg {
      @Test
      @TestMetadata("flowFromInplaceLambda.kt")
      public void testFlowFromInplaceLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/flowFromInplaceLambda.kt");
      }

      @Test
      @TestMetadata("flowFromInplaceLambda2.kt")
      public void testFlowFromInplaceLambda2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/flowFromInplaceLambda2.kt");
      }

      @Test
      @TestMetadata("flowFromInplaceLambda3.kt")
      public void testFlowFromInplaceLambda3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/flowFromInplaceLambda3.kt");
      }

      @Test
      @TestMetadata("flowFromTwoInplaceLambdas.kt")
      public void testFlowFromTwoInplaceLambdas() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/flowFromTwoInplaceLambdas.kt");
      }

      @Test
      @TestMetadata("inlineLambdasAreInplace.kt")
      public void testInlineLambdasAreInplace() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/inlineLambdasAreInplace.kt");
      }

      @Test
      @TestMetadata("innerClassInAnonymousObject.kt")
      public void testInnerClassInAnonymousObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/innerClassInAnonymousObject.kt");
      }

      @Test
      @TestMetadata("jumps.kt")
      public void testJumps() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/jumps.kt");
      }

      @Test
      @TestMetadata("lambdaInIfInTry.kt")
      public void testLambdaInIfInTry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/lambdaInIfInTry.kt");
      }

      @Test
      @TestMetadata("localClassesWithImplicit.kt")
      public void testLocalClassesWithImplicit() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/localClassesWithImplicit.kt");
      }

      @Test
      @TestMetadata("postponedLambdaInReturn.kt")
      public void testPostponedLambdaInReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/postponedLambdaInReturn.kt");
      }

      @Test
      @TestMetadata("propertiesAndInitBlocks.kt")
      public void testPropertiesAndInitBlocks() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/cfg/propertiesAndInitBlocks.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/checkers")
    @TestDataPath("$PROJECT_ROOT")
    public class Checkers {
      @Test
      @TestMetadata("complexConflictingProjections.kt")
      public void testComplexConflictingProjections() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/complexConflictingProjections.kt");
      }

      @Test
      @TestMetadata("contextReceiversSubtyping.kt")
      public void testContextReceiversSubtyping() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/contextReceiversSubtyping.kt");
      }

      @Test
      @TestMetadata("dnnTypeWithAdditionalNullableBound.kt")
      public void testDnnTypeWithAdditionalNullableBound() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/dnnTypeWithAdditionalNullableBound.kt");
      }

      @Test
      @TestMetadata("internalImplicitInvokeFromInlineFun.kt")
      public void testInternalImplicitInvokeFromInlineFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/internalImplicitInvokeFromInlineFun.kt");
      }

      @Test
      @TestMetadata("internalSuperCallFromInlineFun.kt")
      public void testInternalSuperCallFromInlineFun() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/internalSuperCallFromInlineFun.kt");
      }

      @Test
      @TestMetadata("invalidLhsOfClassLiteral.kt")
      public void testInvalidLhsOfClassLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/invalidLhsOfClassLiteral.kt");
      }

      @Test
      @TestMetadata("notUselessCast_1.kt")
      public void testNotUselessCast_1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/notUselessCast_1.kt");
      }

      @Test
      @TestMetadata("notUselessCast_2.kt")
      public void testNotUselessCast_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/notUselessCast_2.kt");
      }

      @Test
      @TestMetadata("notUselessCast_3.kt")
      public void testNotUselessCast_3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/notUselessCast_3.kt");
      }

      @Test
      @TestMetadata("recursiveDependencyBetweenReturnTypeAndSupertype.kt")
      public void testRecursiveDependencyBetweenReturnTypeAndSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/checkers/recursiveDependencyBetweenReturnTypeAndSupertype.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/classpathSubstitution")
    @TestDataPath("$PROJECT_ROOT")
    public class ClasspathSubstitution {
      @Test
      @TestMetadata("cyclicSupertype.kt")
      public void testCyclicSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertype.kt");
      }

      @Test
      @TestMetadata("cyclicSupertype2.kt")
      public void testCyclicSupertype2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertype2.kt");
      }

      @Test
      @TestMetadata("cyclicSupertype3.kt")
      public void testCyclicSupertype3() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertype3.kt");
      }

      @Test
      @TestMetadata("cyclicSupertype4.kt")
      public void testCyclicSupertype4() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertype4.kt");
      }

      @Test
      @TestMetadata("cyclicSupertypeBetweenModules.kt")
      public void testCyclicSupertypeBetweenModules() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertypeBetweenModules.kt");
      }

      @Test
      @TestMetadata("cyclicSupertypeWithAlias.kt")
      public void testCyclicSupertypeWithAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertypeWithAlias.kt");
      }

      @Test
      @TestMetadata("cyclicSupertypeWithAlias2.kt")
      public void testCyclicSupertypeWithAlias2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/classpathSubstitution/cyclicSupertypeWithAlias2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/constVal")
    @TestDataPath("$PROJECT_ROOT")
    public class ConstVal {
      @Test
      @TestMetadata("const.kt")
      public void testConst() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/constVal/const.kt");
      }

      @Test
      @TestMetadata("constValNotTopLevelOrObject.kt")
      public void testConstValNotTopLevelOrObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/constVal/constValNotTopLevelOrObject.kt");
      }

      @Test
      @TestMetadata("constValWithGetterOrDelegate.kt")
      public void testConstValWithGetterOrDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/constVal/constValWithGetterOrDelegate.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/constructors")
    @TestDataPath("$PROJECT_ROOT")
    public class Constructors {
      @Test
      @TestMetadata("erroneousDelegatedConstructorCall.kt")
      public void testErroneousDelegatedConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/constructors/erroneousDelegatedConstructorCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class ContextParameters {
      @Test
      @TestMetadata("callableReference.kt")
      public void testCallableReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/callableReference.kt");
      }

      @Test
      @TestMetadata("contextLambda.kt")
      public void testContextLambda() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/contextLambda.kt");
      }

      @Test
      @TestMetadata("smoke.kt")
      public void testSmoke() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/smoke.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics")
      @TestDataPath("$PROJECT_ROOT")
      public class Diagnostics {
        @Test
        @TestMetadata("contextParameterSyntaxWithoutLanguageFeature.kt")
        public void testContextParameterSyntaxWithoutLanguageFeature() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/contextParameterSyntaxWithoutLanguageFeature.kt");
        }

        @Test
        @TestMetadata("unsupportedContextParameters.kt")
        public void testUnsupportedContextParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/unsupportedContextParameters.kt");
        }

        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages")
        @TestDataPath("$PROJECT_ROOT")
        public class DeclarationAndUsages {
          @Test
          @TestMetadata("contextOnGetterSetter.kt")
          public void testContextOnGetterSetter() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/contextOnGetterSetter.kt");
          }

          @Test
          @TestMetadata("emptyContextName.kt")
          public void testEmptyContextName() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/emptyContextName.kt");
          }

          @Test
          @TestMetadata("emptyListOfContextParameters.kt")
          public void testEmptyListOfContextParameters() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/emptyListOfContextParameters.kt");
          }

          @Test
          @TestMetadata("initializerInProperty.kt")
          public void testInitializerInProperty() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/initializerInProperty.kt");
          }

          @Test
          @TestMetadata("inlineForTypeWithContext.kt")
          public void testInlineForTypeWithContext() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/inlineForTypeWithContext.kt");
          }

          @Test
          @TestMetadata("multipleContextsWithTheSameType.kt")
          public void testMultipleContextsWithTheSameType() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/multipleContextsWithTheSameType.kt");
          }

          @Test
          @TestMetadata("nameClashes.kt")
          public void testNameClashes() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/nameClashes.kt");
          }

          @Test
          @TestMetadata("onClassifierDeclaration.kt")
          public void testOnClassifierDeclaration() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/onClassifierDeclaration.kt");
          }

          @Test
          @TestMetadata("onConstructor.kt")
          public void testOnConstructor() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/onConstructor.kt");
          }

          @Test
          @TestMetadata("parameterModifiersOnContextParameter.kt")
          public void testParameterModifiersOnContextParameter() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/parameterModifiersOnContextParameter.kt");
          }

          @Test
          @TestMetadata("parameterWithDefault.kt")
          public void testParameterWithDefault() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/parameterWithDefault.kt");
          }

          @Test
          @TestMetadata("usageWithoutContext.kt")
          public void testUsageWithoutContext() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/usageWithoutContext.kt");
          }

          @Test
          @TestMetadata("usageWithoutContextForMultipleParameters.kt")
          public void testUsageWithoutContextForMultipleParameters() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/usageWithoutContextForMultipleParameters.kt");
          }

          @Test
          @TestMetadata("valVarOnContextParameter.kt")
          public void testValVarOnContextParameter() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/valVarOnContextParameter.kt");
          }

          @Test
          @TestMetadata("visibilityOfContextTypeOnFunction.kt")
          public void testVisibilityOfContextTypeOnFunction() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contextParameters/diagnostics/declarationAndUsages/visibilityOfContextTypeOnFunction.kt");
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Test
      @TestMetadata("disabledFeature.kt")
      public void testDisabledFeature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/contracts/disabledFeature.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    public class Diagnostics {
      @Test
      @TestMetadata("abstractSuperCall.kt")
      public void testAbstractSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/abstractSuperCall.kt");
      }

      @Test
      @TestMetadata("abstractSuperCallInPresenseOfNonAbstractMethodInParent.kt")
      public void testAbstractSuperCallInPresenseOfNonAbstractMethodInParent() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/abstractSuperCallInPresenseOfNonAbstractMethodInParent.kt");
      }

      @Test
      @TestMetadata("annotationArgumentKClassLiteralTypeError.kt")
      public void testAnnotationArgumentKClassLiteralTypeError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/annotationArgumentKClassLiteralTypeError.kt");
      }

      @Test
      @TestMetadata("annotationArgumentMustBeConst.kt")
      public void testAnnotationArgumentMustBeConst() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/annotationArgumentMustBeConst.kt");
      }

      @Test
      @TestMetadata("annotationArgumentMustBeEnumConst.kt")
      public void testAnnotationArgumentMustBeEnumConst() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/annotationArgumentMustBeEnumConst.kt");
      }

      @Test
      @TestMetadata("annotationArgumentMustBeKClassLiteral.kt")
      public void testAnnotationArgumentMustBeKClassLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/annotationArgumentMustBeKClassLiteral.kt");
      }

      @Test
      @TestMetadata("annotationClassMember.kt")
      public void testAnnotationClassMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/annotationClassMember.kt");
      }

      @Test
      @TestMetadata("anonymousObjectByDelegate.kt")
      public void testAnonymousObjectByDelegate() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/anonymousObjectByDelegate.kt");
      }

      @Test
      @TestMetadata("classInSupertypeForEnum.kt")
      public void testClassInSupertypeForEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/classInSupertypeForEnum.kt");
      }

      @Test
      @TestMetadata("conflictingOverloads.kt")
      public void testConflictingOverloads() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/conflictingOverloads.kt");
      }

      @Test
      @TestMetadata("conflictingProjection.kt")
      public void testConflictingProjection() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/conflictingProjection.kt");
      }

      @Test
      @TestMetadata("constructorInInterface.kt")
      public void testConstructorInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/constructorInInterface.kt");
      }

      @Test
      @TestMetadata("cyclicConstructorDelegationCall.kt")
      public void testCyclicConstructorDelegationCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/cyclicConstructorDelegationCall.kt");
      }

      @Test
      @TestMetadata("delegationInInterface.kt")
      public void testDelegationInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/delegationInInterface.kt");
      }

      @Test
      @TestMetadata("delegationSuperCallInEnumConstructor.kt")
      public void testDelegationSuperCallInEnumConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/delegationSuperCallInEnumConstructor.kt");
      }

      @Test
      @TestMetadata("explicitDelegationCallRequired.kt")
      public void testExplicitDelegationCallRequired() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/explicitDelegationCallRequired.kt");
      }

      @Test
      @TestMetadata("inapplicableLateinitModifier.kt")
      public void testInapplicableLateinitModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/inapplicableLateinitModifier.kt");
      }

      @Test
      @TestMetadata("incompatibleModifiers.kt")
      public void testIncompatibleModifiers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/incompatibleModifiers.kt");
      }

      @Test
      @TestMetadata("infixFunctions.kt")
      public void testInfixFunctions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/infixFunctions.kt");
      }

      @Test
      @TestMetadata("instanceAccessBeforeSuperCall.kt")
      public void testInstanceAccessBeforeSuperCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/instanceAccessBeforeSuperCall.kt");
      }

      @Test
      @TestMetadata("instanceAccessBeforeSuperCallErrorOnRed.kt")
      public void testInstanceAccessBeforeSuperCallErrorOnRed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/instanceAccessBeforeSuperCallErrorOnRed.kt");
      }

      @Test
      @TestMetadata("interfaceWithSuperclass.kt")
      public void testInterfaceWithSuperclass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/interfaceWithSuperclass.kt");
      }

      @Test
      @TestMetadata("javaInheritsPrivateKtClass2.kt")
      public void testJavaInheritsPrivateKtClass2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/javaInheritsPrivateKtClass2.kt");
      }

      @Test
      @TestMetadata("javaInheritsPrivateKtClassDisabled.kt")
      public void testJavaInheritsPrivateKtClassDisabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/javaInheritsPrivateKtClassDisabled.kt");
      }

      @Test
      @TestMetadata("javaInheritsPrivateKtClassEnabled.kt")
      public void testJavaInheritsPrivateKtClassEnabled() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/javaInheritsPrivateKtClassEnabled.kt");
      }

      @Test
      @TestMetadata("localAnnotationClass.kt")
      public void testLocalAnnotationClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/localAnnotationClass.kt");
      }

      @Test
      @TestMetadata("localEntitytNotAllowed.kt")
      public void testLocalEntitytNotAllowed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/localEntitytNotAllowed.kt");
      }

      @Test
      @TestMetadata("manyCompanionObjects.kt")
      public void testManyCompanionObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/manyCompanionObjects.kt");
      }

      @Test
      @TestMetadata("methodOfAnyImplementedInInterface.kt")
      public void testMethodOfAnyImplementedInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/methodOfAnyImplementedInInterface.kt");
      }

      @Test
      @TestMetadata("multipleBounds.kt")
      public void testMultipleBounds() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/multipleBounds.kt");
      }

      @Test
      @TestMetadata("nonConstValInAnnotationArgument.kt")
      public void testNonConstValInAnnotationArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/nonConstValInAnnotationArgument.kt");
      }

      @Test
      @TestMetadata("notASupertype.kt")
      public void testNotASupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/notASupertype.kt");
      }

      @Test
      @TestMetadata("primaryConstructorParametersInSecondaryConstructor.kt")
      public void testPrimaryConstructorParametersInSecondaryConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/primaryConstructorParametersInSecondaryConstructor.kt");
      }

      @Test
      @TestMetadata("primaryConstructorRequiredForDataClass.kt")
      public void testPrimaryConstructorRequiredForDataClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/primaryConstructorRequiredForDataClass.kt");
      }

      @Test
      @TestMetadata("projectionsOnNonClassTypeArguments.kt")
      public void testProjectionsOnNonClassTypeArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/projectionsOnNonClassTypeArguments.kt");
      }

      @Test
      @TestMetadata("propertyTypeMismatchOnOverride.kt")
      public void testPropertyTypeMismatchOnOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/propertyTypeMismatchOnOverride.kt");
      }

      @Test
      @TestMetadata("qualifiedSupertypeExtendedByOtherSupertype.kt")
      public void testQualifiedSupertypeExtendedByOtherSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/qualifiedSupertypeExtendedByOtherSupertype.kt");
      }

      @Test
      @TestMetadata("recursiveProblemWithSyntaxError.kt")
      public void testRecursiveProblemWithSyntaxError() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/recursiveProblemWithSyntaxError.kt");
      }

      @Test
      @TestMetadata("repeatedModifier.kt")
      public void testRepeatedModifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/repeatedModifier.kt");
      }

      @Test
      @TestMetadata("returnTypeMismatchOnOverride.kt")
      public void testReturnTypeMismatchOnOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/returnTypeMismatchOnOverride.kt");
      }

      @Test
      @TestMetadata("sealedClassConstructorCall.kt")
      public void testSealedClassConstructorCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/sealedClassConstructorCall.kt");
      }

      @Test
      @TestMetadata("sealedSupertype.kt")
      public void testSealedSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/sealedSupertype.kt");
      }

      @Test
      @TestMetadata("superIsNotAnExpression.kt")
      public void testSuperIsNotAnExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/superIsNotAnExpression.kt");
      }

      @Test
      @TestMetadata("superNotAvailable.kt")
      public void testSuperNotAvailable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/superNotAvailable.kt");
      }

      @Test
      @TestMetadata("superclassNotAccessibleFromInterface.kt")
      public void testSuperclassNotAccessibleFromInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/superclassNotAccessibleFromInterface.kt");
      }

      @Test
      @TestMetadata("supertypeInitializedInInterface.kt")
      public void testSupertypeInitializedInInterface() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/supertypeInitializedInInterface.kt");
      }

      @Test
      @TestMetadata("supertypeInitializedWithoutPrimaryConstructor.kt")
      public void testSupertypeInitializedWithoutPrimaryConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/supertypeInitializedWithoutPrimaryConstructor.kt");
      }

      @Test
      @TestMetadata("suspendAnonymousFunction.kt")
      public void testSuspendAnonymousFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/suspendAnonymousFunction.kt");
      }

      @Test
      @TestMetadata("typeArgumentsNotAllowed.kt")
      public void testTypeArgumentsNotAllowed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/typeArgumentsNotAllowed.kt");
      }

      @Test
      @TestMetadata("typeOfAnnotationMember.kt")
      public void testTypeOfAnnotationMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/typeOfAnnotationMember.kt");
      }

      @Test
      @TestMetadata("typeParametersInEnum.kt")
      public void testTypeParametersInEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/typeParametersInEnum.kt");
      }

      @Test
      @TestMetadata("typeParametersInObject.kt")
      public void testTypeParametersInObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/typeParametersInObject.kt");
      }

      @Test
      @TestMetadata("upperBoundViolated.kt")
      public void testUpperBoundViolated() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/upperBoundViolated.kt");
      }

      @Test
      @TestMetadata("valOnAnnotationParameter.kt")
      public void testValOnAnnotationParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/valOnAnnotationParameter.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/diagnostics/functionAsExpression")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionAsExpression {
        @Test
        @TestMetadata("Parameters.kt")
        public void testParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/diagnostics/functionAsExpression/Parameters.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness")
    @TestDataPath("$PROJECT_ROOT")
    public class Exhaustiveness {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative")
      @TestDataPath("$PROJECT_ROOT")
      public class Negative {
        @Test
        @TestMetadata("missingBooleanBranch.kt")
        public void testMissingBooleanBranch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative/missingBooleanBranch.kt");
        }

        @Test
        @TestMetadata("missingElse.kt")
        public void testMissingElse() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative/missingElse.kt");
        }

        @Test
        @TestMetadata("missingEnumEntry.kt")
        public void testMissingEnumEntry() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative/missingEnumEntry.kt");
        }

        @Test
        @TestMetadata("missingSealedInheritor.kt")
        public void testMissingSealedInheritor() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/negative/missingSealedInheritor.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive")
      @TestDataPath("$PROJECT_ROOT")
      public class Positive {
        @Test
        @TestMetadata("exhaustiveness_boolean.kt")
        public void testExhaustiveness_boolean() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_boolean.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_enum.kt")
        public void testExhaustiveness_enum() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_enum.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_enumJava.kt")
        public void testExhaustiveness_enumJava() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_enumJava.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_sealedClass.kt")
        public void testExhaustiveness_sealedClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_sealedClass.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_sealedSubClass.kt")
        public void testExhaustiveness_sealedSubClass() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_sealedSubClass.kt");
        }

        @Test
        @TestMetadata("exhaustiveness_smartcastedBoolean.kt")
        public void testExhaustiveness_smartcastedBoolean() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/exhaustiveness/positive/exhaustiveness_smartcastedBoolean.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions")
    @TestDataPath("$PROJECT_ROOT")
    public class Expresssions {
      @Test
      @TestMetadata("access.kt")
      public void testAccess() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/access.kt");
      }

      @Test
      @TestMetadata("annotationWithReturn.kt")
      public void testAnnotationWithReturn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/annotationWithReturn.kt");
      }

      @Test
      @TestMetadata("annotations.kt")
      public void testAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/annotations.kt");
      }

      @Test
      @TestMetadata("baseQualifier.kt")
      public void testBaseQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/baseQualifier.kt");
      }

      @Test
      @TestMetadata("CallBasedInExpressionGenerator.kt")
      public void testCallBasedInExpressionGenerator() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/CallBasedInExpressionGenerator.kt");
      }

      @Test
      @TestMetadata("checkArguments.kt")
      public void testCheckArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/checkArguments.kt");
      }

      @Test
      @TestMetadata("classifierAccessFromCompanion.kt")
      public void testClassifierAccessFromCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/classifierAccessFromCompanion.kt");
      }

      @Test
      @TestMetadata("companion.kt")
      public void testCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/companion.kt");
      }

      @Test
      @TestMetadata("enumEntryUse.kt")
      public void testEnumEntryUse() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/enumEntryUse.kt");
      }

      @Test
      @TestMetadata("errCallable.kt")
      public void testErrCallable() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/errCallable.kt");
      }

      @Test
      @TestMetadata("genericDecorator.kt")
      public void testGenericDecorator() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/genericDecorator.kt");
      }

      @Test
      @TestMetadata("genericDescriptor.kt")
      public void testGenericDescriptor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/genericDescriptor.kt");
      }

      @Test
      @TestMetadata("importedReceiver.kt")
      public void testImportedReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/importedReceiver.kt");
      }

      @Test
      @TestMetadata("innerQualifier.kt")
      public void testInnerQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/innerQualifier.kt");
      }

      @Test
      @TestMetadata("localObjects.kt")
      public void testLocalObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/localObjects.kt");
      }

      @Test
      @TestMetadata("nestedObjects.kt")
      public void testNestedObjects() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/nestedObjects.kt");
      }

      @Test
      @TestMetadata("nestedVisibility.kt")
      public void testNestedVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/nestedVisibility.kt");
      }

      @Test
      @TestMetadata("objectVsProperty.kt")
      public void testObjectVsProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/objectVsProperty.kt");
      }

      @Test
      @TestMetadata("parenthesizedSafeCallsAndOperators.kt")
      public void testParenthesizedSafeCallsAndOperators() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/parenthesizedSafeCallsAndOperators.kt");
      }

      @Test
      @TestMetadata("privateObjectLiteral.kt")
      public void testPrivateObjectLiteral() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/privateObjectLiteral.kt");
      }

      @Test
      @TestMetadata("privateVisibility.kt")
      public void testPrivateVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/privateVisibility.kt");
      }

      @Test
      @TestMetadata("propertyAccessWithExplicitTypeArguments.kt")
      public void testPropertyAccessWithExplicitTypeArguments() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/propertyAccessWithExplicitTypeArguments.kt");
      }

      @Test
      @TestMetadata("protectedVisibility.kt")
      public void testProtectedVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/protectedVisibility.kt");
      }

      @Test
      @TestMetadata("receiverConsistency.kt")
      public void testReceiverConsistency() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/receiverConsistency.kt");
      }

      @Test
      @TestMetadata("syntheticSmartCast.kt")
      public void testSyntheticSmartCast() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/syntheticSmartCast.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/inference")
      @TestDataPath("$PROJECT_ROOT")
      public class Inference {
        @Test
        @TestMetadata("typeParameters.kt")
        public void testTypeParameters() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/inference/typeParameters.kt");
        }

        @Test
        @TestMetadata("typeParameters2.kt")
        public void testTypeParameters2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/inference/typeParameters2.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/invoke")
      @TestDataPath("$PROJECT_ROOT")
      public class Invoke {
        @Test
        @TestMetadata("explicitReceiver2.kt")
        public void testExplicitReceiver2() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/explicitReceiver2.kt");
        }

        @Test
        @TestMetadata("farInvokeExtension.kt")
        public void testFarInvokeExtension() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/farInvokeExtension.kt");
        }

        @Test
        @TestMetadata("implicitTypeOrder.kt")
        public void testImplicitTypeOrder() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/implicitTypeOrder.kt");
        }

        @Test
        @TestMetadata("threeReceivers.kt")
        public void testThreeReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/threeReceivers.kt");
        }

        @Test
        @TestMetadata("threeReceiversCorrect.kt")
        public void testThreeReceiversCorrect() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/invoke/threeReceiversCorrect.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/expresssions/operators")
      @TestDataPath("$PROJECT_ROOT")
      public class Operators {
        @Test
        @TestMetadata("binaryOpIntStackOverflow.kt")
        public void testBinaryOpIntStackOverflow() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/operators/binaryOpIntStackOverflow.kt");
        }

        @Test
        @TestMetadata("plusAndPlusAssign.kt")
        public void testPlusAndPlusAssign() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/operators/plusAndPlusAssign.kt");
        }

        @Test
        @TestMetadata("plusAssign.kt")
        public void testPlusAssign() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/expresssions/operators/plusAssign.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers")
    @TestDataPath("$PROJECT_ROOT")
    public class ExtraCheckers {
      @Test
      @TestMetadata("CanBeValChecker.kt")
      public void testCanBeValChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/CanBeValChecker.kt");
      }

      @Test
      @TestMetadata("kt72164.kt")
      public void testKt72164() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/kt72164.kt");
      }

      @Test
      @TestMetadata("kt72537.kt")
      public void testKt72537() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/kt72537.kt");
      }

      @Test
      @TestMetadata("RedundantModalityModifierChecker.kt")
      public void testRedundantModalityModifierChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantModalityModifierChecker.kt");
      }

      @Test
      @TestMetadata("RedundantReturnUnitTypeChecker.kt")
      public void testRedundantReturnUnitTypeChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantReturnUnitTypeChecker.kt");
      }

      @Test
      @TestMetadata("RedundantSetterParameterTypeChecker.kt")
      public void testRedundantSetterParameterTypeChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantSetterParameterTypeChecker.kt");
      }

      @Test
      @TestMetadata("RedundantVisibilityModifierChecker.kt")
      public void testRedundantVisibilityModifierChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantVisibilityModifierChecker.kt");
      }

      @Test
      @TestMetadata("RedundantVisibilityModifierCheckerForInnerComponents.kt")
      public void testRedundantVisibilityModifierCheckerForInnerComponents() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantVisibilityModifierCheckerForInnerComponents.kt");
      }

      @Test
      @TestMetadata("RedundantVisibilityModifierCheckerWithExplicitApiMode.kt")
      public void testRedundantVisibilityModifierCheckerWithExplicitApiMode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/RedundantVisibilityModifierCheckerWithExplicitApiMode.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment")
      @TestDataPath("$PROJECT_ROOT")
      public class CanBeReplacedWithOperatorAssignment {
        @Test
        @TestMetadata("mutableList.kt")
        public void testMutableList() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/canBeReplacedWithOperatorAssignment/mutableList.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused")
      @TestDataPath("$PROJECT_ROOT")
      public class Unused {
        @Test
        @TestMetadata("usedInAnnotationArguments.kt")
        public void testUsedInAnnotationArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/extraCheckers/unused/usedInAnnotationArguments.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/fromBuilder")
    @TestDataPath("$PROJECT_ROOT")
    public class FromBuilder {
      @Test
      @TestMetadata("enums.kt")
      public void testEnums() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/fromBuilder/enums.kt");
      }

      @Test
      @TestMetadata("simpleClass.kt")
      public void testSimpleClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/fromBuilder/simpleClass.kt");
      }

      @Test
      @TestMetadata("typeParameters.kt")
      public void testTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/fromBuilder/typeParameters.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("equals.kt")
      public void testEquals() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/equals.kt");
      }

      @Test
      @TestMetadata("flexibleTypeAtRightSideOfElvis.kt")
      public void testFlexibleTypeAtRightSideOfElvis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/flexibleTypeAtRightSideOfElvis.kt");
      }

      @Test
      @TestMetadata("intersectionTypesInConstraints.kt")
      public void testIntersectionTypesInConstraints() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/intersectionTypesInConstraints.kt");
      }

      @Test
      @TestMetadata("kt40131.kt")
      public void testKt40131() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/kt40131.kt");
      }

      @Test
      @TestMetadata("nullableIntegerLiteralType.kt")
      public void testNullableIntegerLiteralType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/nullableIntegerLiteralType.kt");
      }

      @Test
      @TestMetadata("overloadResolutionByLambdaArgumentType.kt")
      public void testOverloadResolutionByLambdaArgumentType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/overloadResolutionByLambdaArgumentType.kt");
      }

      @Test
      @TestMetadata("receiverWithCapturedType.kt")
      public void testReceiverWithCapturedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/receiverWithCapturedType.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/inference/pcla")
      @TestDataPath("$PROJECT_ROOT")
      public class Pcla {
        @Test
        @TestMetadata("doubleSquareBracketsInBuilderArgument.kt")
        public void testDoubleSquareBracketsInBuilderArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inference/pcla/doubleSquareBracketsInBuilderArgument.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/inlineClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InlineClasses {
      @Test
      @TestMetadata("inlineClassConstructor.kt")
      public void testInlineClassConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inlineClasses/inlineClassConstructor.kt");
      }

      @Test
      @TestMetadata("inlineClassDeclaration.kt")
      public void testInlineClassDeclaration() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inlineClasses/inlineClassDeclaration.kt");
      }

      @Test
      @TestMetadata("inlineClassMembers.kt")
      public void testInlineClassMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inlineClasses/inlineClassMembers.kt");
      }

      @Test
      @TestMetadata("reservedMethodsInInterfaces.kt")
      public void testReservedMethodsInInterfaces() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/inlineClasses/reservedMethodsInInterfaces.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/innerClasses")
    @TestDataPath("$PROJECT_ROOT")
    public class InnerClasses {
      @Test
      @TestMetadata("inner.kt")
      public void testInner() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/innerClasses/inner.kt");
      }

      @Test
      @TestMetadata("innerTypes.kt")
      public void testInnerTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/innerClasses/innerTypes.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/innerClasses/simple.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/multifile")
    @TestDataPath("$PROJECT_ROOT")
    public class Multifile {
      @Test
      @TestMetadata("Annotations.kt")
      public void testAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/multifile/Annotations.kt");
      }

      @Test
      @TestMetadata("ByteArray.kt")
      public void testByteArray() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/multifile/ByteArray.kt");
      }

      @Test
      @TestMetadata("sealedStarImport.kt")
      public void testSealedStarImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/multifile/sealedStarImport.kt");
      }

      @Test
      @TestMetadata("simpleStarImport.kt")
      public void testSimpleStarImport() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/multifile/simpleStarImport.kt");
      }

      @Test
      @TestMetadata("TypeAliasExpansion.kt")
      public void testTypeAliasExpansion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/multifile/TypeAliasExpansion.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/nestedTypeAliases")
    @TestDataPath("$PROJECT_ROOT")
    public class NestedTypeAliases {
      @Test
      @TestMetadata("nestedTypeAliasVisibility.kt")
      public void testNestedTypeAliasVisibility() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/nestedTypeAliases/nestedTypeAliasVisibility.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/overrides")
    @TestDataPath("$PROJECT_ROOT")
    public class Overrides {
      @Test
      @TestMetadata("protobufExt.kt")
      public void testProtobufExt() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/overrides/protobufExt.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/overrides/simple.kt");
      }

      @Test
      @TestMetadata("simpleMostSpecific.kt")
      public void testSimpleMostSpecific() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/overrides/simpleMostSpecific.kt");
      }

      @Test
      @TestMetadata("supertypeGenericsComplex.kt")
      public void testSupertypeGenericsComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/overrides/supertypeGenericsComplex.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/problems")
    @TestDataPath("$PROJECT_ROOT")
    public class Problems {
      @Test
      @TestMetadata("classLiteralWithExclExcl.kt")
      public void testClassLiteralWithExclExcl() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/classLiteralWithExclExcl.kt");
      }

      @Test
      @TestMetadata("compilerPhase.kt")
      public void testCompilerPhase() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/compilerPhase.kt");
      }

      @Test
      @TestMetadata("definitelyNotNullAndOriginalType.kt")
      public void testDefinitelyNotNullAndOriginalType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/definitelyNotNullAndOriginalType.kt");
      }

      @Test
      @TestMetadata("emptySelectorInQualifiedExpression.kt")
      public void testEmptySelectorInQualifiedExpression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/emptySelectorInQualifiedExpression.kt");
      }

      @Test
      @TestMetadata("enumEntryFieldShadow.kt")
      public void testEnumEntryFieldShadow() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/enumEntryFieldShadow.kt");
      }

      @Test
      @TestMetadata("inaccessibleJavaGetter.kt")
      public void testInaccessibleJavaGetter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/inaccessibleJavaGetter.kt");
      }

      @Test
      @TestMetadata("incompleteUserType.kt")
      public void testIncompleteUserType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/incompleteUserType.kt");
      }

      @Test
      @TestMetadata("incompleteUserTypeWithUnresovledTypeArgument.kt")
      public void testIncompleteUserTypeWithUnresovledTypeArgument() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/incompleteUserTypeWithUnresovledTypeArgument.kt");
      }

      @Test
      @TestMetadata("incompleteWhen.kt")
      public void testIncompleteWhen() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/incompleteWhen.kt");
      }

      @Test
      @TestMetadata("incorrectGenericLambdaProperty.kt")
      public void testIncorrectGenericLambdaProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/incorrectGenericLambdaProperty.kt");
      }

      @Test
      @TestMetadata("invalidCode.kt")
      public void testInvalidCode() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/invalidCode.kt");
      }

      @Test
      @TestMetadata("javaQualifier.kt")
      public void testJavaQualifier() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/javaQualifier.kt");
      }

      @Test
      @TestMetadata("multipleJavaClassesInOneFile.kt")
      public void testMultipleJavaClassesInOneFile() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/multipleJavaClassesInOneFile.kt");
      }

      @Test
      @TestMetadata("objectDerivedFromInnerClass.kt")
      public void testObjectDerivedFromInnerClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/objectDerivedFromInnerClass.kt");
      }

      @Test
      @TestMetadata("primaryConstructorParameterWithoutReturnType.kt")
      public void testPrimaryConstructorParameterWithoutReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/primaryConstructorParameterWithoutReturnType.kt");
      }

      @Test
      @TestMetadata("secondaryConstructorCfg.kt")
      public void testSecondaryConstructorCfg() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/secondaryConstructorCfg.kt");
      }

      @Test
      @TestMetadata("typeArgumentsOnThis.kt")
      public void testTypeArgumentsOnThis() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/problems/typeArgumentsOnThis.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      @TestMetadata("assignToStarProjectedType.kt")
      public void testAssignToStarProjectedType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/assignToStarProjectedType.kt");
      }

      @Test
      @TestMetadata("javaAccessorConversion.kt")
      public void testJavaAccessorConversion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/javaAccessorConversion.kt");
      }

      @Test
      @TestMetadata("javaAccessorsComplex.kt")
      public void testJavaAccessorsComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/javaAccessorsComplex.kt");
      }

      @Test
      @TestMetadata("kotlinOverridesJavaComplex.kt")
      public void testKotlinOverridesJavaComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/kotlinOverridesJavaComplex.kt");
      }

      @Test
      @TestMetadata("noBackingFieldInProperty.kt")
      public void testNoBackingFieldInProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/noBackingFieldInProperty.kt");
      }

      @Test
      @TestMetadata("syntheticPropertiesForJavaAnnotations.kt")
      public void testSyntheticPropertiesForJavaAnnotations() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/properties/syntheticPropertiesForJavaAnnotations.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/propertyVsField")
    @TestDataPath("$PROJECT_ROOT")
    public class PropertyVsField {
      @Test
      @TestMetadata("propertyFieldShadow.kt")
      public void testPropertyFieldShadow() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/propertyVsField/propertyFieldShadow.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/references")
    @TestDataPath("$PROJECT_ROOT")
    public class References {
      @Test
      @TestMetadata("ambigousParenthesizedReference.kt")
      public void testAmbigousParenthesizedReference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/ambigousParenthesizedReference.kt");
      }

      @Test
      @TestMetadata("incorrectReferenceOnInnerClassMember.kt")
      public void testIncorrectReferenceOnInnerClassMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/incorrectReferenceOnInnerClassMember.kt");
      }

      @Test
      @TestMetadata("leakedImplicitType.kt")
      public void testLeakedImplicitType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/leakedImplicitType.kt");
      }

      @Test
      @TestMetadata("referenceToExtension.kt")
      public void testReferenceToExtension() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/referenceToExtension.kt");
      }

      @Test
      @TestMetadata("referenceToField.kt")
      public void testReferenceToField() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/referenceToField.kt");
      }

      @Test
      @TestMetadata("unresovledReferenceInFinally.kt")
      public void testUnresovledReferenceInFinally() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/references/unresovledReferenceInFinally.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/samConstructors")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConstructors {
      @Test
      @TestMetadata("genericSam.kt")
      public void testGenericSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConstructors/genericSam.kt");
      }

      @Test
      @TestMetadata("genericSamInferenceFromExpectType.kt")
      public void testGenericSamInferenceFromExpectType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConstructors/genericSamInferenceFromExpectType.kt");
      }

      @Test
      @TestMetadata("realConstructorFunction.kt")
      public void testRealConstructorFunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConstructors/realConstructorFunction.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/samConversions")
    @TestDataPath("$PROJECT_ROOT")
    public class SamConversions {
      @Test
      @TestMetadata("genericSam.kt")
      public void testGenericSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConversions/genericSam.kt");
      }

      @Test
      @TestMetadata("kotlinSam.kt")
      public void testKotlinSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConversions/kotlinSam.kt");
      }

      @Test
      @TestMetadata("notSamBecauseOfSupertype.kt")
      public void testNotSamBecauseOfSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/samConversions/notSamBecauseOfSupertype.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/scopes")
    @TestDataPath("$PROJECT_ROOT")
    public class Scopes {
      @Test
      @TestMetadata("specialFunctionInJava_1.kt")
      public void testSpecialFunctionInJava_1() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/scopes/specialFunctionInJava_1.kt");
      }

      @Test
      @TestMetadata("specialFunctionInJava_2.kt")
      public void testSpecialFunctionInJava_2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/scopes/specialFunctionInJava_2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/scripts")
    @TestDataPath("$PROJECT_ROOT")
    public class Scripts {
      @Test
      @TestMetadata("scriptsDeclsMayConflict.kts")
      public void testScriptsDeclsMayConflict() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/scripts/scriptsDeclsMayConflict.kts");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts")
    @TestDataPath("$PROJECT_ROOT")
    public class Smartcasts {
      @Test
      @TestMetadata("accessToMemberAfterReceiverReassignment.kt")
      public void testAccessToMemberAfterReceiverReassignment() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/accessToMemberAfterReceiverReassignment.kt");
      }

      @Test
      @TestMetadata("bangbang.kt")
      public void testBangbang() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/bangbang.kt");
      }

      @Test
      @TestMetadata("casts.kt")
      public void testCasts() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/casts.kt");
      }

      @Test
      @TestMetadata("contractSafeCall.kt")
      public void testContractSafeCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/contractSafeCall.kt");
      }

      @Test
      @TestMetadata("equalsAndIdentity.kt")
      public void testEqualsAndIdentity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/equalsAndIdentity.kt");
      }

      @Test
      @TestMetadata("kt50875.kt")
      public void testKt50875() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/kt50875.kt");
      }

      @Test
      @TestMetadata("nullability.kt")
      public void testNullability() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/nullability.kt");
      }

      @Test
      @TestMetadata("orInWhenBranch.kt")
      public void testOrInWhenBranch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/orInWhenBranch.kt");
      }

      @Test
      @TestMetadata("smartcastToNothing.kt")
      public void testSmartcastToNothing() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastToNothing.kt");
      }

      @Test
      @TestMetadata("smartcastsFromEquals_differentModule.kt")
      public void testSmartcastsFromEquals_differentModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastsFromEquals_differentModule.kt");
      }

      @Test
      @TestMetadata("smartcastsFromEquals_sameModule.kt")
      public void testSmartcastsFromEquals_sameModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/smartcastsFromEquals_sameModule.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/booleans")
      @TestDataPath("$PROJECT_ROOT")
      public class Booleans {
        @Test
        @TestMetadata("booleanElvisBoundSmartcast.kt")
        public void testBooleanElvisBoundSmartcast() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/booleans/booleanElvisBoundSmartcast.kt");
        }

        @Test
        @TestMetadata("booleanOperators.kt")
        public void testBooleanOperators() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/booleans/booleanOperators.kt");
        }

        @Test
        @TestMetadata("equalsToBoolean.kt")
        public void testEqualsToBoolean() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/booleans/equalsToBoolean.kt");
        }

        @Test
        @TestMetadata("jumpFromRhsOfOperator.kt")
        public void testJumpFromRhsOfOperator() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/booleans/jumpFromRhsOfOperator.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts")
      @TestDataPath("$PROJECT_ROOT")
      public class BoundSmartcasts {
        @Test
        @TestMetadata("assignToBoundSmartcastedVariable.kt")
        public void testAssignToBoundSmartcastedVariable() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/assignToBoundSmartcastedVariable.kt");
        }

        @Test
        @TestMetadata("boundSmartcasts.kt")
        public void testBoundSmartcasts() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/boundSmartcasts.kt");
        }

        @Test
        @TestMetadata("boundSmartcastsInBranches.kt")
        public void testBoundSmartcastsInBranches() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/boundSmartcasts/boundSmartcastsInBranches.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures")
      @TestDataPath("$PROJECT_ROOT")
      public class ControlStructures {
        @Test
        @TestMetadata("returns.kt")
        public void testReturns() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/returns.kt");
        }

        @Test
        @TestMetadata("simpleIf.kt")
        public void testSimpleIf() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/controlStructures/simpleIf.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/lambdas")
      @TestDataPath("$PROJECT_ROOT")
      public class Lambdas {
        @Test
        @TestMetadata("inPlaceLambdas.kt")
        public void testInPlaceLambdas() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/lambdas/inPlaceLambdas.kt");
        }

        @Test
        @TestMetadata("lambdaInWhenBranch.kt")
        public void testLambdaInWhenBranch() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/lambdas/lambdaInWhenBranch.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/loops")
      @TestDataPath("$PROJECT_ROOT")
      public class Loops {
        @Test
        @TestMetadata("elvisAtTheEndOfLoop.kt")
        public void testElvisAtTheEndOfLoop() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/loops/elvisAtTheEndOfLoop.kt");
        }

        @Test
        @TestMetadata("endlessLoops.kt")
        public void testEndlessLoops() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/loops/endlessLoops.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/problems")
      @TestDataPath("$PROJECT_ROOT")
      public class Problems {
        @Test
        @TestMetadata("noSmartcastToNullableNothing.kt")
        public void testNoSmartcastToNullableNothing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/problems/noSmartcastToNullableNothing.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers")
      @TestDataPath("$PROJECT_ROOT")
      public class Receivers {
        @Test
        @TestMetadata("implicitReceivers.kt")
        public void testImplicitReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers/implicitReceivers.kt");
        }

        @Test
        @TestMetadata("mixingImplicitAndExplicitReceivers.kt")
        public void testMixingImplicitAndExplicitReceivers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/receivers/mixingImplicitAndExplicitReceivers.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls")
      @TestDataPath("$PROJECT_ROOT")
      public class SafeCalls {
        @Test
        @TestMetadata("assignSafeCall.kt")
        public void testAssignSafeCall() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/assignSafeCall.kt");
        }

        @Test
        @TestMetadata("safeCallAndEqualityToBool.kt")
        public void testSafeCallAndEqualityToBool() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/safeCallAndEqualityToBool.kt");
        }

        @Test
        @TestMetadata("safeCalls.kt")
        public void testSafeCalls() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/safeCalls.kt");
        }

        @Test
        @TestMetadata("unstableSmartCastOnSafeCallArgument.kt")
        public void testUnstableSmartCastOnSafeCallArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/safeCalls/unstableSmartCastOnSafeCallArgument.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolve/smartcasts/variables")
      @TestDataPath("$PROJECT_ROOT")
      public class Variables {
        @Test
        @TestMetadata("delayedAssignment.kt")
        public void testDelayedAssignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/variables/delayedAssignment.kt");
        }

        @Test
        @TestMetadata("smartcastAfterReassignment.kt")
        public void testSmartcastAfterReassignment() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/variables/smartcastAfterReassignment.kt");
        }

        @Test
        @TestMetadata("smartcastStoredInLocalVar.kt")
        public void testSmartcastStoredInLocalVar() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/smartcasts/variables/smartcastStoredInLocalVar.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/suppress")
    @TestDataPath("$PROJECT_ROOT")
    public class Suppress {
      @Test
      @TestMetadata("withSuppression.kt")
      public void testWithSuppression() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/suppress/withSuppression.kt");
      }

      @Test
      @TestMetadata("withSuppression2.kt")
      public void testWithSuppression2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/suppress/withSuppression2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/typeParameters")
    @TestDataPath("$PROJECT_ROOT")
    public class TypeParameters {
      @Test
      @TestMetadata("illFormed.kt")
      public void testIllFormed() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/typeParameters/illFormed.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/types")
    @TestDataPath("$PROJECT_ROOT")
    public class Types {
      @Test
      @TestMetadata("bareWithSubjectTypeAlias.kt")
      public void testBareWithSubjectTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/types/bareWithSubjectTypeAlias.kt");
      }

      @Test
      @TestMetadata("capturedParametersOfInnerClasses.kt")
      public void testCapturedParametersOfInnerClasses() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/types/capturedParametersOfInnerClasses.kt");
      }

      @Test
      @TestMetadata("castToBareType.kt")
      public void testCastToBareType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/types/castToBareType.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum")
    @TestDataPath("$PROJECT_ROOT")
    public class UnqualifiedEnum {
      @Test
      @TestMetadata("enumWithTheSameNameAsEntry.kt")
      public void testEnumWithTheSameNameAsEntry() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/enumWithTheSameNameAsEntry.kt");
      }

      @Test
      @TestMetadata("incorrectJava.kt")
      public void testIncorrectJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/incorrectJava.kt");
      }

      @Test
      @TestMetadata("notInsideBranches.kt")
      public void testNotInsideBranches() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/notInsideBranches.kt");
      }

      @Test
      @TestMetadata("priority.kt")
      public void testPriority() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/priority.kt");
      }

      @Test
      @TestMetadata("unqualifiedEnum.kt")
      public void testUnqualifiedEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/unqualifiedEnum/unqualifiedEnum.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/visibility")
    @TestDataPath("$PROJECT_ROOT")
    public class Visibility {
      @Test
      @TestMetadata("exposedFunctionParameterType.kt")
      public void testExposedFunctionParameterType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedFunctionParameterType.kt");
      }

      @Test
      @TestMetadata("exposedFunctionReturnType.kt")
      public void testExposedFunctionReturnType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedFunctionReturnType.kt");
      }

      @Test
      @TestMetadata("exposedPropertyType.kt")
      public void testExposedPropertyType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedPropertyType.kt");
      }

      @Test
      @TestMetadata("exposedSupertype.kt")
      public void testExposedSupertype() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedSupertype.kt");
      }

      @Test
      @TestMetadata("exposedTypeAlias.kt")
      public void testExposedTypeAlias() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedTypeAlias.kt");
      }

      @Test
      @TestMetadata("exposedTypeParameters.kt")
      public void testExposedTypeParameters() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/exposedTypeParameters.kt");
      }

      @Test
      @TestMetadata("protectedInCompanion.kt")
      public void testProtectedInCompanion() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/protectedInCompanion.kt");
      }

      @Test
      @TestMetadata("singletonConstructors.kt")
      public void testSingletonConstructors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/singletonConstructors.kt");
      }

      @Test
      @TestMetadata("visibilityWithOverrides.kt")
      public void testVisibilityWithOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/visibility/visibilityWithOverrides.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolve/withAllowedKotlinPackage")
    @TestDataPath("$PROJECT_ROOT")
    public class WithAllowedKotlinPackage {
      @Test
      @TestMetadata("extensionFunctionAddedToStdlib.kt")
      public void testExtensionFunctionAddedToStdlib() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolve/withAllowedKotlinPackage/extensionFunctionAddedToStdlib.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib")
  @TestDataPath("$PROJECT_ROOT")
  public class ResolveWithStdlib {
    @Test
    @TestMetadata("assignmentWithWrongLhs.kt")
    public void testAssignmentWithWrongLhs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/assignmentWithWrongLhs.kt");
    }

    @Test
    @TestMetadata("ClassIdDiagnosticRendering.kt")
    public void testClassIdDiagnosticRendering() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/ClassIdDiagnosticRendering.kt");
    }

    @Test
    @TestMetadata("errorsInUnreachable.kt")
    public void testErrorsInUnreachable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/errorsInUnreachable.kt");
    }

    @Test
    @TestMetadata("functionX.kt")
    public void testFunctionX() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/functionX.kt");
    }

    @Test
    @TestMetadata("incorrectDeprecation.kt")
    public void testIncorrectDeprecation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/incorrectDeprecation.kt");
    }

    @Test
    @TestMetadata("incorrectExtensionFunctionType.kt")
    public void testIncorrectExtensionFunctionType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/incorrectExtensionFunctionType.kt");
    }

    @Test
    @TestMetadata("incorrectLabelReference.kt")
    public void testIncorrectLabelReference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/incorrectLabelReference.kt");
    }

    @Test
    @TestMetadata("incorrectReturnFromNothingLambda.kt")
    public void testIncorrectReturnFromNothingLambda() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/incorrectReturnFromNothingLambda.kt");
    }

    @Test
    @TestMetadata("intersectDynamicAndString.kt")
    public void testIntersectDynamicAndString() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/intersectDynamicAndString.kt");
    }

    @Test
    @TestMetadata("kt54220.kt")
    public void testKt54220() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/kt54220.kt");
    }

    @Test
    @TestMetadata("listPlusAssign.kt")
    public void testListPlusAssign() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/listPlusAssign.kt");
    }

    @Test
    @TestMetadata("problems.kt")
    public void testProblems() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems.kt");
    }

    @Test
    @TestMetadata("repeatedAnnotations.kt")
    public void testRepeatedAnnotations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/repeatedAnnotations.kt");
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations")
    @TestDataPath("$PROJECT_ROOT")
    public class Annotations {
      @Test
      @TestMetadata("annotationDefaultTargetFirstOnly.kt")
      public void testAnnotationDefaultTargetFirstOnly() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations/annotationDefaultTargetFirstOnly.kt");
      }

      @Test
      @TestMetadata("annotationDefaultTargetFirstOnlyWarn.kt")
      public void testAnnotationDefaultTargetFirstOnlyWarn() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations/annotationDefaultTargetFirstOnlyWarn.kt");
      }

      @Test
      @TestMetadata("annotationDefaultTargetParamProperty.kt")
      public void testAnnotationDefaultTargetParamProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/annotations/annotationDefaultTargetParamProperty.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences")
    @TestDataPath("$PROJECT_ROOT")
    public class CallableReferences {
      @Test
      @TestMetadata("beyoundCalls.kt")
      public void testBeyoundCalls() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/beyoundCalls.kt");
      }

      @Test
      @TestMetadata("companions.kt")
      public void testCompanions() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/companions.kt");
      }

      @Test
      @TestMetadata("ifWithCR.kt")
      public void testIfWithCR() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/ifWithCR.kt");
      }

      @Test
      @TestMetadata("implicitTypes.kt")
      public void testImplicitTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/implicitTypes.kt");
      }

      @Test
      @TestMetadata("javaStatic.kt")
      public void testJavaStatic() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/javaStatic.kt");
      }

      @Test
      @TestMetadata("manyInnermanyOuterCandidatesAmbiguity.kt")
      public void testManyInnermanyOuterCandidatesAmbiguity() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/manyInnermanyOuterCandidatesAmbiguity.kt");
      }

      @Test
      @TestMetadata("referenceToJavaStdlib.kt")
      public void testReferenceToJavaStdlib() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/referenceToJavaStdlib.kt");
      }

      @Test
      @TestMetadata("sam.kt")
      public void testSam() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/sam.kt");
      }

      @Test
      @TestMetadata("simpleClassReceiver.kt")
      public void testSimpleClassReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/simpleClassReceiver.kt");
      }

      @Test
      @TestMetadata("simpleExpressionReceiver.kt")
      public void testSimpleExpressionReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/simpleExpressionReceiver.kt");
      }

      @Test
      @TestMetadata("simpleNoReceiver.kt")
      public void testSimpleNoReceiver() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/simpleNoReceiver.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests")
      @TestDataPath("$PROJECT_ROOT")
      public class FromBasicDiagnosticTests {
        @Test
        @TestMetadata("ambiguityWhenNoApplicableCallableReferenceCandidate.kt")
        public void testAmbiguityWhenNoApplicableCallableReferenceCandidate() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/ambiguityWhenNoApplicableCallableReferenceCandidate.kt");
        }

        @Test
        @TestMetadata("chooseCallableReferenceDependingOnInferredReceiver.kt")
        public void testChooseCallableReferenceDependingOnInferredReceiver() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/chooseCallableReferenceDependingOnInferredReceiver.kt");
        }

        @Test
        @TestMetadata("eagerAndPostponedCallableReferences.kt")
        public void testEagerAndPostponedCallableReferences() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/eagerAndPostponedCallableReferences.kt");
        }

        @Test
        @TestMetadata("moreSpecificAmbiguousExtensions.kt")
        public void testMoreSpecificAmbiguousExtensions() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/moreSpecificAmbiguousExtensions.kt");
        }

        @Test
        @TestMetadata("resolveCallableReferencesAfterAllSimpleArguments.kt")
        public void testResolveCallableReferencesAfterAllSimpleArguments() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/callableReferences/fromBasicDiagnosticTests/resolveCallableReferencesAfterAllSimpleArguments.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts")
    @TestDataPath("$PROJECT_ROOT")
    public class Contracts {
      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary")
      @TestDataPath("$PROJECT_ROOT")
      public class FromLibrary {
        @Test
        @TestMetadata("conditionalEffects.kt")
        public void testConditionalEffects() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary/conditionalEffects.kt");
        }

        @Test
        @TestMetadata("notIsNullOrEmpty.kt")
        public void testNotIsNullOrEmpty() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromLibrary/notIsNullOrEmpty.kt");
        }
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource")
      @TestDataPath("$PROJECT_ROOT")
      public class FromSource {
        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad")
        @TestDataPath("$PROJECT_ROOT")
        public class Bad {
          @Test
          @TestMetadata("noOptIn.kt")
          public void testNoOptIn() {
            runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/noOptIn.kt");
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace")
          @TestDataPath("$PROJECT_ROOT")
          public class CallsInPlace {
            @Test
            @TestMetadata("contractAndImplicitTypeInterdependency1.kt")
            public void testContractAndImplicitTypeInterdependency1() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/contractAndImplicitTypeInterdependency1.kt");
            }

            @Test
            @TestMetadata("contractAndImplicitTypeInterdependency2.kt")
            public void testContractAndImplicitTypeInterdependency2() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/callsInPlace/contractAndImplicitTypeInterdependency2.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/returnsImplies")
          @TestDataPath("$PROJECT_ROOT")
          public class ReturnsImplies {
            @Test
            @TestMetadata("propertyGetter.kt")
            public void testPropertyGetter() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/bad/returnsImplies/propertyGetter.kt");
            }
          }
        }

        @Nested
        @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good")
        @TestDataPath("$PROJECT_ROOT")
        public class Good {
          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace")
          @TestDataPath("$PROJECT_ROOT")
          public class CallsInPlace {
            @Test
            @TestMetadata("atLeastOnce.kt")
            public void testAtLeastOnce() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/atLeastOnce.kt");
            }

            @Test
            @TestMetadata("atMostOnce.kt")
            public void testAtMostOnce() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/atMostOnce.kt");
            }

            @Test
            @TestMetadata("unknown.kt")
            public void testUnknown() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/callsInPlace/unknown.kt");
            }
          }

          @Nested
          @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies")
          @TestDataPath("$PROJECT_ROOT")
          public class ReturnsImplies {
            @Test
            @TestMetadata("booleanOperators.kt")
            public void testBooleanOperators() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/booleanOperators.kt");
            }

            @Test
            @TestMetadata("eqNotEq.kt")
            public void testEqNotEq() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/eqNotEq.kt");
            }

            @Test
            @TestMetadata("propertyAccessors.kt")
            public void testPropertyAccessors() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/propertyAccessors.kt");
            }

            @Test
            @TestMetadata("receivers.kt")
            public void testReceivers() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/receivers.kt");
            }

            @Test
            @TestMetadata("typePredicate.kt")
            public void testTypePredicate() {
              runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/contracts/fromSource/good/returnsImplies/typePredicate.kt");
            }
          }
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics")
    @TestDataPath("$PROJECT_ROOT")
    public class Diagnostics {
      @Test
      @TestMetadata("forLoopChecker.kt")
      public void testForLoopChecker() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics/forLoopChecker.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics/functionReturnTypeMismatchChecker")
      @TestDataPath("$PROJECT_ROOT")
      public class FunctionReturnTypeMismatchChecker {
        @Test
        @TestMetadata("basic.kt")
        public void testBasic() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/diagnostics/functionReturnTypeMismatchChecker/basic.kt");
        }
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/inference")
    @TestDataPath("$PROJECT_ROOT")
    public class Inference {
      @Test
      @TestMetadata("builderInference.kt")
      public void testBuilderInference() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/builderInference.kt");
      }

      @Test
      @TestMetadata("builderInferenceFromStdlib.kt")
      public void testBuilderInferenceFromStdlib() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/builderInferenceFromStdlib.kt");
      }

      @Test
      @TestMetadata("subAtomAlreadyInitialized.kt")
      public void testSubAtomAlreadyInitialized() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/subAtomAlreadyInitialized.kt");
      }

      @Test
      @TestMetadata("subAtomAlreadyInitialized2.kt")
      public void testSubAtomAlreadyInitialized2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/inference/subAtomAlreadyInitialized2.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/initialization")
    @TestDataPath("$PROJECT_ROOT")
    public class Initialization {
      @Test
      @TestMetadata("fromLocalMembers.kt")
      public void testFromLocalMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/initialization/fromLocalMembers.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij")
    @TestDataPath("$PROJECT_ROOT")
    public class Intellij {
      @Test
      @TestMetadata("arrayOfImports.kt")
      public void testArrayOfImports() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/arrayOfImports.kt");
      }

      @Test
      @TestMetadata("FieldVsSyntheticAccessor.kt")
      public void testFieldVsSyntheticAccessor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/FieldVsSyntheticAccessor.kt");
      }

      @Test
      @TestMetadata("InnerClassOfThrowableOnObject.kt")
      public void testInnerClassOfThrowableOnObject() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/InnerClassOfThrowableOnObject.kt");
      }

      @Test
      @TestMetadata("lambdaForKfunction.kt")
      public void testLambdaForKfunction() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/intellij/lambdaForKfunction.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k")
    @TestDataPath("$PROJECT_ROOT")
    public class J_k {
      @Test
      @TestMetadata("AnnotationWithEnum.kt")
      public void testAnnotationWithEnum() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/AnnotationWithEnum.kt");
      }

      @Test
      @TestMetadata("genericGetterForJavaOverriddenProperty.kt")
      public void testGenericGetterForJavaOverriddenProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/genericGetterForJavaOverriddenProperty.kt");
      }

      @Test
      @TestMetadata("genericGetterForJavaOverriddenProperty2.kt")
      public void testGenericGetterForJavaOverriddenProperty2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/genericGetterForJavaOverriddenProperty2.kt");
      }

      @Test
      @TestMetadata("genericGetterForSyntheticProperty.kt")
      public void testGenericGetterForSyntheticProperty() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/genericGetterForSyntheticProperty.kt");
      }

      @Test
      @TestMetadata("JavaVisibility2.kt")
      public void testJavaVisibility2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/JavaVisibility2.kt");
      }

      @Test
      @TestMetadata("KJKComplexHierarchyWithNested.kt")
      public void testKJKComplexHierarchyWithNested() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KJKComplexHierarchyWithNested.kt");
      }

      @Test
      @TestMetadata("KotlinClassParameter.kt")
      public void testKotlinClassParameter() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KotlinClassParameter.kt");
      }

      @Test
      @TestMetadata("KotlinClassParameterGeneric.kt")
      public void testKotlinClassParameterGeneric() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/KotlinClassParameterGeneric.kt");
      }

      @Test
      @TestMetadata("MyException.kt")
      public void testMyException() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/MyException.kt");
      }

      @Test
      @TestMetadata("OverrideWithJava.kt")
      public void testOverrideWithJava() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/j+k/OverrideWithJava.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiModule {
      @Test
      @TestMetadata("FakeOverrides.kt")
      public void testFakeOverrides() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule/FakeOverrides.kt");
      }

      @Test
      @TestMetadata("MemberType.kt")
      public void testMemberType() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule/MemberType.kt");
      }

      @Test
      @TestMetadata("Members.kt")
      public void testMembers() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule/Members.kt");
      }

      @Test
      @TestMetadata("SuperTypes.kt")
      public void testSuperTypes() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/multiModule/SuperTypes.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/problems")
    @TestDataPath("$PROJECT_ROOT")
    public class Problems {
      @Test
      @TestMetadata("argumentTypeMismatch.kt")
      public void testArgumentTypeMismatch() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/argumentTypeMismatch.kt");
      }

      @Test
      @TestMetadata("EnumMapGet.kt")
      public void testEnumMapGet() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/EnumMapGet.kt");
      }

      @Test
      @TestMetadata("forEachOnZip.kt")
      public void testForEachOnZip() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/forEachOnZip.kt");
      }

      @Test
      @TestMetadata("invokePriorityComplex.kt")
      public void testInvokePriorityComplex() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/invokePriorityComplex.kt");
      }

      @Test
      @TestMetadata("KJKComplexHierarchyNestedLoop.kt")
      public void testKJKComplexHierarchyNestedLoop() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/KJKComplexHierarchyNestedLoop.kt");
      }

      @Test
      @TestMetadata("KtFirCompositeScope.kt")
      public void testKtFirCompositeScope() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/KtFirCompositeScope.kt");
      }

      @Test
      @TestMetadata("lightMember.kt")
      public void testLightMember() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/lightMember.kt");
      }

      @Test
      @TestMetadata("qualifierPriority.kt")
      public void testQualifierPriority() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/qualifierPriority.kt");
      }

      @Test
      @TestMetadata("stringConstructors.kt")
      public void testStringConstructors() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/stringConstructors.kt");
      }

      @Test
      @TestMetadata("TypeVariablesInWrappedSamCall.kt")
      public void testTypeVariablesInWrappedSamCall() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/problems/TypeVariablesInWrappedSamCall.kt");
      }
    }

    @Nested
    @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties")
    @TestDataPath("$PROJECT_ROOT")
    public class Properties {
      @Test
      @TestMetadata("explicitBackingFieldUnsupported.kt")
      public void testExplicitBackingFieldUnsupported() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/explicitBackingFieldUnsupported.kt");
      }

      @Nested
      @TestMetadata("compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField")
      @TestDataPath("$PROJECT_ROOT")
      public class BackingField {
        @Test
        @TestMetadata("backingFieldModifiers.kt")
        public void testBackingFieldModifiers() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/backingFieldModifiers.kt");
        }

        @Test
        @TestMetadata("backingFieldVisibility.kt")
        public void testBackingFieldVisibility() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/backingFieldVisibility.kt");
        }

        @Test
        @TestMetadata("explicitBackingFieldInInterface.kt")
        public void testExplicitBackingFieldInInterface() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/explicitBackingFieldInInterface.kt");
        }

        @Test
        @TestMetadata("explicitBackingFieldType.kt")
        public void testExplicitBackingFieldType() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/explicitBackingFieldType.kt");
        }

        @Test
        @TestMetadata("explicitBackingFieldsWithDelegates.kt")
        public void testExplicitBackingFieldsWithDelegates() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/explicitBackingFieldsWithDelegates.kt");
        }

        @Test
        @TestMetadata("lateinitBackingFields.kt")
        public void testLateinitBackingFields() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/lateinitBackingFields.kt");
        }

        @Test
        @TestMetadata("localVariablesWithBackingFields.kt")
        public void testLocalVariablesWithBackingFields() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/localVariablesWithBackingFields.kt");
        }

        @Test
        @TestMetadata("overriddenPropertiesWithExplicitBackingFields.kt")
        public void testOverriddenPropertiesWithExplicitBackingFields() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/overriddenPropertiesWithExplicitBackingFields.kt");
        }

        @Test
        @TestMetadata("propertyTypeNarrowing.kt")
        public void testPropertyTypeNarrowing() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/propertyTypeNarrowing.kt");
        }

        @Test
        @TestMetadata("randomWeirdBackingFields.kt")
        public void testRandomWeirdBackingFields() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/randomWeirdBackingFields.kt");
        }

        @Test
        @TestMetadata("untypedPropertyWithBackingFieldUsage.kt")
        public void testUntypedPropertyWithBackingFieldUsage() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/fir/analysis-tests/testData/resolveWithStdlib/properties/backingField/untypedPropertyWithBackingFieldUsage.kt");
        }
      }
    }
  }
}
