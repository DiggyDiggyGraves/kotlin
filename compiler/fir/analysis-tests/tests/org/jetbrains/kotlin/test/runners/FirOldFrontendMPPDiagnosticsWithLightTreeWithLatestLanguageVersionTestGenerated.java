/*
 * Copyright 2010-2025 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.test.runners;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/diagnostics/tests/multiplatform")
@TestDataPath("$PROJECT_ROOT")
public class FirOldFrontendMPPDiagnosticsWithLightTreeWithLatestLanguageVersionTestGenerated extends AbstractFirLightTreeWithActualizerDiagnosticsWithLatestLanguageVersionTest {
  @Test
  @TestMetadata("abstractEnumInIr.kt")
  public void testAbstractEnumInIr() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/abstractEnumInIr.kt");
  }

  @Test
  @TestMetadata("actualClassDelegationWithImplicitType.kt")
  public void testActualClassDelegationWithImplicitType() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassDelegationWithImplicitType.kt");
  }

  @Test
  @TestMetadata("actualDeprecated.kt")
  public void testActualDeprecated() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualDeprecated.kt");
  }

  @Test
  @TestMetadata("actualExternalInJs.kt")
  public void testActualExternalInJs() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualExternalInJs.kt");
  }

  @Test
  @TestMetadata("actualMissingConstructor.kt")
  public void testActualMissingConstructor() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualMissingConstructor.kt");
  }

  @Test
  @TestMetadata("actualTypealiasCycle.kt")
  public void testActualTypealiasCycle() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasCycle.kt");
  }

  @Test
  @TestMetadata("actualTypealiasForNotExpectClass.kt")
  public void testActualTypealiasForNotExpectClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasForNotExpectClass.kt");
  }

  @Test
  @TestMetadata("actualTypealiasToNonexistent.kt")
  public void testActualTypealiasToNonexistent() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToNonexistent.kt");
  }

  @Test
  @TestMetadata("actualTypealiasToSpecialAnnotation.kt")
  public void testActualTypealiasToSpecialAnnotation() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation.kt");
  }

  @Test
  @TestMetadata("actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt")
  public void testActualTypealiasToSpecialAnnotation_oldLanguageVersion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasToSpecialAnnotation_oldLanguageVersion.kt");
  }

  @Test
  @TestMetadata("actualTypealiasWithoutExpect.kt")
  public void testActualTypealiasWithoutExpect() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealiasWithoutExpect.kt");
  }

  @Test
  @TestMetadata("actualTypealias_defaultParamsIncompatibility.kt")
  public void testActualTypealias_defaultParamsIncompatibility() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualTypealias_defaultParamsIncompatibility.kt");
  }

  @Test
  @TestMetadata("actualWithoutExpectWhenExpectIsFakeOverride.kt")
  public void testActualWithoutExpectWhenExpectIsFakeOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualWithoutExpectWhenExpectIsFakeOverride.kt");
  }

  @Test
  public void testAllFilesPresentInMultiplatform() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
  }

  @Test
  @TestMetadata("ambiguousActualsJavaPrimitiveIntTypeVsIntegerObject.kt")
  public void testAmbiguousActualsJavaPrimitiveIntTypeVsIntegerObject() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/ambiguousActualsJavaPrimitiveIntTypeVsIntegerObject.kt");
  }

  @Test
  @TestMetadata("annotationArgArrayVsOutArray.kt")
  public void testAnnotationArgArrayVsOutArray() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsOutArray.kt");
  }

  @Test
  @TestMetadata("annotationArgArrayVsVararg.kt")
  public void testAnnotationArgArrayVsVararg() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/annotationArgArrayVsVararg.kt");
  }

  @Test
  @TestMetadata("annotationArgTypeAliasWithArray.kt")
  public void testAnnotationArgTypeAliasWithArray() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/annotationArgTypeAliasWithArray.kt");
  }

  @Test
  @TestMetadata("arrayLimitationsInJvm.kt")
  public void testArrayLimitationsInJvm() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/arrayLimitationsInJvm.kt");
  }

  @Test
  @TestMetadata("arraySort.kt")
  public void testArraySort() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/arraySort.kt");
  }

  @Test
  @TestMetadata("arraySortFixed.kt")
  public void testArraySortFixed() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/arraySortFixed.kt");
  }

  @Test
  @TestMetadata("callConflictsOnExpectAndActualWeaklyCompatible.kt")
  public void testCallConflictsOnExpectAndActualWeaklyCompatible() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/callConflictsOnExpectAndActualWeaklyCompatible.kt");
  }

  @Test
  @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt")
  public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_finalActualClass.kt");
  }

  @Test
  @TestMetadata("changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt")
  public void testChangeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/changeModalityFromOpenToFinalInOverride_finalExpectClass_openActualClass.kt");
  }

  @Test
  @TestMetadata("checkNoActualForExpectInLastModule.kt")
  public void testCheckNoActualForExpectInLastModule() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/checkNoActualForExpectInLastModule.kt");
  }

  @Test
  @TestMetadata("collections.kt")
  public void testCollections() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/collections.kt");
  }

  @Test
  @TestMetadata("delegationToExpectInterfaceMixedWithInheritance.kt")
  public void testDelegationToExpectInterfaceMixedWithInheritance() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationToExpectInterfaceMixedWithInheritance.kt");
  }

  @Test
  @TestMetadata("delegationToExpectInterfacesWithClashingScopes.kt")
  public void testDelegationToExpectInterfacesWithClashingScopes() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationToExpectInterfacesWithClashingScopes.kt");
  }

  @Test
  @TestMetadata("delegationToTypeParameterWithBond.kt")
  public void testDelegationToTypeParameterWithBond() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationToTypeParameterWithBond.kt");
  }

  @Test
  @TestMetadata("delegationWithIntersectionAndTypeParameters.kt")
  public void testDelegationWithIntersectionAndTypeParameters() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationWithIntersectionAndTypeParameters.kt");
  }

  @Test
  @TestMetadata("delegationWithTypeParametersAndInheritance.kt")
  public void testDelegationWithTypeParametersAndInheritance() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationWithTypeParametersAndInheritance.kt");
  }

  @Test
  @TestMetadata("delegationWithTypeParametersAndJavaActualization.kt")
  public void testDelegationWithTypeParametersAndJavaActualization() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/delegationWithTypeParametersAndJavaActualization.kt");
  }

  @Test
  @TestMetadata("dontDeprioritizeExpectFunIfShapeIsMoreSpecific.kt")
  public void testDontDeprioritizeExpectFunIfShapeIsMoreSpecific() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/dontDeprioritizeExpectFunIfShapeIsMoreSpecific.kt");
  }

  @Test
  @TestMetadata("duplicateSupertype.kt")
  public void testDuplicateSupertype() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/duplicateSupertype.kt");
  }

  @Test
  @TestMetadata("expectAbstractToString.kt")
  public void testExpectAbstractToString() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectAbstractToString.kt");
  }

  @Test
  @TestMetadata("expectActualClassesAreInBetaWarning.kt")
  public void testExpectActualClassesAreInBetaWarning() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBetaWarning.kt");
  }

  @Test
  @TestMetadata("expectActualClassesAreInBeta_suppressWarningWithLv.kt")
  public void testExpectActualClassesAreInBeta_suppressWarningWithLv() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualClassesAreInBeta_suppressWarningWithLv.kt");
  }

  @Test
  @TestMetadata("expectActualExtensionOverride.kt")
  public void testExpectActualExtensionOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualExtensionOverride.kt");
  }

  @Test
  @TestMetadata("expectActualInTheSameModule.kt")
  public void testExpectActualInTheSameModule() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModule.kt");
  }

  @Test
  @TestMetadata("expectActualInTheSameModuleDifferentFiles.kt")
  public void testExpectActualInTheSameModuleDifferentFiles() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualInTheSameModuleDifferentFiles.kt");
  }

  @Test
  @TestMetadata("expectActualMainInTheSameModuleDifferentFiles.kt")
  public void testExpectActualMainInTheSameModuleDifferentFiles() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectActualMainInTheSameModuleDifferentFiles.kt");
  }

  @Test
  @TestMetadata("expectConstructors.kt")
  public void testExpectConstructors() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectConstructors.kt");
  }

  @Test
  @TestMetadata("expectDataObject.kt")
  public void testExpectDataObject() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectDataObject.kt");
  }

  @Test
  @TestMetadata("expectExternal.kt")
  public void testExpectExternal() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectExternal.kt");
  }

  @Test
  @TestMetadata("expectExternal_oldLanguageVersion.kt")
  public void testExpectExternal_oldLanguageVersion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectExternal_oldLanguageVersion.kt");
  }

  @Test
  @TestMetadata("expectInterfaceApplicability.kt")
  public void testExpectInterfaceApplicability() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectInterfaceApplicability.kt");
  }

  @Test
  @TestMetadata("expectObjectWithAbstractMember.kt")
  public void testExpectObjectWithAbstractMember() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectObjectWithAbstractMember.kt");
  }

  @Test
  @TestMetadata("expectOptInAnnotation.kt")
  public void testExpectOptInAnnotation() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation.kt");
  }

  @Test
  @TestMetadata("expectOptInAnnotation_oldLanguageVersion.kt")
  public void testExpectOptInAnnotation_oldLanguageVersion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectOptInAnnotation_oldLanguageVersion.kt");
  }

  @Test
  @TestMetadata("expectShouldBeJSExportable.kt")
  public void testExpectShouldBeJSExportable() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectShouldBeJSExportable.kt");
  }

  @Test
  @TestMetadata("expectTailrec.kt")
  public void testExpectTailrec() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectTailrec.kt");
  }

  @Test
  @TestMetadata("expectTailrec_oldLanguageVersion.kt")
  public void testExpectTailrec_oldLanguageVersion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectTailrec_oldLanguageVersion.kt");
  }

  @Test
  @TestMetadata("expectsWithJsExport.kt")
  public void testExpectsWithJsExport() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/expectsWithJsExport.kt");
  }

  @Test
  @TestMetadata("extraNestedClassOnActualViaActualTypealias.kt")
  public void testExtraNestedClassOnActualViaActualTypealias() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/extraNestedClassOnActualViaActualTypealias.kt");
  }

  @Test
  @TestMetadata("headerFunInNonHeaderClass.kt")
  public void testHeaderFunInNonHeaderClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerFunInNonHeaderClass.kt");
  }

  @Test
  @TestMetadata("implDelegatedMember.kt")
  public void testImplDelegatedMember() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/implDelegatedMember.kt");
  }

  @Test
  @TestMetadata("implDynamic.kt")
  public void testImplDynamic() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/implDynamic.kt");
  }

  @Test
  @TestMetadata("implFakeOverride.kt")
  public void testImplFakeOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/implFakeOverride.kt");
  }

  @Test
  @TestMetadata("incDecOperatorsInExpectClass.kt")
  public void testIncDecOperatorsInExpectClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/incDecOperatorsInExpectClass.kt");
  }

  @Test
  @TestMetadata("incompatibles.kt")
  public void testIncompatibles() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/incompatibles.kt");
  }

  @Test
  @TestMetadata("JsExternalTypeExtendsActualExternalType.kt")
  public void testJsExternalTypeExtendsActualExternalType() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/JsExternalTypeExtendsActualExternalType.kt");
  }

  @Test
  @TestMetadata("jvmOverloads.kt")
  public void testJvmOverloads() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/jvmOverloads.kt");
  }

  @Test
  @TestMetadata("kt54827.kt")
  public void testKt54827() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt54827.kt");
  }

  @Test
  @TestMetadata("kt58153.kt")
  public void testKt58153() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt58153.kt");
  }

  @Test
  @TestMetadata("kt60902.kt")
  public void testKt60902() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt60902.kt");
  }

  @Test
  @TestMetadata("kt63860.kt")
  public void testKt63860() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt63860.kt");
  }

  @Test
  @TestMetadata("kt63860_2.kt")
  public void testKt63860_2() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt63860_2.kt");
  }

  @Test
  @TestMetadata("kt64045.kt")
  public void testKt64045() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt64045.kt");
  }

  @Test
  @TestMetadata("kt64045_2.kt")
  public void testKt64045_2() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt64045_2.kt");
  }

  @Test
  @TestMetadata("kt64166.kt")
  public void testKt64166() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/kt64166.kt");
  }

  @Test
  @TestMetadata("missingActual.kt")
  public void testMissingActual() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/missingActual.kt");
  }

  @Test
  @TestMetadata("missingActualOnlySubclassIsNotActualized.kt")
  public void testMissingActualOnlySubclassIsNotActualized() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/missingActualOnlySubclassIsNotActualized.kt");
  }

  @Test
  @TestMetadata("missingActualWithFunctionCallInPlatformModule.kt")
  public void testMissingActualWithFunctionCallInPlatformModule() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/missingActualWithFunctionCallInPlatformModule.kt");
  }

  @Test
  @TestMetadata("modifierApplicability.kt")
  public void testModifierApplicability() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/modifierApplicability.kt");
  }

  @Test
  @TestMetadata("namedArguments.kt")
  public void testNamedArguments() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/namedArguments.kt");
  }

  @Test
  @TestMetadata("nestedClassViaActualTypealias.kt")
  public void testNestedClassViaActualTypealias() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealias.kt");
  }

  @Test
  @TestMetadata("nestedClassViaActualTypealiasExpandInTypeParam.kt")
  public void testNestedClassViaActualTypealiasExpandInTypeParam() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasExpandInTypeParam.kt");
  }

  @Test
  @TestMetadata("nestedClassViaActualTypealiasIncompatibilities.kt")
  public void testNestedClassViaActualTypealiasIncompatibilities() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasIncompatibilities.kt");
  }

  @Test
  @TestMetadata("nestedClassViaActualTypealiasWithTypeParam.kt")
  public void testNestedClassViaActualTypealiasWithTypeParam() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/nestedClassViaActualTypealiasWithTypeParam.kt");
  }

  @Test
  @TestMetadata("noOverrideClashWithSignatureInMppCommon.kt")
  public void testNoOverrideClashWithSignatureInMppCommon() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/noOverrideClashWithSignatureInMppCommon.kt");
  }

  @Test
  @TestMetadata("optionalExpectationDiagnostics.kt")
  public void testOptionalExpectationDiagnostics() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/optionalExpectationDiagnostics.kt");
  }

  @Test
  @TestMetadata("overloadsWithPotentialRecursion.kt")
  public void testOverloadsWithPotentialRecursion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/overloadsWithPotentialRecursion.kt");
  }

  @Test
  @TestMetadata("packageConflictsWithClassifierInMultiplatform.kt")
  public void testPackageConflictsWithClassifierInMultiplatform() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/packageConflictsWithClassifierInMultiplatform.kt");
  }

  @Test
  @TestMetadata("platformRedeclarationOfExpect.kt")
  public void testPlatformRedeclarationOfExpect() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/platformRedeclarationOfExpect.kt");
  }

  @Test
  @TestMetadata("privateExpectFakeOverride.kt")
  public void testPrivateExpectFakeOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/privateExpectFakeOverride.kt");
  }

  @Test
  @TestMetadata("privateExpectFakeOverride_incompatibleReturnType.kt")
  public void testPrivateExpectFakeOverride_incompatibleReturnType() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/privateExpectFakeOverride_incompatibleReturnType.kt");
  }

  @Test
  @TestMetadata("privateTopLevelDeclarations.kt")
  public void testPrivateTopLevelDeclarations() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/privateTopLevelDeclarations.kt");
  }

  @Test
  @TestMetadata("returnTypeVsGenericsUpperBoundIncompatibility.kt")
  public void testReturnTypeVsGenericsUpperBoundIncompatibility() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/returnTypeVsGenericsUpperBoundIncompatibility.kt");
  }

  @Test
  @TestMetadata("sealedClassWithPrivateConstructor.kt")
  public void testSealedClassWithPrivateConstructor() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/sealedClassWithPrivateConstructor.kt");
  }

  @Test
  @TestMetadata("sealedTypeAlias.kt")
  public void testSealedTypeAlias() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/sealedTypeAlias.kt");
  }

  @Test
  @TestMetadata("sealedTypeAliasTopLevel.kt")
  public void testSealedTypeAliasTopLevel() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/sealedTypeAliasTopLevel.kt");
  }

  @Test
  @TestMetadata("smartcastOnMemberPropertyFromCommonClass.kt")
  public void testSmartcastOnMemberPropertyFromCommonClass() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartcastOnMemberPropertyFromCommonClass.kt");
  }

  @Test
  @TestMetadata("superCallDefaultArguments.kt")
  public void testSuperCallDefaultArguments() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/superCallDefaultArguments.kt");
  }

  @Test
  @TestMetadata("supertypeActualizationWithAny.kt")
  public void testSupertypeActualizationWithAny() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/supertypeActualizationWithAny.kt");
  }

  @Test
  @TestMetadata("typeResolutionOfNestedClassActualizedViaTypealias.kt")
  public void testTypeResolutionOfNestedClassActualizedViaTypealias() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typeResolutionOfNestedClassActualizedViaTypealias.kt");
  }

  @Test
  @TestMetadata("valueClassWithPrivateConstructor.kt")
  public void testValueClassWithPrivateConstructor() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/valueClassWithPrivateConstructor.kt");
  }

  @Test
  @TestMetadata("varSetterVisibility.kt")
  public void testVarSetterVisibility() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/varSetterVisibility.kt");
  }

  @Test
  @TestMetadata("widerVisibilityInActualClassifier.kt")
  public void testWiderVisibilityInActualClassifier() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibilityInActualClassifier.kt");
  }

  @Test
  @TestMetadata("widerVisibility_expectIsEffectivelyFinal.kt")
  public void testWiderVisibility_expectIsEffectivelyFinal() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal.kt");
  }

  @Test
  @TestMetadata("widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt")
  public void testWiderVisibility_expectIsEffectivelyFinal_fakeOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_fakeOverride.kt");
  }

  @Test
  @TestMetadata("widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt")
  public void testWiderVisibility_expectIsEffectivelyFinal_oldLanguageVersion() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectIsEffectivelyFinal_oldLanguageVersion.kt");
  }

  @Test
  @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal.kt")
  public void testWiderVisibility_expectSetterIsEffectivelyFinal() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal.kt");
  }

  @Test
  @TestMetadata("widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt")
  public void testWiderVisibility_expectSetterIsEffectivelyFinal_fakeOverride() {
    runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/widerVisibility_expectSetterIsEffectivelyFinal_fakeOverride.kt");
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect")
  @TestDataPath("$PROJECT_ROOT")
  public class ActualAnnotationsNotMatchExpect {
    @Test
    @TestMetadata("actualInnerClassMissingMember.kt")
    public void testActualInnerClassMissingMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualInnerClassMissingMember.kt");
    }

    @Test
    @TestMetadata("actualizeExpectProtectedToJavaProtected.kt")
    public void testActualizeExpectProtectedToJavaProtected() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizeExpectProtectedToJavaProtected.kt");
    }

    @Test
    @TestMetadata("actualizePropertyByJavaField_supportedCase.kt")
    public void testActualizePropertyByJavaField_supportedCase() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizePropertyByJavaField_supportedCase.kt");
    }

    @Test
    @TestMetadata("actualizePropertyByJavaField_unsupportedCase.kt")
    public void testActualizePropertyByJavaField_unsupportedCase() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/actualizePropertyByJavaField_unsupportedCase.kt");
    }

    @Test
    public void testAllFilesPresentInActualAnnotationsNotMatchExpect() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("annotationArgumentsConstExpressions.kt")
    public void testAnnotationArgumentsConstExpressions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsConstExpressions.kt");
    }

    @Test
    @TestMetadata("annotationArgumentsDefaults.kt")
    public void testAnnotationArgumentsDefaults() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsDefaults.kt");
    }

    @Test
    @TestMetadata("annotationArgumentsWithLazyResolve.kt")
    public void testAnnotationArgumentsWithLazyResolve() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationArgumentsWithLazyResolve.kt");
    }

    @Test
    @TestMetadata("annotationMatching_oldLanguageVersion.kt")
    public void testAnnotationMatching_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationMatching_oldLanguageVersion.kt");
    }

    @Test
    @TestMetadata("annotationTarget.kt")
    public void testAnnotationTarget() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTarget.kt");
    }

    @Test
    @TestMetadata("annotationTypeParameters.kt")
    public void testAnnotationTypeParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/annotationTypeParameters.kt");
    }

    @Test
    @TestMetadata("basicOnDeclaration.kt")
    public void testBasicOnDeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/basicOnDeclaration.kt");
    }

    @Test
    @TestMetadata("checkDiagnosticFullText.kt")
    public void testCheckDiagnosticFullText() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/checkDiagnosticFullText.kt");
    }

    @Test
    @TestMetadata("classScopeInnerClasses.kt")
    public void testClassScopeInnerClasses() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeInnerClasses.kt");
    }

    @Test
    @TestMetadata("classScopeViaTypealiasIncompatible.kt")
    public void testClassScopeViaTypealiasIncompatible() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/classScopeViaTypealiasIncompatible.kt");
    }

    @Test
    @TestMetadata("compatibleOverrides.kt")
    public void testCompatibleOverrides() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/compatibleOverrides.kt");
    }

    @Test
    @TestMetadata("defaultValueParametersRendering.kt")
    public void testDefaultValueParametersRendering() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/defaultValueParametersRendering.kt");
    }

    @Test
    @TestMetadata("deprecatedAnnotationOnlyOnActual_useInPlatform.kt")
    public void testDeprecatedAnnotationOnlyOnActual_useInPlatform() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/deprecatedAnnotationOnlyOnActual_useInPlatform.kt");
    }

    @Test
    @TestMetadata("differentOrder.kt")
    public void testDifferentOrder() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/differentOrder.kt");
    }

    @Test
    @TestMetadata("enumEntries.kt")
    public void testEnumEntries() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/enumEntries.kt");
    }

    @Test
    @TestMetadata("fakeOverrides.kt")
    public void testFakeOverrides() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/fakeOverrides.kt");
    }

    @Test
    @TestMetadata("floatNumbersComparison.kt")
    public void testFloatNumbersComparison() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/floatNumbersComparison.kt");
    }

    @Test
    @TestMetadata("gettersAndSetters.kt")
    public void testGettersAndSetters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/gettersAndSetters.kt");
    }

    @Test
    @TestMetadata("intrinsicConstEvaluation.kt")
    public void testIntrinsicConstEvaluation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/intrinsicConstEvaluation.kt");
    }

    @Test
    @TestMetadata("kclassArgWithExpectClass.kt")
    public void testKclassArgWithExpectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kclassArgWithExpectClass.kt");
    }

    @Test
    @TestMetadata("kotlinAnaloguesForJavaAnnotations.kt")
    public void testKotlinAnaloguesForJavaAnnotations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/kotlinAnaloguesForJavaAnnotations.kt");
    }

    @Test
    @TestMetadata("nestedAnnotationClassViaActualTypeAlias.kt")
    public void testNestedAnnotationClassViaActualTypeAlias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/nestedAnnotationClassViaActualTypeAlias.kt");
    }

    @Test
    @TestMetadata("repeatableNoArg.kt")
    public void testRepeatableNoArg() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableNoArg.kt");
    }

    @Test
    @TestMetadata("repeatableWithArg.kt")
    public void testRepeatableWithArg() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/repeatableWithArg.kt");
    }

    @Test
    @TestMetadata("skippedAnnotations.kt")
    public void testSkippedAnnotations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/skippedAnnotations.kt");
    }

    @Test
    @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
    public void testSourceRetentionAnnotationsWhenTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/sourceRetentionAnnotationsWhenTypealias.kt");
    }

    @Test
    @TestMetadata("substitutionOverrideInTwoClasses.kt")
    public void testSubstitutionOverrideInTwoClasses() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/substitutionOverrideInTwoClasses.kt");
    }

    @Test
    @TestMetadata("twoActualTypealiasesToSameClass.kt")
    public void testTwoActualTypealiasesToSameClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/twoActualTypealiasesToSameClass.kt");
    }

    @Test
    @TestMetadata("typeParameters.kt")
    public void testTypeParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeParameters.kt");
    }

    @Test
    @TestMetadata("typeUsage.kt")
    public void testTypeUsage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsage.kt");
    }

    @Test
    @TestMetadata("typeUsageTypealiasInSuper.kt")
    public void testTypeUsageTypealiasInSuper() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageTypealiasInSuper.kt");
    }

    @Test
    @TestMetadata("typeUsageWithImplicitType.kt")
    public void testTypeUsageWithImplicitType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithImplicitType.kt");
    }

    @Test
    @TestMetadata("typeUsageWithUnresolvedReference.kt")
    public void testTypeUsageWithUnresolvedReference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typeUsageWithUnresolvedReference.kt");
    }

    @Test
    @TestMetadata("typealias.kt")
    public void testTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealias.kt");
    }

    @Test
    @TestMetadata("typealiasToJavaLibrary.kt")
    public void testTypealiasToJavaLibrary() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaLibrary.kt");
    }

    @Test
    @TestMetadata("typealiasToJavaWithAnnotationArgument.kt")
    public void testTypealiasToJavaWithAnnotationArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToJavaWithAnnotationArgument.kt");
    }

    @Test
    @TestMetadata("typealiasToKtLibrary.kt")
    public void testTypealiasToKtLibrary() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/typealiasToKtLibrary.kt");
    }

    @Test
    @TestMetadata("unresolvedReference.kt")
    public void testUnresolvedReference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/unresolvedReference.kt");
    }

    @Test
    @TestMetadata("valueParameters.kt")
    public void testValueParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/valueParameters.kt");
    }

    @Test
    @TestMetadata("withAnnotationActualTypealias.kt")
    public void testWithAnnotationActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withAnnotationActualTypealias.kt");
    }

    @Test
    @TestMetadata("withOtherIncomatibilities.kt")
    public void testWithOtherIncomatibilities() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/withOtherIncomatibilities.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/lightTree")
    @TestDataPath("$PROJECT_ROOT")
    public class LightTree {
      @Test
      public void testAllFilesPresentInLightTree() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/lightTree"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("annotationArgRendering.kt")
      public void testAnnotationArgRendering() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualAnnotationsNotMatchExpect/lightTree/annotationArgRendering.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker")
  @TestDataPath("$PROJECT_ROOT")
  public class ActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker {
    @Test
    @TestMetadata("actualTypealias.kt")
    public void testActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualTypealias.kt");
    }

    @Test
    @TestMetadata("actualizeFakeOverridePropertyToJavaMethod.kt")
    public void testActualizeFakeOverridePropertyToJavaMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeFakeOverridePropertyToJavaMethod.kt");
    }

    @Test
    @TestMetadata("actualizePrimaryConstructorWithSecondaryConstructor.kt")
    public void testActualizePrimaryConstructorWithSecondaryConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizePrimaryConstructorWithSecondaryConstructor.kt");
    }

    @Test
    @TestMetadata("actualizeSecondaryConstructorWithPrimaryConstructor.kt")
    public void testActualizeSecondaryConstructorWithPrimaryConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/actualizeSecondaryConstructorWithPrimaryConstructor.kt");
    }

    @Test
    public void testAllFilesPresentInActualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("changeClassTypeParameterNames.kt")
    public void testChangeClassTypeParameterNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeClassTypeParameterNames.kt");
    }

    @Test
    @TestMetadata("changeFunctionTypeParameterNamesInOverride.kt")
    public void testChangeFunctionTypeParameterNamesInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeFunctionTypeParameterNamesInOverride.kt");
    }

    @Test
    @TestMetadata("changeLateinitInOverride.kt")
    public void testChangeLateinitInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeLateinitInOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityFromAbstractToFinalInOverride.kt")
    public void testChangeModalityFromAbstractToFinalInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToFinalInOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityFromAbstractToOpenInOverride.kt")
    public void testChangeModalityFromAbstractToOpenInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromAbstractToOpenInOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityFromOpenToAbstractInOverride.kt")
    public void testChangeModalityFromOpenToAbstractInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToAbstractInOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityFromOpenToFinalInOverride.kt")
    public void testChangeModalityFromOpenToFinalInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityFromOpenToFinalInOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityOfSubstitutedFakeOverride.kt")
    public void testChangeModalityOfSubstitutedFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfSubstitutedFakeOverride.kt");
    }

    @Test
    @TestMetadata("changeModalityOfToStringInOverride.kt")
    public void testChangeModalityOfToStringInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeModalityOfToStringInOverride.kt");
    }

    @Test
    @TestMetadata("changeParameterNameInOverride.kt")
    public void testChangeParameterNameInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeParameterNameInOverride.kt");
    }

    @Test
    @TestMetadata("changeSetterVisibilityInOverride.kt")
    public void testChangeSetterVisibilityInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeSetterVisibilityInOverride.kt");
    }

    @Test
    @TestMetadata("changeVarargModifierInOverride.kt")
    public void testChangeVarargModifierInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVarargModifierInOverride.kt");
    }

    @Test
    @TestMetadata("changeVisibilityInOverride.kt")
    public void testChangeVisibilityInOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/changeVisibilityInOverride.kt");
    }

    @Test
    @TestMetadata("covariantFunctionOverride.kt")
    public void testCovariantFunctionOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantFunctionOverride.kt");
    }

    @Test
    @TestMetadata("covariantOverrideGenericUpperBound.kt")
    public void testCovariantOverrideGenericUpperBound() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenericUpperBound.kt");
    }

    @Test
    @TestMetadata("covariantOverrideGenerics.kt")
    public void testCovariantOverrideGenerics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantOverrideGenerics.kt");
    }

    @Test
    @TestMetadata("covariantPropertyOverride.kt")
    public void testCovariantPropertyOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/covariantPropertyOverride.kt");
    }

    @Test
    @TestMetadata("fakeOverrideChangedToRealOverride.kt")
    public void testFakeOverrideChangedToRealOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/fakeOverrideChangedToRealOverride.kt");
    }

    @Test
    @TestMetadata("finalClassIsActualizedByOpenClass.kt")
    public void testFinalClassIsActualizedByOpenClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalClassIsActualizedByOpenClass.kt");
    }

    @Test
    @TestMetadata("finalMethodIsActualizedByOpenMethod.kt")
    public void testFinalMethodIsActualizedByOpenMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/finalMethodIsActualizedByOpenMethod.kt");
    }

    @Test
    @TestMetadata("flexibleTypesMatching.kt")
    public void testFlexibleTypesMatching() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/flexibleTypesMatching.kt");
    }

    @Test
    @TestMetadata("injectClass.kt")
    public void testInjectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectClass.kt");
    }

    @Test
    @TestMetadata("injectContextReceiverOverload.kt")
    public void testInjectContextReceiverOverload() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectContextReceiverOverload.kt");
    }

    @Test
    @TestMetadata("injectEmptySuperClass.kt")
    public void testInjectEmptySuperClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectEmptySuperClass.kt");
    }

    @Test
    @TestMetadata("injectExtensionReceiverOverload.kt")
    public void testInjectExtensionReceiverOverload() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectExtensionReceiverOverload.kt");
    }

    @Test
    @TestMetadata("injectGenericUpperBoundOverload.kt")
    public void testInjectGenericUpperBoundOverload() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectGenericUpperBoundOverload.kt");
    }

    @Test
    @TestMetadata("injectMethod_internalMethod.kt")
    public void testInjectMethod_internalMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_internalMethod.kt");
    }

    @Test
    @TestMetadata("injectMethod_privateMethod.kt")
    public void testInjectMethod_privateMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_privateMethod.kt");
    }

    @Test
    @TestMetadata("injectMethod_protectedMethod.kt")
    public void testInjectMethod_protectedMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_protectedMethod.kt");
    }

    @Test
    @TestMetadata("injectMethod_publicMethod.kt")
    public void testInjectMethod_publicMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethod.kt");
    }

    @Test
    @TestMetadata("injectMethod_publicMethodInJava.kt")
    public void testInjectMethod_publicMethodInJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectMethod_publicMethodInJava.kt");
    }

    @Test
    @TestMetadata("injectParameterOverload.kt")
    public void testInjectParameterOverload() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverload.kt");
    }

    @Test
    @TestMetadata("injectParameterOverloadWithGenerics.kt")
    public void testInjectParameterOverloadWithGenerics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectParameterOverloadWithGenerics.kt");
    }

    @Test
    @TestMetadata("injectPrimaryConstructor.kt")
    public void testInjectPrimaryConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrimaryConstructor.kt");
    }

    @Test
    @TestMetadata("injectPrivateProperty.kt")
    public void testInjectPrivateProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPrivateProperty.kt");
    }

    @Test
    @TestMetadata("injectProperty.kt")
    public void testInjectProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectProperty.kt");
    }

    @Test
    @TestMetadata("injectPropertyWithTheSameSignatureAsExistingFunction.kt")
    public void testInjectPropertyWithTheSameSignatureAsExistingFunction() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPropertyWithTheSameSignatureAsExistingFunction.kt");
    }

    @Test
    @TestMetadata("injectPublicFakeOverrideMethod.kt")
    public void testInjectPublicFakeOverrideMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectPublicFakeOverrideMethod.kt");
    }

    @Test
    @TestMetadata("injectSecondaryConstructor.kt")
    public void testInjectSecondaryConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSecondaryConstructor.kt");
    }

    @Test
    @TestMetadata("injectSupertype_SupertypeIsExpectActualPair.kt")
    public void testInjectSupertype_SupertypeIsExpectActualPair() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair.kt");
    }

    @Test
    @TestMetadata("injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt")
    public void testInjectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectSupertype_SupertypeIsExpectActualPair_transitiveFakeOverride.kt");
    }

    @Test
    @TestMetadata("injectVarargParameterOverload.kt")
    public void testInjectVarargParameterOverload() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/injectVarargParameterOverload.kt");
    }

    @Test
    @TestMetadata("kt62027.kt")
    public void testKt62027() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/kt62027.kt");
    }

    @Test
    @TestMetadata("memberScopeMismatch_oldLanguageVersion.kt")
    public void testMemberScopeMismatch_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/memberScopeMismatch_oldLanguageVersion.kt");
    }

    @Test
    @TestMetadata("nestedExpectOpenClass.kt")
    public void testNestedExpectOpenClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/nestedExpectOpenClass.kt");
    }

    @Test
    @TestMetadata("overloadMethodInjectedInSuper.kt")
    public void testOverloadMethodInjectedInSuper() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/overloadMethodInjectedInSuper.kt");
    }

    @Test
    @TestMetadata("propertyKindOverride.kt")
    public void testPropertyKindOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/propertyKindOverride.kt");
    }

    @Test
    @TestMetadata("severalMismatches.kt")
    public void testSeveralMismatches() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/severalMismatches.kt");
    }

    @Test
    @TestMetadata("substitutedFakeOverrideChangedToRealOverride.kt")
    public void testSubstitutedFakeOverrideChangedToRealOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/substitutedFakeOverrideChangedToRealOverride.kt");
    }

    @Test
    @TestMetadata("superTypesAreTheSameModuloActualTypealias.kt")
    public void testSuperTypesAreTheSameModuloActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloActualTypealias.kt");
    }

    @Test
    @TestMetadata("superTypesAreTheSameModuloTypealias1.kt")
    public void testSuperTypesAreTheSameModuloTypealias1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias1.kt");
    }

    @Test
    @TestMetadata("superTypesAreTheSameModuloTypealias2.kt")
    public void testSuperTypesAreTheSameModuloTypealias2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/superTypesAreTheSameModuloTypealias2.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt")
    public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt")
    public void testSupertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_covariantOverrideOfInjectedFromSuper_transitiveSubstitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_injectMethod.kt")
    public void testSupertypeIsExpectActual_injectMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt")
    public void testSupertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectMethod_transitiveSubstitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_injectSupertype.kt")
    public void testSupertypeIsExpectActual_injectSupertype() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt")
    public void testSupertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_injectSupertype_transitiveSubstitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_simpleOverride.kt")
    public void testSupertypeIsExpectActual_simpleOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt")
    public void testSupertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_simpleOverride_transitiveSubstitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt")
    public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod.kt");
    }

    @Test
    @TestMetadata("supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt")
    public void testSupertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/actualClassifierMustHasTheSameMembersAsNonFinalExpectClassifierChecker/supertypeIsExpectActual_supertypeIsActualTypealias_injectMethod_transitiveSubstitutionFakeOverride.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/complexMatchings")
  @TestDataPath("$PROJECT_ROOT")
  public class ComplexMatchings {
    @Test
    public void testAllFilesPresentInComplexMatchings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/complexMatchings"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("expectCtorlessFinalToActualObject.kt")
    public void testExpectCtorlessFinalToActualObject() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObject.kt");
    }

    @Test
    @TestMetadata("expectCtorlessFinalToActualObjectViaTypealias.kt")
    public void testExpectCtorlessFinalToActualObjectViaTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/complexMatchings/expectCtorlessFinalToActualObjectViaTypealias.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments")
  @TestDataPath("$PROJECT_ROOT")
  public class DefaultArguments {
    @Test
    public void testAllFilesPresentInDefaultArguments() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("annotationArgumentEquality.kt")
    public void testAnnotationArgumentEquality() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationArgumentEquality.kt");
    }

    @Test
    @TestMetadata("annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt")
    public void testAnnotationDefaultArgKclassWithNestedClassViaActualTypeAlias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationDefaultArgKclassWithNestedClassViaActualTypeAlias.kt");
    }

    @Test
    @TestMetadata("annotations.kt")
    public void testAnnotations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotations.kt");
    }

    @Test
    @TestMetadata("annotationsViaActualTypeAlias.kt")
    public void testAnnotationsViaActualTypeAlias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias.kt");
    }

    @Test
    @TestMetadata("annotationsViaActualTypeAlias2.kt")
    public void testAnnotationsViaActualTypeAlias2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAlias2.kt");
    }

    @Test
    @TestMetadata("annotationsViaActualTypeAliasExpectEnumArg.kt")
    public void testAnnotationsViaActualTypeAliasExpectEnumArg() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/annotationsViaActualTypeAliasExpectEnumArg.kt");
    }

    @Test
    @TestMetadata("companionMethodViaActualTypealias.kt")
    public void testCompanionMethodViaActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/companionMethodViaActualTypealias.kt");
    }

    @Test
    @TestMetadata("constructor.kt")
    public void testConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructor.kt");
    }

    @Test
    @TestMetadata("constructorDefaultArgsViaActualTypealias.kt")
    public void testConstructorDefaultArgsViaActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/constructorDefaultArgsViaActualTypealias.kt");
    }

    @Test
    @TestMetadata("expectAnnotationAndInlineClassWithDefaultValue.kt")
    public void testExpectAnnotationAndInlineClassWithDefaultValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectAnnotationAndInlineClassWithDefaultValue.kt");
    }

    @Test
    @TestMetadata("expectedDeclaresDefaultArguments.kt")
    public void testExpectedDeclaresDefaultArguments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedDeclaresDefaultArguments.kt");
    }

    @Test
    @TestMetadata("expectedInheritsDefaultArguments.kt")
    public void testExpectedInheritsDefaultArguments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedInheritsDefaultArguments.kt");
    }

    @Test
    @TestMetadata("expectedVsNonExpectedWithDefaults.kt")
    public void testExpectedVsNonExpectedWithDefaults() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/expectedVsNonExpectedWithDefaults.kt");
    }

    @Test
    @TestMetadata("genericArrayClassReference.kt")
    public void testGenericArrayClassReference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/genericArrayClassReference.kt");
    }

    @Test
    @TestMetadata("methodDefaultArgsViaActualTypealias.kt")
    public void testMethodDefaultArgsViaActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias.kt");
    }

    @Test
    @TestMetadata("methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt")
    public void testMethodDefaultArgsViaActualTypealias_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualTypealias_oldLanguageVersion.kt");
    }

    @Test
    @TestMetadata("nestedAnnotationClassViaActualTypealias.kt")
    public void testNestedAnnotationClassViaActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedAnnotationClassViaActualTypealias.kt");
    }

    @Test
    @TestMetadata("nestedClassMethodsViaActualTypealias.kt")
    public void testNestedClassMethodsViaActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/nestedClassMethodsViaActualTypealias.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride")
    @TestDataPath("$PROJECT_ROOT")
    public class MethodDefaultArgsViaActualFakeOverride {
      @Test
      public void testAllFilesPresentInMethodDefaultArgsViaActualFakeOverride() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("constructor.kt")
      public void testConstructor() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/constructor.kt");
      }

      @Test
      @TestMetadata("delegation.kt")
      public void testDelegation() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation.kt");
      }

      @Test
      @TestMetadata("delegation2.kt")
      public void testDelegation2() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/delegation2.kt");
      }

      @Test
      @TestMetadata("disabledFeature.kt")
      public void testDisabledFeature() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/disabledFeature.kt");
      }

      @Test
      @TestMetadata("intersectionOverride.kt")
      public void testIntersectionOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/intersectionOverride.kt");
      }

      @Test
      @TestMetadata("nestedClass.kt")
      public void testNestedClass() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/nestedClass.kt");
      }

      @Test
      @TestMetadata("realOverride.kt")
      public void testRealOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/realOverride.kt");
      }

      @Test
      @TestMetadata("simple.kt")
      public void testSimple() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simple.kt");
      }

      @Test
      @TestMetadata("simpleIncompatible.kt")
      public void testSimpleIncompatible() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/simpleIncompatible.kt");
      }

      @Test
      @TestMetadata("substitutionOverride.kt")
      public void testSubstitutionOverride() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/defaultArguments/methodDefaultArgsViaActualFakeOverride/substitutionOverride.kt");
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation")
  @TestDataPath("$PROJECT_ROOT")
  public class DeprecatedAnnotation {
    @Test
    public void testAllFilesPresentInDeprecatedAnnotation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("hidden.kt")
    public void testHidden() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/deprecatedAnnotation/hidden.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization")
  @TestDataPath("$PROJECT_ROOT")
  public class DirectJavaActualization {
    @Test
    public void testAllFilesPresentInDirectJavaActualization() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/directJavaActualization"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("directJavaActualization_actualClassWithoutExpect_sharedActual.kt")
    public void testDirectJavaActualization_actualClassWithoutExpect_sharedActual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualClassWithoutExpect_sharedActual.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_actualMemberWithoutExpect_sharedActual.kt")
    public void testDirectJavaActualization_actualMemberWithoutExpect_sharedActual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualMemberWithoutExpect_sharedActual.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_actualWithoutExpect.kt")
    public void testDirectJavaActualization_actualWithoutExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_actualWithoutExpect.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_annotation.kt")
    public void testDirectJavaActualization_annotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotation.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_annotationOnlyOnExpect.kt")
    public void testDirectJavaActualization_annotationOnlyOnExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationOnlyOnExpect.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_annotationPropertyMissingKotlinActualAnnotation.kt")
    public void testDirectJavaActualization_annotationPropertyMissingKotlinActualAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationPropertyMissingKotlinActualAnnotation.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_annotationPropertyTypeMismatch.kt")
    public void testDirectJavaActualization_annotationPropertyTypeMismatch() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_annotationPropertyTypeMismatch.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_clashWithActualTypealias.kt")
    public void testDirectJavaActualization_clashWithActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_clashWithActualTypealias.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_classifierIncompatibilities.kt")
    public void testDirectJavaActualization_classifierIncompatibilities() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_classifierIncompatibilities.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_companionObject.kt")
    public void testDirectJavaActualization_companionObject() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_companionObject.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_defaultParamsInActualFakeOverride.kt")
    public void testDirectJavaActualization_defaultParamsInActualFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInActualFakeOverride.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization.kt")
    public void testDirectJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInActualFakeOverrideAddedDuringActualization.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_defaultParamsInExpect.kt")
    public void testDirectJavaActualization_defaultParamsInExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInExpect.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_defaultParamsInExpectFakeOverride.kt")
    public void testDirectJavaActualization_defaultParamsInExpectFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_defaultParamsInExpectFakeOverride.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_enumStatics.kt")
    public void testDirectJavaActualization_enumStatics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_enumStatics.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_enumWithFun.kt")
    public void testDirectJavaActualization_enumWithFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_enumWithFun.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic.kt")
    public void testDirectJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_excessiveKotlinActualAnnotationOnJavaStatic.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_funInterface_fakeOverrideInJava.kt")
    public void testDirectJavaActualization_funInterface_fakeOverrideInJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_funInterface_fakeOverrideInJava.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_functionModifiers.kt")
    public void testDirectJavaActualization_functionModifiers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_functionModifiers.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_injectEmptySuperclass.kt")
    public void testDirectJavaActualization_injectEmptySuperclass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_injectEmptySuperclass.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_javaInDifferentModule.kt")
    public void testDirectJavaActualization_javaInDifferentModule() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_javaInDifferentModule.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_javaStatics.kt")
    public void testDirectJavaActualization_javaStatics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_javaStatics.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_missingAnnotationOnJava.kt")
    public void testDirectJavaActualization_missingAnnotationOnJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_missingAnnotationOnJava.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_multipleActuals.kt")
    public void testDirectJavaActualization_multipleActuals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_multipleActuals.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_overloadedMethods.kt")
    public void testDirectJavaActualization_overloadedMethods() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_overloadedMethods.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_propertyInActual.kt")
    public void testDirectJavaActualization_propertyInActual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_propertyInActual.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_requiresOptIn.kt")
    public void testDirectJavaActualization_requiresOptIn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_requiresOptIn.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_sealedClass.kt")
    public void testDirectJavaActualization_sealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_sealedClass.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_simple.kt")
    public void testDirectJavaActualization_simple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_simple.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_visibilityModifiers.kt")
    public void testDirectJavaActualization_visibilityModifiers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_visibilityModifiers.kt");
    }

    @Test
    @TestMetadata("directJavaActualization_withTypeParameter.kt")
    public void testDirectJavaActualization_withTypeParameter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/directJavaActualization/directJavaActualization_withTypeParameter.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/enum")
  @TestDataPath("$PROJECT_ROOT")
  public class Enum {
    @Test
    @TestMetadata("additionalEntriesInImpl.kt")
    public void testAdditionalEntriesInImpl() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/additionalEntriesInImpl.kt");
    }

    @Test
    public void testAllFilesPresentInEnum() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/enum"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("constructorInHeaderEnum.kt")
    public void testConstructorInHeaderEnum() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/constructorInHeaderEnum.kt");
    }

    @Test
    @TestMetadata("differentEntryOrder.kt")
    public void testDifferentEntryOrder() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/differentEntryOrder.kt");
    }

    @Test
    @TestMetadata("enumEntryWithBody.kt")
    public void testEnumEntryWithBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/enumEntryWithBody.kt");
    }

    @Test
    @TestMetadata("javaEnum.kt")
    public void testJavaEnum() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/javaEnum.kt");
    }

    @Test
    @TestMetadata("simpleEnum.kt")
    public void testSimpleEnum() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/enum/simpleEnum.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness")
  @TestDataPath("$PROJECT_ROOT")
  public class Exhaustiveness {
    @Test
    public void testAllFilesPresentInExhaustiveness() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/exhaustiveness"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("commonSealedWithPlatformInheritor.kt")
    public void testCommonSealedWithPlatformInheritor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/commonSealedWithPlatformInheritor.kt");
    }

    @Test
    @TestMetadata("expectEnum.kt")
    public void testExpectEnum() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnum.kt");
    }

    @Test
    @TestMetadata("expectEnumIntersection.kt")
    public void testExpectEnumIntersection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectEnumIntersection.kt");
    }

    @Test
    @TestMetadata("expectSealedClass.kt")
    public void testExpectSealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClass.kt");
    }

    @Test
    @TestMetadata("expectSealedClassIntersection.kt")
    public void testExpectSealedClassIntersection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassIntersection.kt");
    }

    @Test
    @TestMetadata("expectSealedClassWithActualTypealias.kt")
    public void testExpectSealedClassWithActualTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithActualTypealias.kt");
    }

    @Test
    @TestMetadata("expectSealedClassWithInheritorsInSeveralModules.kt")
    public void testExpectSealedClassWithInheritorsInSeveralModules() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithInheritorsInSeveralModules.kt");
    }

    @Test
    @TestMetadata("expectSealedClassWithInheritorsInSeveralModules_typealiasActualization.kt")
    public void testExpectSealedClassWithInheritorsInSeveralModules_typealiasActualization() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedClassWithInheritorsInSeveralModules_typealiasActualization.kt");
    }

    @Test
    @TestMetadata("expectSealedInterface.kt")
    public void testExpectSealedInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/expectSealedInterface.kt");
    }

    @Test
    @TestMetadata("kt45796.kt")
    public void testKt45796() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/kt45796.kt");
    }

    @Test
    @TestMetadata("sealedHierarchyInBambooMppStructure.kt")
    public void testSealedHierarchyInBambooMppStructure() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/exhaustiveness/sealedHierarchyInBambooMppStructure.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/generic")
  @TestDataPath("$PROJECT_ROOT")
  public class Generic {
    @Test
    public void testAllFilesPresentInGeneric() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/generic"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("functionTypeParameterBounds.kt")
    public void testFunctionTypeParameterBounds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/generic/functionTypeParameterBounds.kt");
    }

    @Test
    @TestMetadata("genericMemberBounds.kt")
    public void testGenericMemberBounds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/generic/genericMemberBounds.kt");
    }

    @Test
    @TestMetadata("membersInGenericClass.kt")
    public void testMembersInGenericClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/generic/membersInGenericClass.kt");
    }

    @Test
    @TestMetadata("typeParameterBoundsDifferentOrderActualMissing.kt")
    public void testTypeParameterBoundsDifferentOrderActualMissing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/generic/typeParameterBoundsDifferentOrderActualMissing.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/headerClass")
  @TestDataPath("$PROJECT_ROOT")
  public class HeaderClass {
    @Test
    @TestMetadata("actualClassWithDefaultValuesInAnnotationViaTypealias.kt")
    public void testActualClassWithDefaultValuesInAnnotationViaTypealias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDefaultValuesInAnnotationViaTypealias.kt");
    }

    @Test
    @TestMetadata("actualClassWithDifferentConstructors.kt")
    public void testActualClassWithDifferentConstructors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualClassWithDifferentConstructors.kt");
    }

    @Test
    @TestMetadata("actualMethodInExpectClass.kt")
    public void testActualMethodInExpectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMethodInExpectClass.kt");
    }

    @Test
    @TestMetadata("actualMissing.kt")
    public void testActualMissing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/actualMissing.kt");
    }

    @Test
    public void testAllFilesPresentInHeaderClass() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/headerClass"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("baseExpectClassWithoutConstructor.kt")
    public void testBaseExpectClassWithoutConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/baseExpectClassWithoutConstructor.kt");
    }

    @Test
    @TestMetadata("classKinds.kt")
    public void testClassKinds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/classKinds.kt");
    }

    @Test
    @TestMetadata("dontOverrideMethodsFromInterfaceInCommonCode.kt")
    public void testDontOverrideMethodsFromInterfaceInCommonCode() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/dontOverrideMethodsFromInterfaceInCommonCode.kt");
    }

    @Test
    @TestMetadata("equalsOverrideInActualInterface.kt")
    public void testEqualsOverrideInActualInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/equalsOverrideInActualInterface.kt");
    }

    @Test
    @TestMetadata("expectClassWithExplicitAbstractMember.kt")
    public void testExpectClassWithExplicitAbstractMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithExplicitAbstractMember.kt");
    }

    @Test
    @TestMetadata("expectClassWithoutConstructor.kt")
    public void testExpectClassWithoutConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectClassWithoutConstructor.kt");
    }

    @Test
    @TestMetadata("expectDeclarationWithStrongIncompatibilities.kt")
    public void testExpectDeclarationWithStrongIncompatibilities() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithStrongIncompatibilities.kt");
    }

    @Test
    @TestMetadata("expectDeclarationWithWeakIncompatibilities.kt")
    public void testExpectDeclarationWithWeakIncompatibilities() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectDeclarationWithWeakIncompatibilities.kt");
    }

    @Test
    @TestMetadata("expectFinalActualOpen.kt")
    public void testExpectFinalActualOpen() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFinalActualOpen.kt");
    }

    @Test
    @TestMetadata("expectFunInterface.kt")
    public void testExpectFunInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectFunInterface.kt");
    }

    @Test
    @TestMetadata("expectedClassConstructorPropertyParameters.kt")
    public void testExpectedClassConstructorPropertyParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/expectedClassConstructorPropertyParameters.kt");
    }

    @Test
    @TestMetadata("explicitConstructorDelegation.kt")
    public void testExplicitConstructorDelegation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/explicitConstructorDelegation.kt");
    }

    @Test
    @TestMetadata("extendExpectedClassWithAbstractMember.kt")
    public void testExtendExpectedClassWithAbstractMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithAbstractMember.kt");
    }

    @Test
    @TestMetadata("extendExpectedClassWithoutExplicitOverrideOfMethod.kt")
    public void testExtendExpectedClassWithoutExplicitOverrideOfMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/extendExpectedClassWithoutExplicitOverrideOfMethod.kt");
    }

    @Test
    @TestMetadata("extraHeaderOnMembers.kt")
    public void testExtraHeaderOnMembers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/extraHeaderOnMembers.kt");
    }

    @Test
    @TestMetadata("functionAndPropertyWithSameName.kt")
    public void testFunctionAndPropertyWithSameName() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/functionAndPropertyWithSameName.kt");
    }

    @Test
    @TestMetadata("genericClassImplTypeAlias.kt")
    public void testGenericClassImplTypeAlias() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/genericClassImplTypeAlias.kt");
    }

    @Test
    @TestMetadata("headerClassMember.kt")
    public void testHeaderClassMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassMember.kt");
    }

    @Test
    @TestMetadata("headerClassWithFunctionBody.kt")
    public void testHeaderClassWithFunctionBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/headerClassWithFunctionBody.kt");
    }

    @Test
    @TestMetadata("implDataClass.kt")
    public void testImplDataClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/implDataClass.kt");
    }

    @Test
    @TestMetadata("implOpenClass.kt")
    public void testImplOpenClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/implOpenClass.kt");
    }

    @Test
    @TestMetadata("inheritanceByDelegationInExpectClass.kt")
    public void testInheritanceByDelegationInExpectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/inheritanceByDelegationInExpectClass.kt");
    }

    @Test
    @TestMetadata("memberPropertyKinds.kt")
    public void testMemberPropertyKinds() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/memberPropertyKinds.kt");
    }

    @Test
    @TestMetadata("modalityCheckForExplicitAndImplicitOverride.kt")
    public void testModalityCheckForExplicitAndImplicitOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/modalityCheckForExplicitAndImplicitOverride.kt");
    }

    @Test
    @TestMetadata("morePermissiveVisibilityOnActual.kt")
    public void testMorePermissiveVisibilityOnActual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActual.kt");
    }

    @Test
    @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt")
    public void testMorePermissiveVisibilityOnActualViaTypeAlias_finalMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_finalMember.kt");
    }

    @Test
    @TestMetadata("morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt")
    public void testMorePermissiveVisibilityOnActualViaTypeAlias_openMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/morePermissiveVisibilityOnActualViaTypeAlias_openMember.kt");
    }

    @Test
    @TestMetadata("nestedClasses.kt")
    public void testNestedClasses() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClasses.kt");
    }

    @Test
    @TestMetadata("nestedClassesWithErrors.kt")
    public void testNestedClassesWithErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/nestedClassesWithErrors.kt");
    }

    @Test
    @TestMetadata("noImplKeywordOnMember.kt")
    public void testNoImplKeywordOnMember() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/noImplKeywordOnMember.kt");
    }

    @Test
    @TestMetadata("privateMembers.kt")
    public void testPrivateMembers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/privateMembers.kt");
    }

    @Test
    @TestMetadata("simpleHeaderClass.kt")
    public void testSimpleHeaderClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/simpleHeaderClass.kt");
    }

    @Test
    @TestMetadata("smartCastOnExpectClass.kt")
    public void testSmartCastOnExpectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/smartCastOnExpectClass.kt");
    }

    @Test
    @TestMetadata("superClass.kt")
    public void testSuperClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/headerClass/superClass.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp")
  @TestDataPath("$PROJECT_ROOT")
  public class Hmpp {
    @Test
    @TestMetadata("actualizationToExpectClass.kt")
    public void testActualizationToExpectClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizationToExpectClass.kt");
    }

    @Test
    @TestMetadata("actualizeSubtypeBeforeSupertype.kt")
    public void testActualizeSubtypeBeforeSupertype() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizeSubtypeBeforeSupertype.kt");
    }

    @Test
    @TestMetadata("actualizedInPlatformSession.kt")
    public void testActualizedInPlatformSession() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/actualizedInPlatformSession.kt");
    }

    @Test
    public void testAllFilesPresentInHmpp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("ambiguousActuals.kt")
    public void testAmbiguousActuals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/ambiguousActuals.kt");
    }

    @Test
    @TestMetadata("hmppModalityClash.kt")
    public void testHmppModalityClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppModalityClash.kt");
    }

    @Test
    @TestMetadata("hmppRedeclaration.kt")
    public void testHmppRedeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclaration.kt");
    }

    @Test
    @TestMetadata("hmppRedeclarationWithExpectActualPair.kt")
    public void testHmppRedeclarationWithExpectActualPair() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppRedeclarationWithExpectActualPair.kt");
    }

    @Test
    @TestMetadata("hmppSignatureClash.kt")
    public void testHmppSignatureClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/hmppSignatureClash.kt");
    }

    @Test
    @TestMetadata("intermediateActualHasAdditionalSupertypes.kt")
    public void testIntermediateActualHasAdditionalSupertypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/intermediateActualHasAdditionalSupertypes.kt");
    }

    @Test
    @TestMetadata("kt57320.kt")
    public void testKt57320() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/kt57320.kt");
    }

    @Test
    @TestMetadata("kt-55570.kt")
    public void testKt_55570() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/kt-55570.kt");
    }

    @Test
    @TestMetadata("recursiveActualTypealiasExpansion_1.kt")
    public void testRecursiveActualTypealiasExpansion_1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/recursiveActualTypealiasExpansion_1.kt");
    }

    @Test
    @TestMetadata("recursiveActualTypealiasExpansion_2.kt")
    public void testRecursiveActualTypealiasExpansion_2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/recursiveActualTypealiasExpansion_2.kt");
    }

    @Test
    @TestMetadata("simple.kt")
    public void testSimple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/simple.kt");
    }

    @Nested
    @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis")
    @TestDataPath("$PROJECT_ROOT")
    public class MultiplatformCompositeAnalysis {
      @Test
      public void testAllFilesPresentInMultiplatformCompositeAnalysis() {
        KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
      }

      @Test
      @TestMetadata("expectAndActualInTheSameModule.kt")
      public void testExpectAndActualInTheSameModule() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModule.kt");
      }

      @Test
      @TestMetadata("expectAndActualInTheSameModuleIncompatibilities.kt")
      public void testExpectAndActualInTheSameModuleIncompatibilities() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/expectAndActualInTheSameModuleIncompatibilities.kt");
      }

      @Test
      @TestMetadata("intermediateWithActualAndExpect.kt")
      public void testIntermediateWithActualAndExpect() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/intermediateWithActualAndExpect.kt");
      }

      @Test
      @TestMetadata("sealedInheritorsCorrectExpect.kt")
      public void testSealedInheritorsCorrectExpect() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsCorrectExpect.kt");
      }

      @Test
      @TestMetadata("sealedInheritorsInComplexModuleStructure.kt")
      public void testSealedInheritorsInComplexModuleStructure() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsInComplexModuleStructure.kt");
      }

      @Test
      @TestMetadata("sealedInheritorsIncorrectExpect.kt")
      public void testSealedInheritorsIncorrectExpect() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectExpect.kt");
      }

      @Test
      @TestMetadata("sealedInheritorsIncorrectNonExpect.kt")
      public void testSealedInheritorsIncorrectNonExpect() {
        runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/sealedInheritorsIncorrectNonExpect.kt");
      }

      @Nested
      @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching")
      @TestDataPath("$PROJECT_ROOT")
      public class AnnotationMatching {
        @Test
        public void testAllFilesPresentInAnnotationMatching() {
          KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
        }

        @Test
        @TestMetadata("sourceRetentionAnnotationsWhenTypealias.kt")
        public void testSourceRetentionAnnotationsWhenTypealias() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/sourceRetentionAnnotationsWhenTypealias.kt");
        }

        @Test
        @TestMetadata("typealiasedAnnotation.kt")
        public void testTypealiasedAnnotation() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotation.kt");
        }

        @Test
        @TestMetadata("typealiasedAnnotationAsArgument.kt")
        public void testTypealiasedAnnotationAsArgument() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAnnotationAsArgument.kt");
        }

        @Test
        @TestMetadata("typealiasedAsKClassArg.kt")
        public void testTypealiasedAsKClassArg() {
          runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/hmpp/multiplatformCompositeAnalysis/annotationMatching/typealiasedAsKClassArg.kt");
        }
      }
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/inlineClasses")
  @TestDataPath("$PROJECT_ROOT")
  public class InlineClasses {
    @Test
    public void testAllFilesPresentInInlineClasses() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/inlineClasses"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("expectActualInlineClass.kt")
    public void testExpectActualInlineClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/expectActualInlineClass.kt");
    }

    @Test
    @TestMetadata("jvmInlineExpectValueClass.kt")
    public void testJvmInlineExpectValueClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/jvmInlineExpectValueClass.kt");
    }

    @Test
    @TestMetadata("valueClassNotFinal.kt")
    public void testValueClassNotFinal() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/valueClassNotFinal.kt");
    }

    @Test
    @TestMetadata("valueClassWithInapplicableParameterType.kt")
    public void testValueClassWithInapplicableParameterType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/inlineClasses/valueClassWithInapplicableParameterType.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/java")
  @TestDataPath("$PROJECT_ROOT")
  public class Java {
    @Test
    @TestMetadata("actualJavaSealedClass.kt")
    public void testActualJavaSealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/actualJavaSealedClass.kt");
    }

    @Test
    public void testAllFilesPresentInJava() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/java"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("flexibleTypes.kt")
    public void testFlexibleTypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/flexibleTypes.kt");
    }

    @Test
    @TestMetadata("implicitJavaActualizationAllowed.kt")
    public void testImplicitJavaActualizationAllowed() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationAllowed.kt");
    }

    @Test
    @TestMetadata("implicitJavaActualizationDisallowed.kt")
    public void testImplicitJavaActualizationDisallowed() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualizationDisallowed.kt");
    }

    @Test
    @TestMetadata("implicitJavaActualization_multipleActuals.kt")
    public void testImplicitJavaActualization_multipleActuals() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_multipleActuals.kt");
    }

    @Test
    @TestMetadata("implicitJavaActualization_oldLanguageVersion.kt")
    public void testImplicitJavaActualization_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/implicitJavaActualization_oldLanguageVersion.kt");
    }

    @Test
    @TestMetadata("inheritedJavaMembers.kt")
    public void testInheritedJavaMembers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/inheritedJavaMembers.kt");
    }

    @Test
    @TestMetadata("parameterNames.kt")
    public void testParameterNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/parameterNames.kt");
    }

    @Test
    @TestMetadata("propertyAgainstFakeOverrideInJava.kt")
    public void testPropertyAgainstFakeOverrideInJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideInJava.kt");
    }

    @Test
    @TestMetadata("propertyAgainstFakeOverrideOfJavaField.kt")
    public void testPropertyAgainstFakeOverrideOfJavaField() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstFakeOverrideOfJavaField.kt");
    }

    @Test
    @TestMetadata("propertyAgainstJavaMethod.kt")
    public void testPropertyAgainstJavaMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaMethod.kt");
    }

    @Test
    @TestMetadata("propertyAgainstJavaPrivateFieldAndPublicMethod.kt")
    public void testPropertyAgainstJavaPrivateFieldAndPublicMethod() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPrivateFieldAndPublicMethod.kt");
    }

    @Test
    @TestMetadata("propertyAgainstJavaPublicFieldAndPublicGetter.kt")
    public void testPropertyAgainstJavaPublicFieldAndPublicGetter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstJavaPublicFieldAndPublicGetter.kt");
    }

    @Test
    @TestMetadata("propertyAgainstValInJavaWithExtraSetter.kt")
    public void testPropertyAgainstValInJavaWithExtraSetter() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/propertyAgainstValInJavaWithExtraSetter.kt");
    }

    @Test
    @TestMetadata("varPropertyAgainstJavaField.kt")
    public void testVarPropertyAgainstJavaField() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaField.kt");
    }

    @Test
    @TestMetadata("varPropertyAgainstJavaGetterAndNonFinalField.kt")
    public void testVarPropertyAgainstJavaGetterAndNonFinalField() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/java/varPropertyAgainstJavaGetterAndNonFinalField.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/scopes")
  @TestDataPath("$PROJECT_ROOT")
  public class Scopes {
    @Test
    @TestMetadata("actualAbstractClassWithAdditionalMembers.kt")
    public void testActualAbstractClassWithAdditionalMembers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualAbstractClassWithAdditionalMembers.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride.kt")
    public void testActualFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride.kt");
    }

    @Test
    @TestMetadata("actualFakeOverrideVirtual.kt")
    public void testActualFakeOverrideVirtual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverrideVirtual.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_defaultParamsIncompatibility.kt")
    public void testActualFakeOverride_defaultParamsIncompatibility() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_defaultParamsIncompatibility.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt")
    public void testActualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaSharedMethodWithDefaultParams.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt")
    public void testActualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_paramsAreCompatibleViaTransitiveSharedMethodWithDefaultParams.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_substitutionFakeOverride.kt")
    public void testActualFakeOverride_substitutionFakeOverride() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_substitutionFakeOverride.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_transitiveFakeOverrides_compatible.kt")
    public void testActualFakeOverride_transitiveFakeOverrides_compatible() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_compatible.kt");
    }

    @Test
    @TestMetadata("actualFakeOverride_transitiveFakeOverrides_incompatible.kt")
    public void testActualFakeOverride_transitiveFakeOverrides_incompatible() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/actualFakeOverride_transitiveFakeOverrides_incompatible.kt");
    }

    @Test
    public void testAllFilesPresentInScopes() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/scopes"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("defaultParams_inheritanceByDelegation_negative.kt")
    public void testDefaultParams_inheritanceByDelegation_negative() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_negative.kt");
    }

    @Test
    @TestMetadata("defaultParams_inheritanceByDelegation_positive.kt")
    public void testDefaultParams_inheritanceByDelegation_positive() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/defaultParams_inheritanceByDelegation_positive.kt");
    }

    @Test
    @TestMetadata("expectFunInterface.kt")
    public void testExpectFunInterface() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/expectFunInterface.kt");
    }

    @Test
    @TestMetadata("expectFunInterfaceIsHeirOfExpect.kt")
    public void testExpectFunInterfaceIsHeirOfExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/expectFunInterfaceIsHeirOfExpect.kt");
    }

    @Test
    @TestMetadata("funInterfaceDiagnostics.kt")
    public void testFunInterfaceDiagnostics() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceDiagnostics.kt");
    }

    @Test
    @TestMetadata("funInterfaceIsHeirOfExpect.kt")
    public void testFunInterfaceIsHeirOfExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfExpect.kt");
    }

    @Test
    @TestMetadata("funInterfaceIsHeirOfExpectJK.kt")
    public void testFunInterfaceIsHeirOfExpectJK() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfExpectJK.kt");
    }

    @Test
    @TestMetadata("funInterfaceIsHeirOfTwoExpect.kt")
    public void testFunInterfaceIsHeirOfTwoExpect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/funInterfaceIsHeirOfTwoExpect.kt");
    }

    @Test
    @TestMetadata("implicitActualFakeOverride_AbstractMap.kt")
    public void testImplicitActualFakeOverride_AbstractMap() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_AbstractMap.kt");
    }

    @Test
    @TestMetadata("implicitActualFakeOverride_simple.kt")
    public void testImplicitActualFakeOverride_simple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/implicitActualFakeOverride_simple.kt");
    }

    @Test
    @TestMetadata("manyImplMemberNotImplemented.kt")
    public void testManyImplMemberNotImplemented() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/manyImplMemberNotImplemented.kt");
    }

    @Test
    @TestMetadata("manyInterfacesMemberNotImplemented.kt")
    public void testManyInterfacesMemberNotImplemented() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/manyInterfacesMemberNotImplemented.kt");
    }

    @Test
    @TestMetadata("methodsConflictingOverloads.kt")
    public void testMethodsConflictingOverloads() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/methodsConflictingOverloads.kt");
    }

    @Test
    @TestMetadata("mixedFunctionalTypesInSupertypes.kt")
    public void testMixedFunctionalTypesInSupertypes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/mixedFunctionalTypesInSupertypes.kt");
    }

    @Test
    @TestMetadata("multipleDefaultsInhereted.kt")
    public void testMultipleDefaultsInhereted() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/multipleDefaultsInhereted.kt");
    }

    @Test
    @TestMetadata("multipleExpectInterfacesImplementation.kt")
    public void testMultipleExpectInterfacesImplementation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/multipleExpectInterfacesImplementation.kt");
    }

    @Test
    @TestMetadata("nestedClassesRedeclaration.kt")
    public void testNestedClassesRedeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/nestedClassesRedeclaration.kt");
    }

    @Test
    @TestMetadata("propertyRedeclaration.kt")
    public void testPropertyRedeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/scopes/propertyRedeclaration.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/smartCasts")
  @TestDataPath("$PROJECT_ROOT")
  public class SmartCasts {
    @Test
    public void testAllFilesPresentInSmartCasts() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/smartCasts"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("classNoDefaultConstructor.kt")
    public void testClassNoDefaultConstructor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/classNoDefaultConstructor.kt");
    }

    @Test
    @TestMetadata("inlineFunction.kt")
    public void testInlineFunction() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/inlineFunction.kt");
    }

    @Test
    @TestMetadata("kt61340_commonCode.kt")
    public void testKt61340_commonCode() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_commonCode.kt");
    }

    @Test
    @TestMetadata("kt61340_platformCode.kt")
    public void testKt61340_platformCode() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/smartCasts/kt61340_platformCode.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelFun")
  @TestDataPath("$PROJECT_ROOT")
  public class TopLevelFun {
    @Test
    public void testAllFilesPresentInTopLevelFun() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelFun"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("callHeaderFun.kt")
    public void testCallHeaderFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callHeaderFun.kt");
    }

    @Test
    @TestMetadata("callableReferenceOnExpectFun.kt")
    public void testCallableReferenceOnExpectFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/callableReferenceOnExpectFun.kt");
    }

    @Test
    @TestMetadata("conflictingHeaderDeclarations.kt")
    public void testConflictingHeaderDeclarations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingHeaderDeclarations.kt");
    }

    @Test
    @TestMetadata("conflictingImplDeclarations.kt")
    public void testConflictingImplDeclarations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/conflictingImplDeclarations.kt");
    }

    @Test
    @TestMetadata("expectActualExtension.kt")
    public void testExpectActualExtension() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/expectActualExtension.kt");
    }

    @Test
    @TestMetadata("functionModifiers.kt")
    public void testFunctionModifiers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/functionModifiers.kt");
    }

    @Test
    @TestMetadata("headerAndImplInDIfferentPackages.kt")
    public void testHeaderAndImplInDIfferentPackages() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerAndImplInDIfferentPackages.kt");
    }

    @Test
    @TestMetadata("headerDeclarationWithBody.kt")
    public void testHeaderDeclarationWithBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerDeclarationWithBody.kt");
    }

    @Test
    @TestMetadata("headerWithoutImpl.kt")
    public void testHeaderWithoutImpl() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/headerWithoutImpl.kt");
    }

    @Test
    @TestMetadata("implDeclarationWithoutBody.kt")
    public void testImplDeclarationWithoutBody() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implDeclarationWithoutBody.kt");
    }

    @Test
    @TestMetadata("implWithoutHeader.kt")
    public void testImplWithoutHeader() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/implWithoutHeader.kt");
    }

    @Test
    @TestMetadata("inlineFun.kt")
    public void testInlineFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/inlineFun.kt");
    }

    @Test
    @TestMetadata("simpleHeaderFun.kt")
    public void testSimpleHeaderFun() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/simpleHeaderFun.kt");
    }

    @Test
    @TestMetadata("valueParameterModifiers.kt")
    public void testValueParameterModifiers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelFun/valueParameterModifiers.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty")
  @TestDataPath("$PROJECT_ROOT")
  public class TopLevelProperty {
    @Test
    public void testAllFilesPresentInTopLevelProperty() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/topLevelProperty"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("differentKindsOfProperties.kt")
    public void testDifferentKindsOfProperties() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/differentKindsOfProperties.kt");
    }

    @Test
    @TestMetadata("expectActualExtensionProperty.kt")
    public void testExpectActualExtensionProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/expectActualExtensionProperty.kt");
    }

    @Test
    @TestMetadata("redeclarationBasicCases.kt")
    public void testRedeclarationBasicCases() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/redeclarationBasicCases.kt");
    }

    @Test
    @TestMetadata("redeclarationBasicCasesHMPP.kt")
    public void testRedeclarationBasicCasesHMPP() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/redeclarationBasicCasesHMPP.kt");
    }

    @Test
    @TestMetadata("simpleHeaderVar.kt")
    public void testSimpleHeaderVar() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/topLevelProperty/simpleHeaderVar.kt");
    }
  }

  @Nested
  @TestMetadata("compiler/testData/diagnostics/tests/multiplatform/typealias")
  @TestDataPath("$PROJECT_ROOT")
  public class Typealias {
    @Test
    @TestMetadata("actualTypealiasClassifierRedeclaration.kt")
    public void testActualTypealiasClassifierRedeclaration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasClassifierRedeclaration.kt");
    }

    @Test
    @TestMetadata("actualTypealiasToNothing.kt")
    public void testActualTypealiasToNothing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing.kt");
    }

    @Test
    @TestMetadata("actualTypealiasToNothing_oldLanguageVersion.kt")
    public void testActualTypealiasToNothing_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNothing_oldLanguageVersion.kt");
    }

    @Test
    @TestMetadata("actualTypealiasToNullableType.kt")
    public void testActualTypealiasToNullableType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType.kt");
    }

    @Test
    @TestMetadata("actualTypealiasToNullableType_oldLanguageVersion.kt")
    public void testActualTypealiasToNullableType_oldLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/diagnostics/tests/multiplatform/typealias/actualTypealiasToNullableType_oldLanguageVersion.kt");
    }

    @Test
    public void testAllFilesPresentInTypealias() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/diagnostics/tests/multiplatform/typealias"), Pattern.compile("^(.*)\\.kts?$"), Pattern.compile("^(.+)\\.(reversed|fir|ll|latestLV)\\.kts?$"), TargetBackend.JVM_IR, true);
    }
  }
}
