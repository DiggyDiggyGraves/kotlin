/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.cli;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.test.generators.GenerateCompilerTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@RunWith(JUnit3RunnerWithInners.class)
public class CliTestGenerated extends AbstractCliTest {
  @TestMetadata("compiler/testData/cli/jvm/readingConfigFromEnvironment")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ReadingConfigFromEnvironment extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInReadingConfigFromEnvironment() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/readingConfigFromEnvironment"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("appendingArgs.args")
    public void testAppendingArgs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/readingConfigFromEnvironment/appendingArgs.args");
    }

    @TestMetadata("overridingArgs.args")
    public void testOverridingArgs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/readingConfigFromEnvironment/overridingArgs.args");
    }

    @TestMetadata("overridingLv.args")
    public void testOverridingLv() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/readingConfigFromEnvironment/overridingLv.args");
    }

    @TestMetadata("overridingXx.args")
    public void testOverridingXx() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/readingConfigFromEnvironment/overridingXx.args");
    }

    @TestMetadata("simple.args")
    public void testSimple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/readingConfigFromEnvironment/simple.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/plugins")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Plugins extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInPlugins() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/plugins"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("emptyPlugin.args")
    public void testEmptyPlugin() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/emptyPlugin.args");
    }

    @TestMetadata("firAllOpenPlugin_legacy.args")
    public void testFirAllOpenPlugin_legacy() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/firAllOpenPlugin_legacy.args");
    }

    @TestMetadata("firAllOpenPlugin_modern.args")
    public void testFirAllOpenPlugin_modern() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/firAllOpenPlugin_modern.args");
    }

    @TestMetadata("mixingModernAndLegacyArgs.args")
    public void testMixingModernAndLegacyArgs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/mixingModernAndLegacyArgs.args");
    }

    @TestMetadata("multipleOptionsForOnePlugin.args")
    public void testMultipleOptionsForOnePlugin() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/multipleOptionsForOnePlugin.args");
    }

    @TestMetadata("multiplePlugins.args")
    public void testMultiplePlugins() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/multiplePlugins.args");
    }

    @TestMetadata("multiplePluginsInSameArg.args")
    public void testMultiplePluginsInSameArg() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/multiplePluginsInSameArg.args");
    }

    @TestMetadata("noPluginInClasspath.args")
    public void testNoPluginInClasspath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/plugins/noPluginInClasspath.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/hmpp")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Hmpp extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInHmpp() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/hmpp"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("cycleInDependencies.args")
    public void testCycleInDependencies() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/cycleInDependencies.args");
    }

    @TestMetadata("duplicatedFragments.args")
    public void testDuplicatedFragments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/duplicatedFragments.args");
    }

    @TestMetadata("fragmentSourcesIncorrectSyntax.args")
    public void testFragmentSourcesIncorrectSyntax() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/fragmentSourcesIncorrectSyntax.args");
    }

    @TestMetadata("fragmentWithoutSources.args")
    public void testFragmentWithoutSources() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/fragmentWithoutSources.args");
    }

    @TestMetadata("lowLanguageVersion.args")
    public void testLowLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/lowLanguageVersion.args");
    }

    @TestMetadata("missingFragment.args")
    public void testMissingFragment() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/missingFragment.args");
    }

    @TestMetadata("refinesSingleModule.args")
    public void testRefinesSingleModule() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/refinesSingleModule.args");
    }

    @TestMetadata("refinesWithoutFragments.args")
    public void testRefinesWithoutFragments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/refinesWithoutFragments.args");
    }

    @TestMetadata("sameSourceInDifferentFragments.args")
    public void testSameSourceInDifferentFragments() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/sameSourceInDifferentFragments.args");
    }

    @TestMetadata("scriptInCommonFragment.args")
    public void testScriptInCommonFragment() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/scriptInCommonFragment.args");
    }

    @TestMetadata("sourceNotInAnyFragment.args")
    public void testSourceNotInAnyFragment() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/sourceNotInAnyFragment.args");
    }

    @TestMetadata("successfulCompilation.args")
    public void testSuccessfulCompilation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/successfulCompilation.args");
    }

    @TestMetadata("successfulCompilation2.args")
    public void testSuccessfulCompilation2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/successfulCompilation2.args");
    }

    @TestMetadata("successfulCompilationWithScript.args")
    public void testSuccessfulCompilationWithScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/hmpp/successfulCompilationWithScript.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/apiVersion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ApiVersion extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInApiVersion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/apiVersion"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("apiVersion.args")
    public void testApiVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersion.args");
    }

    @TestMetadata("apiVersionAndSinceNewerKotlin.args")
    public void testApiVersionAndSinceNewerKotlin() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionAndSinceNewerKotlin.args");
    }

    @TestMetadata("apiVersionGreaterThanLanguage.args")
    public void testApiVersionGreaterThanLanguage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionGreaterThanLanguage.args");
    }

    @TestMetadata("apiVersionGreaterThanLanguageSuppress.args")
    public void testApiVersionGreaterThanLanguageSuppress() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionGreaterThanLanguageSuppress.args");
    }

    @TestMetadata("apiVersionGreaterThanLanguageSuppressUseless.args")
    public void testApiVersionGreaterThanLanguageSuppressUseless() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionGreaterThanLanguageSuppressUseless.args");
    }

    @TestMetadata("apiVersionInvalid.args")
    public void testApiVersionInvalid() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionInvalid.args");
    }

    @TestMetadata("apiVersionLessThanLanguage.args")
    public void testApiVersionLessThanLanguage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionLessThanLanguage.args");
    }

    @TestMetadata("apiVersionLessThanLanguageUsingArgfile.args")
    public void testApiVersionLessThanLanguageUsingArgfile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionLessThanLanguageUsingArgfile.args");
    }

    @TestMetadata("apiVersionUnsupported.args")
    public void testApiVersionUnsupported() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/apiVersionUnsupported.args");
    }

    @TestMetadata("deprecatedApiVersion.args")
    public void testDeprecatedApiVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiVersion/deprecatedApiVersion.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/argFileCommonChecks")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ArgFileCommonChecks extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInArgFileCommonChecks() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/argFileCommonChecks"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("argfileWithEmptyArgument.args")
    public void testArgfileWithEmptyArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argFileCommonChecks/argfileWithEmptyArgument.args");
    }

    @TestMetadata("argfileWithEscaping.args")
    public void testArgfileWithEscaping() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argFileCommonChecks/argfileWithEscaping.args");
    }

    @TestMetadata("argfileWithUnfinishedQuoteAndEscape.args")
    public void testArgfileWithUnfinishedQuoteAndEscape() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argFileCommonChecks/argfileWithUnfinishedQuoteAndEscape.args");
    }

    @TestMetadata("mixingArgfilesAndUsualArgs.args")
    public void testMixingArgfilesAndUsualArgs() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argFileCommonChecks/mixingArgfilesAndUsualArgs.args");
    }

    @TestMetadata("nonexistingArgfile.args")
    public void testNonexistingArgfile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argFileCommonChecks/nonexistingArgfile.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/diagnosticTests")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class DiagnosticTests extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInDiagnosticTests() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/diagnosticTests"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("classAndFileClassClash.args")
    public void testClassAndFileClassClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/classAndFileClassClash.args");
    }

    @TestMetadata("classAndOtherFileClassClash.args")
    public void testClassAndOtherFileClassClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/classAndOtherFileClassClash.args");
    }

    @TestMetadata("classAndPartClash.args")
    public void testClassAndPartClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/classAndPartClash.args");
    }

    @TestMetadata("classAndTraitClash.args")
    public void testClassAndTraitClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/classAndTraitClash.args");
    }

    @TestMetadata("classpath.args")
    public void testClasspath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/classpath.args");
    }

    @TestMetadata("conflictingJvmDeclarations.args")
    public void testConflictingJvmDeclarations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/conflictingJvmDeclarations.args");
    }

    @TestMetadata("conflictingJvmDeclarationsK2.args")
    public void testConflictingJvmDeclarationsK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/conflictingJvmDeclarationsK2.args");
    }

    @TestMetadata("conflictingOverloads.args")
    public void testConflictingOverloads() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/conflictingOverloads.args");
    }

    @TestMetadata("conflictingProjection.args")
    public void testConflictingProjection() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/conflictingProjection.args");
    }

    @TestMetadata("diagnosticsOrder.args")
    public void testDiagnosticsOrder() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/diagnosticsOrder.args");
    }

    @TestMetadata("fileClassAndMultifileClassClash.args")
    public void testFileClassAndMultifileClassClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/fileClassAndMultifileClassClash.args");
    }

    @TestMetadata("fileClassAndTImplClash.args")
    public void testFileClassAndTImplClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/fileClassAndTImplClash.args");
    }

    @TestMetadata("fileClassClashMultipleFiles.args")
    public void testFileClassClashMultipleFiles() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/fileClassClashMultipleFiles.args");
    }

    @TestMetadata("firDeprecationJava.args")
    public void testFirDeprecationJava() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/firDeprecationJava.args");
    }

    @TestMetadata("firDfa.args")
    public void testFirDfa() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/firDfa.args");
    }

    @TestMetadata("firError.args")
    public void testFirError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/firError.args");
    }

    @TestMetadata("forbidKotlinPackageK1.args")
    public void testForbidKotlinPackageK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/forbidKotlinPackageK1.args");
    }

    @TestMetadata("forbidKotlinPackageK2.args")
    public void testForbidKotlinPackageK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/forbidKotlinPackageK2.args");
    }

    @TestMetadata("fullyQualifiedDeepJavaIndividual.args")
    public void testFullyQualifiedDeepJavaIndividual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/fullyQualifiedDeepJavaIndividual.args");
    }

    @TestMetadata("fullyQualifiedDeepJavaWholeRoot.args")
    public void testFullyQualifiedDeepJavaWholeRoot() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/fullyQualifiedDeepJavaWholeRoot.args");
    }

    @TestMetadata("inapplicableLateinitModifier.args")
    public void testInapplicableLateinitModifier() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/inapplicableLateinitModifier.args");
    }

    @TestMetadata("inlineCycle.args")
    public void testInlineCycle() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/inlineCycle.args");
    }

    @TestMetadata("instanceAccessBeforeSuperCall.args")
    public void testInstanceAccessBeforeSuperCall() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/instanceAccessBeforeSuperCall.args");
    }

    @TestMetadata("javaSealedClass.args")
    public void testJavaSealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/javaSealedClass.args");
    }

    @TestMetadata("javaSrcWrongPackage.args")
    public void testJavaSrcWrongPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/javaSrcWrongPackage.args");
    }

    @TestMetadata("javacKotlinJavaInterdependency.args")
    public void testJavacKotlinJavaInterdependency() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/javacKotlinJavaInterdependency.args");
    }

    @TestMetadata("kotlinPackage.args")
    public void testKotlinPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/kotlinPackage.args");
    }

    @TestMetadata("kt19628_13.args")
    public void testKt19628_13() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/kt19628_13.args");
    }

    @TestMetadata("kt22304.args")
    public void testKt22304() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/kt22304.args");
    }

    @TestMetadata("multipleTextRangesInDiagnosticsOrder.args")
    public void testMultipleTextRangesInDiagnosticsOrder() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/multipleTextRangesInDiagnosticsOrder.args");
    }

    @TestMetadata("newLineInPackage.args")
    public void testNewLineInPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/newLineInPackage.args");
    }

    @TestMetadata("recordAsSingleFileRoot.args")
    public void testRecordAsSingleFileRoot() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/recordAsSingleFileRoot.args");
    }

    @TestMetadata("requireKotlinCompilerVersion.args")
    public void testRequireKotlinCompilerVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/requireKotlinCompilerVersion.args");
    }

    @TestMetadata("requireKotlinCompilerVersionK2.args")
    public void testRequireKotlinCompilerVersionK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/requireKotlinCompilerVersionK2.args");
    }

    @TestMetadata("resultInReturnTypeSupportedByDefault15.args")
    public void testResultInReturnTypeSupportedByDefault15() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/resultInReturnTypeSupportedByDefault15.args");
    }

    @TestMetadata("returnAsWhenKey.args")
    public void testReturnAsWhenKey() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/returnAsWhenKey.args");
    }

    @TestMetadata("sanitized-name.clash.args")
    public void testSanitized_name_clash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/sanitized-name.clash.args");
    }

    @TestMetadata("signatureClash.args")
    public void testSignatureClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/signatureClash.args");
    }

    @TestMetadata("singleJavaFileRoots.args")
    public void testSingleJavaFileRoots() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/singleJavaFileRoots.args");
    }

    @TestMetadata("suspensionPointInMonitor.args")
    public void testSuspensionPointInMonitor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/suspensionPointInMonitor.args");
    }

    @TestMetadata("warningsInDummy.args")
    public void testWarningsInDummy() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/warningsInDummy.args");
    }

    @TestMetadata("wrongAnnotationArgumentInCtor.args")
    public void testWrongAnnotationArgumentInCtor() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/diagnosticTests/wrongAnnotationArgumentInCtor.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/extraArgCommonChecks")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class ExtraArgCommonChecks extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInExtraArgCommonChecks() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/extraArgCommonChecks"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("extraArgumentEmpty.args")
    public void testExtraArgumentEmpty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentEmpty.args");
    }

    @TestMetadata("extraArgumentEscaping.args")
    public void testExtraArgumentEscaping() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentEscaping.args");
    }

    @TestMetadata("extraArgumentInvalidValue.args")
    public void testExtraArgumentInvalidValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentInvalidValue.args");
    }

    @TestMetadata("extraArgumentMultiple.args")
    public void testExtraArgumentMultiple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentMultiple.args");
    }

    @TestMetadata("extraArgumentNoValue.args")
    public void testExtraArgumentNoValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentNoValue.args");
    }

    @TestMetadata("extraArgumentPassedInObsoleteForm.args")
    public void testExtraArgumentPassedInObsoleteForm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraArgumentPassedInObsoleteForm.args");
    }

    @TestMetadata("extraBooleanArgOverrideOn.args")
    public void testExtraBooleanArgOverrideOn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraBooleanArgOverrideOn.args");
    }

    @TestMetadata("extraBooleanArgumentEqualsFalse.args")
    public void testExtraBooleanArgumentEqualsFalse() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraBooleanArgumentEqualsFalse.args");
    }

    @TestMetadata("extraBooleanArgumentEqualsNonsense.args")
    public void testExtraBooleanArgumentEqualsNonsense() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraBooleanArgumentEqualsNonsense.args");
    }

    @TestMetadata("extraBooleanArgumentEqualsTrue.args")
    public void testExtraBooleanArgumentEqualsTrue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraBooleanArgumentEqualsTrue.args");
    }

    @TestMetadata("extraBooleanArgumentOverrideOff.args")
    public void testExtraBooleanArgumentOverrideOff() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/extraBooleanArgumentOverrideOff.args");
    }

    @TestMetadata("unknownExtraFlags.args")
    public void testUnknownExtraFlags() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraArgCommonChecks/unknownExtraFlags.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/internalArgCommonChecks")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class InternalArgCommonChecks extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInInternalArgCommonChecks() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/internalArgCommonChecks"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("internalArgDisableLanguageFeature.args")
    public void testInternalArgDisableLanguageFeature() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgDisableLanguageFeature.args");
    }

    @TestMetadata("internalArgEmptyFeatureName.args")
    public void testInternalArgEmptyFeatureName() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgEmptyFeatureName.args");
    }

    @TestMetadata("internalArgEnableLanguageFeature.args")
    public void testInternalArgEnableLanguageFeature() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgEnableLanguageFeature.args");
    }

    @TestMetadata("internalArgMissingModificator.args")
    public void testInternalArgMissingModificator() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgMissingModificator.args");
    }

    @TestMetadata("internalArgNoWarningForEnablingBugfix.args")
    public void testInternalArgNoWarningForEnablingBugfix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgNoWarningForEnablingBugfix.args");
    }

    @TestMetadata("internalArgOverrideLanguageFeature.args")
    public void testInternalArgOverrideLanguageFeature() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgOverrideLanguageFeature.args");
    }

    @TestMetadata("internalArgOverrideOffLanguageFeature.args")
    public void testInternalArgOverrideOffLanguageFeature() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgOverrideOffLanguageFeature.args");
    }

    @TestMetadata("internalArgPassValue.args")
    public void testInternalArgPassValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgPassValue.args");
    }

    @TestMetadata("internalArgUnrecognizedFeature.args")
    public void testInternalArgUnrecognizedFeature() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgUnrecognizedFeature.args");
    }

    @TestMetadata("internalArgWrongPrefix.args")
    public void testInternalArgWrongPrefix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/internalArgCommonChecks/internalArgWrongPrefix.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/jdkHome")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class JdkHome extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInJdkHome() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/jdkHome"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("emptyJdkHome.args")
    public void testEmptyJdkHome() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/emptyJdkHome.args");
    }

    @TestMetadata("invalidMultipleJdkHome.args")
    public void testInvalidMultipleJdkHome() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/invalidMultipleJdkHome.args");
    }

    @TestMetadata("jdkHome.args")
    public void testJdkHome() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/jdkHome.args");
    }

    @TestMetadata("jdkPathDoesNotExist.args")
    public void testJdkPathDoesNotExist() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/jdkPathDoesNotExist.args");
    }

    @TestMetadata("warningJdkWithNoJdk.args")
    public void testWarningJdkWithNoJdk() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/warningJdkWithNoJdk.args");
    }

    @TestMetadata("wrongJdkPath.args")
    public void testWrongJdkPath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jdkHome/wrongJdkPath.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/languageVersion")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class LanguageVersion extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInLanguageVersion() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/languageVersion"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("deprecatedLanguageUnsupportedApi.args")
    public void testDeprecatedLanguageUnsupportedApi() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/deprecatedLanguageUnsupportedApi.args");
    }

    @TestMetadata("deprecatedLanguageVersion.args")
    public void testDeprecatedLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/deprecatedLanguageVersion.args");
    }

    @TestMetadata("languageVersion.args")
    public void testLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersion.args");
    }

    @TestMetadata("languageVersionEmpty.args")
    public void testLanguageVersionEmpty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersionEmpty.args");
    }

    @TestMetadata("languageVersionExperimental.args")
    public void testLanguageVersionExperimental() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersionExperimental.args");
    }

    @TestMetadata("languageVersionInvalid.args")
    public void testLanguageVersionInvalid() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersionInvalid.args");
    }

    @TestMetadata("languageVersionMultiple.args")
    public void testLanguageVersionMultiple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersionMultiple.args");
    }

    @TestMetadata("languageVersionUnsupported.args")
    public void testLanguageVersionUnsupported() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/languageVersion/languageVersionUnsupported.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/optIn")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class OptIn extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInOptIn() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/optIn"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("experimentalDeprecated.args")
    public void testExperimentalDeprecated() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalDeprecated.args");
    }

    @TestMetadata("experimentalDeprecatedK1.args")
    public void testExperimentalDeprecatedK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalDeprecatedK1.args");
    }

    @TestMetadata("experimentalDeprecatedWarning.args")
    public void testExperimentalDeprecatedWarning() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalDeprecatedWarning.args");
    }

    @TestMetadata("experimentalDeprecatedWarningK1.args")
    public void testExperimentalDeprecatedWarningK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalDeprecatedWarningK1.args");
    }

    @TestMetadata("experimentalIsNotAnnotation.args")
    public void testExperimentalIsNotAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalIsNotAnnotation.args");
    }

    @TestMetadata("experimentalIsNotAnnotationK1.args")
    public void testExperimentalIsNotAnnotationK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalIsNotAnnotationK1.args");
    }

    @TestMetadata("experimentalIsNotMarker.args")
    public void testExperimentalIsNotMarker() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalIsNotMarker.args");
    }

    @TestMetadata("experimentalIsNotMarkerK1.args")
    public void testExperimentalIsNotMarkerK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalIsNotMarkerK1.args");
    }

    @TestMetadata("experimentalNested.args")
    public void testExperimentalNested() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalNested.args");
    }

    @TestMetadata("experimentalNestedK1.args")
    public void testExperimentalNestedK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalNestedK1.args");
    }

    @TestMetadata("experimentalUnresolved.args")
    public void testExperimentalUnresolved() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalUnresolved.args");
    }

    @TestMetadata("experimentalUnresolvedK1.args")
    public void testExperimentalUnresolvedK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/experimentalUnresolvedK1.args");
    }

    @TestMetadata("optInEmptyMessage.args")
    public void testOptInEmptyMessage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/optInEmptyMessage.args");
    }

    @TestMetadata("optInEmptyMessageFir.args")
    public void testOptInEmptyMessageFir() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/optInEmptyMessageFir.args");
    }

    @TestMetadata("optInOverrideMessage.args")
    public void testOptInOverrideMessage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/optInOverrideMessage.args");
    }

    @TestMetadata("optInOverrideMessageFir.args")
    public void testOptInOverrideMessageFir() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/optInOverrideMessageFir.args");
    }

    @TestMetadata("useDeclarationThatWasExperimentalWithoutExplicitImport.args")
    public void testUseDeclarationThatWasExperimentalWithoutExplicitImport() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/useDeclarationThatWasExperimentalWithoutExplicitImport.args");
    }

    @TestMetadata("useDeclarationThatWasExperimentalWithoutExplicitImportCommandLine.args")
    public void testUseDeclarationThatWasExperimentalWithoutExplicitImportCommandLine() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/useDeclarationThatWasExperimentalWithoutExplicitImportCommandLine.args");
    }

    @TestMetadata("useDeclarationThatWasExperimentalWithoutMarker.args")
    public void testUseDeclarationThatWasExperimentalWithoutMarker() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/optIn/useDeclarationThatWasExperimentalWithoutMarker.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/sourcesCommonChecks")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class SourcesCommonChecks extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInSourcesCommonChecks() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/sourcesCommonChecks"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("dirWithKotlinAndJavaFiles.args")
    public void testDirWithKotlinAndJavaFiles() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinAndJavaFiles.args");
    }

    @TestMetadata("dirWithKotlinAndNonKotlinFiles.args")
    public void testDirWithKotlinAndNonKotlinFiles() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinAndNonKotlinFiles.args");
    }

    @TestMetadata("dirWithKotlinFile.args")
    public void testDirWithKotlinFile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinFile.args");
    }

    @TestMetadata("dirWithKotlinFileRecursive.args")
    public void testDirWithKotlinFileRecursive() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinFileRecursive.args");
    }

    @TestMetadata("dirWithKotlinScript.args")
    public void testDirWithKotlinScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinScript.args");
    }

    @TestMetadata("dirWithKotlinScriptPsi.args")
    public void testDirWithKotlinScriptPsi() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithKotlinScriptPsi.args");
    }

    @TestMetadata("dirWithOnlyNonKotlinFile.args")
    public void testDirWithOnlyNonKotlinFile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/dirWithOnlyNonKotlinFile.args");
    }

    @TestMetadata("duplicateSources.args")
    public void testDuplicateSources() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/duplicateSources.args");
    }

    @TestMetadata("duplicateSourcesInModule.args")
    public void testDuplicateSourcesInModule() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/duplicateSourcesInModule.args");
    }

    @TestMetadata("duplicateSourcesNormalized.args")
    public void testDuplicateSourcesNormalized() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/duplicateSourcesNormalized.args");
    }

    @TestMetadata("emptySources.args")
    public void testEmptySources() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/emptySources.args");
    }

    @TestMetadata("emptySourcesWithModuleInfo.args")
    public void testEmptySourcesWithModuleInfo() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/emptySourcesWithModuleInfo.args");
    }

    @TestMetadata("nonExistingClassPathAndAnnotationsPath.args")
    public void testNonExistingClassPathAndAnnotationsPath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonExistingClassPathAndAnnotationsPath.args");
    }

    @TestMetadata("nonExistingPluginClassPath.args")
    public void testNonExistingPluginClassPath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonExistingPluginClassPath.args");
    }

    @TestMetadata("nonExistingSourcePath.args")
    public void testNonExistingSourcePath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonExistingSourcePath.args");
    }

    @TestMetadata("nonExistingSourcePathK2.args")
    public void testNonExistingSourcePathK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonExistingSourcePathK2.args");
    }

    @TestMetadata("nonexistentPathInModule.args")
    public void testNonexistentPathInModule() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonexistentPathInModule.args");
    }

    @TestMetadata("nonexistentScript.args")
    public void testNonexistentScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/nonexistentScript.args");
    }

    @TestMetadata("withNonKotlinFile.args")
    public void testWithNonKotlinFile() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/sourcesCommonChecks/withNonKotlinFile.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XexplicitApi")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XexplicitApi extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXexplicitApi() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XexplicitApi"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("explicitApiAndExplicitReturnTypesAtTheSameTime.args")
    public void testExplicitApiAndExplicitReturnTypesAtTheSameTime() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XexplicitApi/explicitApiAndExplicitReturnTypesAtTheSameTime.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XjdkRelease")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XjdkRelease extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXjdkRelease() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XjdkRelease"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("jdkRelease.args")
    public void testJdkRelease() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease.args");
    }

    @TestMetadata("jdkRelease20WithCorruptedClass.args")
    public void testJdkRelease20WithCorruptedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease20WithCorruptedClass.args");
    }

    @TestMetadata("jdkRelease6WithJvmTarget8Jdk11.args")
    public void testJdkRelease6WithJvmTarget8Jdk11() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease6WithJvmTarget8Jdk11.args");
    }

    @TestMetadata("jdkRelease6WithJvmTarget8Jdk8.args")
    public void testJdkRelease6WithJvmTarget8Jdk8() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease6WithJvmTarget8Jdk8.args");
    }

    @TestMetadata("jdkRelease6WithJvmTarget9.args")
    public void testJdkRelease6WithJvmTarget9() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease6WithJvmTarget9.args");
    }

    @TestMetadata("jdkRelease6WithoutExplicitJvmTarget.args")
    public void testJdkRelease6WithoutExplicitJvmTarget() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease6WithoutExplicitJvmTarget.args");
    }

    @TestMetadata("jdkRelease7WithJvmTarget8Jdk11.args")
    public void testJdkRelease7WithJvmTarget8Jdk11() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease7WithJvmTarget8Jdk11.args");
    }

    @TestMetadata("jdkRelease7WithJvmTarget8Jdk8.args")
    public void testJdkRelease7WithJvmTarget8Jdk8() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease7WithJvmTarget8Jdk8.args");
    }

    @TestMetadata("jdkRelease8.args")
    public void testJdkRelease8() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjdkRelease/jdkRelease8.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XjspecifyAnnotation")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XjspecifyAnnotation extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXjspecifyAnnotation() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XjspecifyAnnotation"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("jspecifyByLv16.args")
    public void testJspecifyByLv16() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjspecifyAnnotation/jspecifyByLv16.args");
    }

    @TestMetadata("jspecifyDefault.args")
    public void testJspecifyDefault() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjspecifyAnnotation/jspecifyDefault.args");
    }

    @TestMetadata("jspecifyIgnore.args")
    public void testJspecifyIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjspecifyAnnotation/jspecifyIgnore.args");
    }

    @TestMetadata("jspecifyStrict.args")
    public void testJspecifyStrict() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjspecifyAnnotation/jspecifyStrict.args");
    }

    @TestMetadata("jspecifyWarn.args")
    public void testJspecifyWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XjspecifyAnnotation/jspecifyWarn.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/Xjsr305")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Xjsr305 extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXjsr305() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/Xjsr305"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("jsr305AllIgnore.args")
    public void testJsr305AllIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305AllIgnore.args");
    }

    @TestMetadata("jsr305DefaultMigration.args")
    public void testJsr305DefaultMigration() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305DefaultMigration.args");
    }

    @TestMetadata("jsr305DeprecatedEnable.args")
    public void testJsr305DeprecatedEnable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305DeprecatedEnable.args");
    }

    @TestMetadata("jsr305DeprecatedIgnore.args")
    public void testJsr305DeprecatedIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305DeprecatedIgnore.args");
    }

    @TestMetadata("jsr305DeprecatedWarn.args")
    public void testJsr305DeprecatedWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305DeprecatedWarn.args");
    }

    @TestMetadata("jsr305FqNameIgnore.args")
    public void testJsr305FqNameIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305FqNameIgnore.args");
    }

    @TestMetadata("jsr305FqNameStrict.args")
    public void testJsr305FqNameStrict() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305FqNameStrict.args");
    }

    @TestMetadata("jsr305Ignore.args")
    public void testJsr305Ignore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305Ignore.args");
    }

    @TestMetadata("jsr305MigrationDefault.args")
    public void testJsr305MigrationDefault() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305MigrationDefault.args");
    }

    @TestMetadata("jsr305MigrationFqNameIgnore.args")
    public void testJsr305MigrationFqNameIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305MigrationFqNameIgnore.args");
    }

    @TestMetadata("jsr305MigrationIgnore.args")
    public void testJsr305MigrationIgnore() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305MigrationIgnore.args");
    }

    @TestMetadata("jsr305MigrationWarn.args")
    public void testJsr305MigrationWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305MigrationWarn.args");
    }

    @TestMetadata("jsr305NoFlag.args")
    public void testJsr305NoFlag() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305NoFlag.args");
    }

    @TestMetadata("jsr305Strict.args")
    public void testJsr305Strict() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305Strict.args");
    }

    @TestMetadata("jsr305Warn.args")
    public void testJsr305Warn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/Xjsr305/jsr305Warn.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XnewInference")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XnewInference extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXnewInference() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XnewInference"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("functionReferenceWithDefaultValuesFeatureIsEnabledWithNewInference.args")
    public void testFunctionReferenceWithDefaultValuesFeatureIsEnabledWithNewInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XnewInference/functionReferenceWithDefaultValuesFeatureIsEnabledWithNewInference.args");
    }

    @TestMetadata("functionReferenceWithDefaultValuesFeatureIsEnabledWithXXNewInference.args")
    public void testFunctionReferenceWithDefaultValuesFeatureIsEnabledWithXXNewInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XnewInference/functionReferenceWithDefaultValuesFeatureIsEnabledWithXXNewInference.args");
    }

    @TestMetadata("standaloneSamConversionsAreEnabledWithNewInference.args")
    public void testStandaloneSamConversionsAreEnabledWithNewInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XnewInference/standaloneSamConversionsAreEnabledWithNewInference.args");
    }

    @TestMetadata("standaloneSamConversionsAreEnabledWithNewInferenceInternalFlag.args")
    public void testStandaloneSamConversionsAreEnabledWithNewInferenceInternalFlag() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XnewInference/standaloneSamConversionsAreEnabledWithNewInferenceInternalFlag.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XsupressWarnings")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XsupressWarnings extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXsupressWarnings() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XsupressWarnings"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("multipleWarningSuppression.args")
    public void testMultipleWarningSuppression() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/multipleWarningSuppression.args");
    }

    @TestMetadata("suppressAllWarningsJvm.args")
    public void testSuppressAllWarningsJvm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/suppressAllWarningsJvm.args");
    }

    @TestMetadata("warningSuppression.args")
    public void testWarningSuppression() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningSuppression.args");
    }

    @TestMetadata("warningSuppressionInvalid.args")
    public void testWarningSuppressionInvalid() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningSuppressionInvalid.args");
    }

    @TestMetadata("warningSuppressionWithError.args")
    public void testWarningSuppressionWithError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningSuppressionWithError.args");
    }

    @TestMetadata("warningSuppressionWithNowarn.args")
    public void testWarningSuppressionWithNowarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningSuppressionWithNowarn.args");
    }

    @TestMetadata("warningSuppressionWithReportAllWarnings.args")
    public void testWarningSuppressionWithReportAllWarnings() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningSuppressionWithReportAllWarnings.args");
    }

    @TestMetadata("warningsSuppressionDisablesErrors_Jvm.args")
    public void testWarningsSuppressionDisablesErrors_Jvm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XsupressWarnings/warningsSuppressionDisablesErrors_Jvm.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm/XXmultiPlatformProject")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class XXmultiPlatformProject extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInXXmultiPlatformProject() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm/XXmultiPlatformProject"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("firMultiplatformCompilationWithError.args")
    public void testFirMultiplatformCompilationWithError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XXmultiPlatformProject/firMultiplatformCompilationWithError.args");
    }

    @TestMetadata("firMultiplatformCompilationWithPsiWithoutErrors.args")
    public void testFirMultiplatformCompilationWithPsiWithoutErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XXmultiPlatformProject/firMultiplatformCompilationWithPsiWithoutErrors.args");
    }

    @TestMetadata("firMultiplatformCompilationWithoutErrors.args")
    public void testFirMultiplatformCompilationWithoutErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XXmultiPlatformProject/firMultiplatformCompilationWithoutErrors.args");
    }

    @TestMetadata("multiplatformCompilationWithCommonScript.args")
    public void testMultiplatformCompilationWithCommonScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XXmultiPlatformProject/multiplatformCompilationWithCommonScript.args");
    }

    @TestMetadata("multiplatformCompilationWithScript.args")
    public void testMultiplatformCompilationWithScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/XXmultiPlatformProject/multiplatformCompilationWithScript.args");
    }
  }

  @TestMetadata("compiler/testData/cli/jvm")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Jvm extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJvmTest, this, testDataFilePath);
    }

    @TestMetadata("abiStabilityIncorrectValue.args")
    public void testAbiStabilityIncorrectValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/abiStabilityIncorrectValue.args");
    }

    public void testAllFilesPresentInJvm() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/jvm"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("annotationDefaultTargetFirstOnly.args")
    public void testAnnotationDefaultTargetFirstOnly() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetFirstOnly.args");
    }

    @TestMetadata("annotationDefaultTargetFirstOnlyWarn.args")
    public void testAnnotationDefaultTargetFirstOnlyWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetFirstOnlyWarn.args");
    }

    @TestMetadata("annotationDefaultTargetParamProperty.args")
    public void testAnnotationDefaultTargetParamProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetParamProperty.args");
    }

    @TestMetadata("annotationDefaultTargetWithOptInFirstOnly.args")
    public void testAnnotationDefaultTargetWithOptInFirstOnly() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetWithOptInFirstOnly.args");
    }

    @TestMetadata("annotationDefaultTargetWithOptInParamProperty.args")
    public void testAnnotationDefaultTargetWithOptInParamProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetWithOptInParamProperty.args");
    }

    @TestMetadata("annotationDefaultTargetWithSuppressedOptInFirstOnly.args")
    public void testAnnotationDefaultTargetWithSuppressedOptInFirstOnly() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetWithSuppressedOptInFirstOnly.args");
    }

    @TestMetadata("annotationDefaultTargetWithSuppressedOptInParamProperty.args")
    public void testAnnotationDefaultTargetWithSuppressedOptInParamProperty() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/annotationDefaultTargetWithSuppressedOptInParamProperty.args");
    }

    @TestMetadata("apiAndLanguageVersionsUnsupported.args")
    public void testApiAndLanguageVersionsUnsupported() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/apiAndLanguageVersionsUnsupported.args");
    }

    @TestMetadata("argumentPassedMultipleTimes.args")
    public void testArgumentPassedMultipleTimes() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/argumentPassedMultipleTimes.args");
    }

    @TestMetadata("builderInferenceByDefault.args")
    public void testBuilderInferenceByDefault() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/builderInferenceByDefault.args");
    }

    @TestMetadata("builderInferenceErrors.args")
    public void testBuilderInferenceErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/builderInferenceErrors.args");
    }

    @TestMetadata("compatqualDefault.args")
    public void testCompatqualDefault() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/compatqualDefault.args");
    }

    @TestMetadata("compatqualDisable.args")
    public void testCompatqualDisable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/compatqualDisable.args");
    }

    @TestMetadata("compatqualEnable.args")
    public void testCompatqualEnable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/compatqualEnable.args");
    }

    @TestMetadata("compatqualWrong.args")
    public void testCompatqualWrong() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/compatqualWrong.args");
    }

    @TestMetadata("contextParameters.args")
    public void testContextParameters() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/contextParameters.args");
    }

    @TestMetadata("contextReceiversAndParametersAtTheSameTime.args")
    public void testContextReceiversAndParametersAtTheSameTime() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/contextReceiversAndParametersAtTheSameTime.args");
    }

    @TestMetadata("contextReceiversDeprecated.args")
    public void testContextReceiversDeprecated() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/contextReceiversDeprecated.args");
    }

    @TestMetadata("coroutinesEnable.args")
    public void testCoroutinesEnable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/coroutinesEnable.args");
    }

    @TestMetadata("coroutinesError.args")
    public void testCoroutinesError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/coroutinesError.args");
    }

    @TestMetadata("coroutinesErrorAndEnable.args")
    public void testCoroutinesErrorAndEnable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/coroutinesErrorAndEnable.args");
    }

    @TestMetadata("coroutinesWarn.args")
    public void testCoroutinesWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/coroutinesWarn.args");
    }

    @TestMetadata("disabledFeatureFromUnsupportedVersion.args")
    public void testDisabledFeatureFromUnsupportedVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/disabledFeatureFromUnsupportedVersion.args");
    }

    @TestMetadata("enumEntriesForJavaNotEnabled.args")
    public void testEnumEntriesForJavaNotEnabled() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/enumEntriesForJavaNotEnabled.args");
    }

    @TestMetadata("enumEntriesNotEnabled.args")
    public void testEnumEntriesNotEnabled() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/enumEntriesNotEnabled.args");
    }

    @TestMetadata("errorSuppressionNoWarning.args")
    public void testErrorSuppressionNoWarning() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/errorSuppressionNoWarning.args");
    }

    @TestMetadata("errorSuppressionWarning.args")
    public void testErrorSuppressionWarning() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/errorSuppressionWarning.args");
    }

    @TestMetadata("experimentalCheckers.args")
    public void testExperimentalCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/experimentalCheckers.args");
    }

    @TestMetadata("explicitReturnTypesEnabled.args")
    public void testExplicitReturnTypesEnabled() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/explicitReturnTypesEnabled.args");
    }

    @TestMetadata("explicitlyDisableSamConversionsWithOldFlag.args")
    public void testExplicitlyDisableSamConversionsWithOldFlag() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/explicitlyDisableSamConversionsWithOldFlag.args");
    }

    @TestMetadata("explicitlyDisabledSamConversions.args")
    public void testExplicitlyDisabledSamConversions() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/explicitlyDisabledSamConversions.args");
    }

    @TestMetadata("expression1.args")
    public void testExpression1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/expression1.args");
    }

    @TestMetadata("extraCheckers.args")
    public void testExtraCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraCheckers.args");
    }

    @TestMetadata("extraHelp.args")
    public void testExtraHelp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/extraHelp.args");
    }

    @TestMetadata("fastJarFsDisabledAfterK2.args")
    public void testFastJarFsDisabledAfterK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/fastJarFsDisabledAfterK2.args");
    }

    @TestMetadata("fastJarFsEnabledBeforeK2.args")
    public void testFastJarFsEnabledBeforeK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/fastJarFsEnabledBeforeK2.args");
    }

    @TestMetadata("firErrorOnLastLine.args")
    public void testFirErrorOnLastLine() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firErrorOnLastLine.args");
    }

    @TestMetadata("firErrorOnLastLineNoEol.args")
    public void testFirErrorOnLastLineNoEol() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firErrorOnLastLineNoEol.args");
    }

    @TestMetadata("firFriendlyErrorIfNoJdkOptionIsSet.args")
    public void testFirFriendlyErrorIfNoJdkOptionIsSet() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firFriendlyErrorIfNoJdkOptionIsSet.args");
    }

    @TestMetadata("firHello.args")
    public void testFirHello() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firHello.args");
    }

    @TestMetadata("firHello20.args")
    public void testFirHello20() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firHello20.args");
    }

    @TestMetadata("firHello20WithFlag.args")
    public void testFirHello20WithFlag() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firHello20WithFlag.args");
    }

    @TestMetadata("firLightTreeOff.args")
    public void testFirLightTreeOff() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firLightTreeOff.args");
    }

    @TestMetadata("firLightTreeOn.args")
    public void testFirLightTreeOn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firLightTreeOn.args");
    }

    @TestMetadata("firStdlibDependency.args")
    public void testFirStdlibDependency() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firStdlibDependency.args");
    }

    @TestMetadata("firSyntaxError.args")
    public void testFirSyntaxError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firSyntaxError.args");
    }

    @TestMetadata("firVsClassicAnnotation.args")
    public void testFirVsClassicAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/firVsClassicAnnotation.args");
    }

    @TestMetadata("globalWarningSuppression_correct.args")
    public void testGlobalWarningSuppression_correct() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/globalWarningSuppression_correct.args");
    }

    @TestMetadata("globalWarningSuppression_incorrect.args")
    public void testGlobalWarningSuppression_incorrect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/globalWarningSuppression_incorrect.args");
    }

    @TestMetadata("help.args")
    public void testHelp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/help.args");
    }

    @TestMetadata("invalidMetadataVersion.args")
    public void testInvalidMetadataVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/invalidMetadataVersion.args");
    }

    @TestMetadata("jvm6Target.args")
    public void testJvm6Target() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jvm6Target.args");
    }

    @TestMetadata("jvm8Target.args")
    public void testJvm8Target() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jvm8Target.args");
    }

    @TestMetadata("jvmDefaultIncorrectValue.args")
    public void testJvmDefaultIncorrectValue() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jvmDefaultIncorrectValue.args");
    }

    @TestMetadata("jvmRecordOk.args")
    public void testJvmRecordOk() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jvmRecordOk.args");
    }

    @TestMetadata("jvmRecordWrongTarget.args")
    public void testJvmRecordWrongTarget() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/jvmRecordWrongTarget.args");
    }

    @TestMetadata("k2SimpleMultiplatformGenericClass.args")
    public void testK2SimpleMultiplatformGenericClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/k2SimpleMultiplatformGenericClass.args");
    }

    @TestMetadata("kmpMissingActual.args")
    public void testKmpMissingActual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kmpMissingActual.args");
    }

    @TestMetadata("kotlinHomeWithoutStdlib.args")
    public void testKotlinHomeWithoutStdlib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kotlinHomeWithoutStdlib.args");
    }

    @TestMetadata("kt19628_progressive.args")
    public void testKt19628_progressive() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt19628_progressive.args");
    }

    @TestMetadata("kt48833_doNotSuppressVersionErrors.args")
    public void testKt48833_doNotSuppressVersionErrors() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt48833_doNotSuppressVersionErrors.args");
    }

    @TestMetadata("kt49209.args")
    public void testKt49209() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt49209.args");
    }

    @TestMetadata("kt51846_backendThreadsValidation1.args")
    public void testKt51846_backendThreadsValidation1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt51846_backendThreadsValidation1.args");
    }

    @TestMetadata("kt51846_backendThreadsValidation2.args")
    public void testKt51846_backendThreadsValidation2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt51846_backendThreadsValidation2.args");
    }

    @TestMetadata("kt51846_backendThreadsValidation3.args")
    public void testKt51846_backendThreadsValidation3() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/kt51846_backendThreadsValidation3.args");
    }

    @TestMetadata("legacySmartCastsAfterTry.args")
    public void testLegacySmartCastsAfterTry() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/legacySmartCastsAfterTry.args");
    }

    @TestMetadata("modulesWithDependencyCycle.args")
    public void testModulesWithDependencyCycle() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/modulesWithDependencyCycle.args");
    }

    @TestMetadata("noJdkAvoidFailure.args")
    public void testNoJdkAvoidFailure() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/noJdkAvoidFailure.args");
    }

    @TestMetadata("noReflect.args")
    public void testNoReflect() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/noReflect.args");
    }

    @TestMetadata("noStdlibK1.args")
    public void testNoStdlibK1() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/noStdlibK1.args");
    }

    @TestMetadata("noStdlibK2.args")
    public void testNoStdlibK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/noStdlibK2.args");
    }

    @TestMetadata("nonLocalDisabled.args")
    public void testNonLocalDisabled() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/nonLocalDisabled.args");
    }

    @TestMetadata("nullabilityAnnotations.args")
    public void testNullabilityAnnotations() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/nullabilityAnnotations.args");
    }

    @TestMetadata("oldBackend.args")
    public void testOldBackend() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/oldBackend.args");
    }

    @TestMetadata("oldBackendWithScript.args")
    public void testOldBackendWithScript() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/oldBackendWithScript.args");
    }

    @TestMetadata("progressiveModeOff.args")
    public void testProgressiveModeOff() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/progressiveModeOff.args");
    }

    @TestMetadata("progressiveModeOn.args")
    public void testProgressiveModeOn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/progressiveModeOn.args");
    }

    @TestMetadata("reportAllWarnings.args")
    public void testReportAllWarnings() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/reportAllWarnings.args");
    }

    @TestMetadata("reportInternalDiagnosticNames.args")
    public void testReportInternalDiagnosticNames() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/reportInternalDiagnosticNames.args");
    }

    @TestMetadata("selfUpperBoundInference.args")
    public void testSelfUpperBoundInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/selfUpperBoundInference.args");
    }

    @TestMetadata("simple.args")
    public void testSimple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/simple.args");
    }

    @TestMetadata("syntheticAccessorForPropertiesSignatureClash.args")
    public void testSyntheticAccessorForPropertiesSignatureClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/syntheticAccessorForPropertiesSignatureClash.args");
    }

    @TestMetadata("syntheticAccessorPropertyAndFunSignatureClash.args")
    public void testSyntheticAccessorPropertyAndFunSignatureClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/syntheticAccessorPropertyAndFunSignatureClash.args");
    }

    @TestMetadata("syntheticAccessorSignatureClash.args")
    public void testSyntheticAccessorSignatureClash() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/syntheticAccessorSignatureClash.args");
    }

    @TestMetadata("twoDiagnosticsOnSingleElement.args")
    public void testTwoDiagnosticsOnSingleElement() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/twoDiagnosticsOnSingleElement.args");
    }

    @TestMetadata("unrestrictedBuilderInference.args")
    public void testUnrestrictedBuilderInference() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/unrestrictedBuilderInference.args");
    }

    @TestMetadata("version.args")
    public void testVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/version.args");
    }

    @TestMetadata("werror.args")
    public void testWerror() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/werror.args");
    }

    @TestMetadata("werrorWithExplicitError.args")
    public void testWerrorWithExplicitError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/werrorWithExplicitError.args");
    }

    @TestMetadata("werrorWithNoWarn.args")
    public void testWerrorWithNoWarn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/werrorWithNoWarn.args");
    }

    @TestMetadata("werrorWithStrongWarning.args")
    public void testWerrorWithStrongWarning() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/werrorWithStrongWarning.args");
    }

    @TestMetadata("whenGuardsEnable.args")
    public void testWhenGuardsEnable() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/whenGuardsEnable.args");
    }

    @TestMetadata("whenGuardsError.args")
    public void testWhenGuardsError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/whenGuardsError.args");
    }

    @TestMetadata("wrongAbiVersion.args")
    public void testWrongAbiVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongAbiVersion.args");
    }

    @TestMetadata("wrongArgument.args")
    public void testWrongArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongArgument.args");
    }

    @TestMetadata("wrongJvmTargetVersion.args")
    public void testWrongJvmTargetVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongJvmTargetVersion.args");
    }

    @TestMetadata("wrongScriptWithDirectory.args")
    public void testWrongScriptWithDirectory() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongScriptWithDirectory.args");
    }

    @TestMetadata("wrongScriptWithKtSource.args")
    public void testWrongScriptWithKtSource() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongScriptWithKtSource.args");
    }

    @TestMetadata("wrongScriptWithNoSource.args")
    public void testWrongScriptWithNoSource() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongScriptWithNoSource.args");
    }

    @TestMetadata("wrongXjsr305.args")
    public void testWrongXjsr305() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/jvm/wrongXjsr305.args");
    }
  }

  @TestMetadata("compiler/testData/cli/js")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Js extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doJsTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInJs() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/js"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("compilationErrorConstDivByZero.args")
    public void testCompilationErrorConstDivByZero() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/compilationErrorConstDivByZero.args");
    }

    @TestMetadata("compilationErrorK2.args")
    public void testCompilationErrorK2() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/compilationErrorK2.args");
    }

    @TestMetadata("createMetadata.args")
    public void testCreateMetadata() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/createMetadata.args");
    }

    @TestMetadata("emptySources.args")
    public void testEmptySources() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/emptySources.args");
    }

    @TestMetadata("experimentalCheckers.args")
    public void testExperimentalCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/experimentalCheckers.args");
    }

    @TestMetadata("experimentalCheckersWasm.args")
    public void testExperimentalCheckersWasm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/experimentalCheckersWasm.args");
    }

    @TestMetadata("extraCheckers.args")
    public void testExtraCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/extraCheckers.args");
    }

    @TestMetadata("extraCheckersWasm.args")
    public void testExtraCheckersWasm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/extraCheckersWasm.args");
    }

    @TestMetadata("fir.args")
    public void testFir() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/fir.args");
    }

    @TestMetadata("firLightTreeOn.args")
    public void testFirLightTreeOn() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/firLightTreeOn.args");
    }

    @TestMetadata("firMpp.args")
    public void testFirMpp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/firMpp.args");
    }

    @TestMetadata("firMppWithKlib.args")
    public void testFirMppWithKlib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/firMppWithKlib.args");
    }

    @TestMetadata("firMultiplatformCompilationWithError.args")
    public void testFirMultiplatformCompilationWithError() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/firMultiplatformCompilationWithError.args");
    }

    @TestMetadata("jsExtraHelp.args")
    public void testJsExtraHelp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/jsExtraHelp.args");
    }

    @TestMetadata("jsHelp.args")
    public void testJsHelp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/jsHelp.args");
    }

    @TestMetadata("kotlinPackage.args")
    public void testKotlinPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/kotlinPackage.args");
    }

    @TestMetadata("languageVersion.args")
    public void testLanguageVersion() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/languageVersion.args");
    }

    @TestMetadata("libraryDirNotFound.args")
    public void testLibraryDirNotFound() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/libraryDirNotFound.args");
    }

    @TestMetadata("noStdlib.args")
    public void testNoStdlib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/noStdlib.args");
    }

    @TestMetadata("nonExistingKotlinHome.args")
    public void testNonExistingKotlinHome() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/nonExistingKotlinHome.args");
    }

    @TestMetadata("nonExistingSourcePath.args")
    public void testNonExistingSourcePath() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/nonExistingSourcePath.args");
    }

    @TestMetadata("notValidLibraryDir.args")
    public void testNotValidLibraryDir() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/notValidLibraryDir.args");
    }

    @TestMetadata("perFileWithValidModuleKind.args")
    public void testPerFileWithValidModuleKind() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/perFileWithValidModuleKind.args");
    }

    @TestMetadata("perFileWithWrongModuleKind.args")
    public void testPerFileWithWrongModuleKind() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/perFileWithWrongModuleKind.args");
    }

    @TestMetadata("reifiedIntersectionType.args")
    public void testReifiedIntersectionType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/reifiedIntersectionType.args");
    }

    @TestMetadata("simple2js.args")
    public void testSimple2js() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/simple2js.args");
    }

    @TestMetadata("sourceMap.args")
    public void testSourceMap() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMap.args");
    }

    @TestMetadata("sourceMapCharEscape.args")
    public void testSourceMapCharEscape() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapCharEscape.args");
    }

    @TestMetadata("sourceMapDuplicateRelativePaths.args")
    public void testSourceMapDuplicateRelativePaths() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapDuplicateRelativePaths.args");
    }

    @TestMetadata("sourceMapEmbedSources.args")
    public void testSourceMapEmbedSources() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapEmbedSources.args");
    }

    @TestMetadata("sourceMapPrefix.args")
    public void testSourceMapPrefix() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapPrefix.args");
    }

    @TestMetadata("sourceMapRelativeRoot.args")
    public void testSourceMapRelativeRoot() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapRelativeRoot.args");
    }

    @TestMetadata("sourceMapRootManual.args")
    public void testSourceMapRootManual() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapRootManual.args");
    }

    @TestMetadata("sourceMapRootMissing.args")
    public void testSourceMapRootMissing() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapRootMissing.args");
    }

    @TestMetadata("sourceMapRootMultiple.args")
    public void testSourceMapRootMultiple() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/sourceMapRootMultiple.args");
    }

    @TestMetadata("successfulHmpp.args")
    public void testSuccessfulHmpp() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/successfulHmpp.args");
    }

    @TestMetadata("suppressAllWarningsJS.args")
    public void testSuppressAllWarningsJS() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/suppressAllWarningsJS.args");
    }

    @TestMetadata("warningsSuppressionDisablesErrors_Js.args")
    public void testWarningsSuppressionDisablesErrors_Js() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/warningsSuppressionDisablesErrors_Js.args");
    }

    @TestMetadata("warningsSuppressionDisablesErrors_Wasm.args")
    public void testWarningsSuppressionDisablesErrors_Wasm() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/warningsSuppressionDisablesErrors_Wasm.args");
    }

    @TestMetadata("withFolderAsLib.args")
    public void testWithFolderAsLib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/withFolderAsLib.args");
    }

    @TestMetadata("withLib.args")
    public void testWithLib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/js/withLib.args");
    }
  }

  @TestMetadata("compiler/testData/cli/metadata")
  @TestDataPath("$PROJECT_ROOT")
  @RunWith(JUnit3RunnerWithInners.class)
  public static class Metadata extends AbstractCliTest {
    private void runTest(String testDataFilePath) {
      KotlinTestUtils.runTest(this::doMetadataTest, this, testDataFilePath);
    }

    public void testAllFilesPresentInMetadata() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("compiler/testData/cli/metadata"), Pattern.compile("^(.+)\\.args$"), null, false);
    }

    @TestMetadata("anonymousObjectType.args")
    public void testAnonymousObjectType() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/anonymousObjectType.args");
    }

    @TestMetadata("complexAnnotationArgument.args")
    public void testComplexAnnotationArgument() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/complexAnnotationArgument.args");
    }

    @TestMetadata("experimentalCheckers.args")
    public void testExperimentalCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/experimentalCheckers.args");
    }

    @TestMetadata("extraCheckers.args")
    public void testExtraCheckers() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/extraCheckers.args");
    }

    @TestMetadata("getOrDefault.args")
    public void testGetOrDefault() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/getOrDefault.args");
    }

    @TestMetadata("hmppModules.args")
    public void testHmppModules() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/hmppModules.args");
    }

    @TestMetadata("inheritorOfExpectSealedClass.args")
    public void testInheritorOfExpectSealedClass() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/inheritorOfExpectSealedClass.args");
    }

    @TestMetadata("kotlinPackage.args")
    public void testKotlinPackage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/kotlinPackage.args");
    }

    @TestMetadata("kt58139.args")
    public void testKt58139() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/kt58139.args");
    }

    @TestMetadata("lambdaWithReceiver.args")
    public void testLambdaWithReceiver() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/lambdaWithReceiver.args");
    }

    @TestMetadata("moduleName.args")
    public void testModuleName() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/moduleName.args");
    }

    @TestMetadata("noVirtualFileHiddenForMemberWithPlatformDependentAnnotation.args")
    public void testNoVirtualFileHiddenForMemberWithPlatformDependentAnnotation() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/noVirtualFileHiddenForMemberWithPlatformDependentAnnotation.args");
    }

    @TestMetadata("optionalAnnotationsFromMetadata.args")
    public void testOptionalAnnotationsFromMetadata() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/optionalAnnotationsFromMetadata.args");
    }

    @TestMetadata("optionalExpectationUsage.args")
    public void testOptionalExpectationUsage() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/optionalExpectationUsage.args");
    }

    @TestMetadata("unsignedDeclarationsFromStdlib.args")
    public void testUnsignedDeclarationsFromStdlib() {
      runTest("/Users/ilya.goncharov/repos/kotlin-amper/compiler/testData/cli/metadata/unsignedDeclarationsFromStdlib.args");
    }
  }
}
