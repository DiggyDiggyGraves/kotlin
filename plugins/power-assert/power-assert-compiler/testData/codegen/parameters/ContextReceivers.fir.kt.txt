data object Asserter {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Asserter -> return false
    }
    val tmp_0: Asserter = other as Asserter
    return true
  }

  override fun hashCode(): Int {
    return -308598125
  }

  override fun toString(): String {
    return "Asserter"
  }

}

fun box(): String {
  return runAll(tests = ["test1".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test1()
  }
), "test2".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test2()
  }
)])
}

fun context1Assert(<unused var>: Asserter, condition: Boolean, msg: Any? = null) {
  when {
    condition.not() -> throw AssertionError(p0 = msg.toString())
  }
}

fun context2Assert(<unused var>: Asserter, <unused var>: Asserter, condition: Boolean, msg: Any? = null) {
  when {
    condition.not() -> throw AssertionError(p0 = msg.toString())
  }
}

fun test1() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      context1Assert(<unused var> = $this$with, condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 566, source = "        context1Assert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 23, endOffset = 41, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 23, endOffset = 36, displayOffset = 30, value = tmp0_Explain), EqualityExpression(startOffset = 23, endOffset = 41, displayOffset = 37, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

fun test2() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      context2Assert(<unused var> = $this$with, <unused var> = $this$with, condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 653, source = "        context2Assert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 23, endOffset = 41, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 23, endOffset = 36, displayOffset = 30, value = tmp0_Explain), EqualityExpression(startOffset = 23, endOffset = 41, displayOffset = 37, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

