data object Asserter {
  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  override operator fun equals(other: Any?): Boolean {
    when {
      EQEQEQ(arg0 = <this>, arg1 = other) -> return true
    }
    when {
      other !is Asserter -> return false
    }
    val tmp_0: Asserter = other as Asserter
    return true
  }

  override fun hashCode(): Int {
    return -308598125
  }

  override fun toString(): String {
    return "Asserter"
  }

  fun dispatchAssert(condition: Boolean, msg: Any? = null) {
    when {
      condition.not() -> throw AssertionError(p0 = msg.toString())
    }
  }

  fun Asserter.memberExtensionAssert(condition: Boolean, msg: Any? = null) {
    when {
      condition.not() -> throw AssertionError(p0 = msg.toString())
    }
  }

}

fun box(): String {
  return runAll(tests = ["test1".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test1()
  }
), "test2".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test2()
  }
), "test3".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test3()
  }
), "test4".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test4()
  }
), "test5".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test5()
  }
), "test6".to<String, Function0<Unit>>(that = local fun <anonymous>() {
    test6()
  }
)])
}

fun Asserter.extensionAssert(condition: Boolean, msg: Any? = null) {
  when {
    condition.not() -> throw AssertionError(p0 = msg.toString())
  }
}

fun test1() {
  { // BLOCK
    val tmp0_Explain: Int = "test".<get-length>()
    val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
    Asserter.dispatchAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 770, source = "    Asserter.dispatchAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 28, endOffset = 46, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 28, endOffset = 41, displayOffset = 35, value = tmp0_Explain), EqualityExpression(startOffset = 28, endOffset = 46, displayOffset = 42, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
  }
}

fun test2() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      $this$with.dispatchAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 856, source = "        dispatchAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 23, endOffset = 41, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 23, endOffset = 36, displayOffset = 30, value = tmp0_Explain), EqualityExpression(startOffset = 23, endOffset = 41, displayOffset = 37, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

fun test3() {
  { // BLOCK
    val tmp0_Explain: Int = "test".<get-length>()
    val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
    Asserter.extensionAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 922, source = "    Asserter.extensionAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 29, endOffset = 47, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 29, endOffset = 42, displayOffset = 36, value = tmp0_Explain), EqualityExpression(startOffset = 29, endOffset = 47, displayOffset = 43, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
  }
}

fun test4() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      $this$with.extensionAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 1009, source = "        extensionAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 24, endOffset = 42, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 24, endOffset = 37, displayOffset = 31, value = tmp0_Explain), EqualityExpression(startOffset = 24, endOffset = 42, displayOffset = 38, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

fun test5() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      ($this$with, Asserter).memberExtensionAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 1097, source = "        Asserter.memberExtensionAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 39, endOffset = 57, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 39, endOffset = 52, displayOffset = 46, value = tmp0_Explain), EqualityExpression(startOffset = 39, endOffset = 57, displayOffset = 53, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

fun test6() {
  with<Asserter, Unit>(receiver = Asserter, block = local fun Asserter.<anonymous>() {
    { // BLOCK
      val tmp0_Explain: Int = "test".<get-length>()
      val tmp1_Explain: Boolean = EQEQ(arg0 = tmp0_Explain, arg1 = 5)
      ($this$with, $this$with).memberExtensionAssert(condition = tmp1_Explain, msg = "\n" + CallExplanation(offset = 1200, source = "        memberExtensionAssert(\"test\".length == 5)", dispatchReceiver = null, extensionReceiver = null, valueArguments = mapOf</* null */, /* null */>(pairs = [Pair</* null */, /* null */>(first = "condition", second = ValueArgument(startOffset = 30, endOffset = 48, expressions = listOf</* null */>(elements = [ValueExpression(startOffset = 30, endOffset = 43, displayOffset = 37, value = tmp0_Explain), EqualityExpression(startOffset = 30, endOffset = 48, displayOffset = 44, value = tmp1_Explain, lhs = tmp0_Explain, rhs = 5)])))])).toDefaultMessage())
    }
  }
)
}

